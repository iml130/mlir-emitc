// RUN: emitc-opt

"module"() ( {
  "func"() ( {
  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32>):  // no predecessors
    %0 = "mhlo.add"(%arg0, %arg1) {name = "add.88"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    "std.return"(%0) : (tensor<f32>) -> ()
  }) {sym_name = "mcmc_sample_chain_dual_averaging_step_size_adaptation___init____bootstrap_results_transformed_kernel_bootstrap_results_mh_bootstrap_results_hmc_kernel_bootstrap_results_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_gradients_mcmc_sample_chain_dual_averaging_step_size_adaptation___init____bootstrap_results_transformed_kernel_bootstrap_results_mh_bootstrap_results_hmc_kernel_bootstrap_results_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_add_grad_Sum_reduction.85", sym_visibility = "private", type = (tensor<f32>, tensor<f32>) -> tensor<f32>} : () -> ()
  "func"() ( {
  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32>):  // no predecessors
    %0 = "mhlo.add"(%arg0, %arg1) {name = "add.101"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    "std.return"(%0) : (tensor<f32>) -> ()
  }) {sym_name = "mcmc_sample_chain_dual_averaging_step_size_adaptation___init____bootstrap_results_transformed_kernel_bootstrap_results_mh_bootstrap_results_hmc_kernel_bootstrap_results_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_gradients_mcmc_sample_chain_dual_averaging_step_size_adaptation___init____bootstrap_results_transformed_kernel_bootstrap_results_mh_bootstrap_results_hmc_kernel_bootstrap_results_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_exp_1_forward_log_det_jacobian_mul_grad_Sum_reduction.98", sym_visibility = "private", type = (tensor<f32>, tensor<f32>) -> tensor<f32>} : () -> ()
  "func"() ( {
  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32>):  // no predecessors
    %0 = "mhlo.add"(%arg0, %arg1) {name = "add.111"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    "std.return"(%0) : (tensor<f32>) -> ()
  }) {sym_name = "mcmc_sample_chain_dual_averaging_step_size_adaptation___init____bootstrap_results_transformed_kernel_bootstrap_results_mh_bootstrap_results_hmc_kernel_bootstrap_results_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_gradients_mcmc_sample_chain_dual_averaging_step_size_adaptation___init____bootstrap_results_transformed_kernel_bootstrap_results_mh_bootstrap_results_hmc_kernel_bootstrap_results_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_test_model_unnormalized_log_prob_LogNormal_log_prob_LogNormal_Normal_1_log_prob_sub_grad_Sum_reduction.108", sym_visibility = "private", type = (tensor<f32>, tensor<f32>) -> tensor<f32>} : () -> ()
  "func"() ( {
  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32>):  // no predecessors
    %0 = "mhlo.add"(%arg0, %arg1) {name = "add.145"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    "std.return"(%0) : (tensor<f32>) -> ()
  }) {sym_name = "mcmc_sample_chain_dual_averaging_step_size_adaptation___init____bootstrap_results_transformed_kernel_bootstrap_results_mh_bootstrap_results_hmc_kernel_bootstrap_results_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_gradients_mcmc_sample_chain_dual_averaging_step_size_adaptation___init____bootstrap_results_transformed_kernel_bootstrap_results_mh_bootstrap_results_hmc_kernel_bootstrap_results_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_test_model_unnormalized_log_prob_LogNormal_log_prob_LogNormal_exp_2_inverse_log_det_jacobian_mul_grad_Sum_reduction.142", sym_visibility = "private", type = (tensor<f32>, tensor<f32>) -> tensor<f32>} : () -> ()
  "func"() ( {
  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32>):  // no predecessors
    %0 = "mhlo.add"(%arg0, %arg1) {name = "add.177"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    "std.return"(%0) : (tensor<f32>) -> ()
  }) {sym_name = "mcmc_sample_chain_dual_averaging_step_size_adaptation___init____bootstrap_results_transformed_kernel_bootstrap_results_mh_bootstrap_results_hmc_kernel_bootstrap_results_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_gradients_mcmc_sample_chain_dual_averaging_step_size_adaptation___init____bootstrap_results_transformed_kernel_bootstrap_results_mh_bootstrap_results_hmc_kernel_bootstrap_results_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_test_model_unnormalized_log_prob_LogNormal_log_prob_LogNormal_exp_2_inverse_log_det_jacobian_mul_1_grad_Sum_reduction.174", sym_visibility = "private", type = (tensor<f32>, tensor<f32>) -> tensor<f32>} : () -> ()
  "func"() ( {
  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32>):  // no predecessors
    %0 = "mhlo.add"(%arg0, %arg1) {name = "add.265"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    "std.return"(%0) : (tensor<f32>) -> ()
  }) {sym_name = "mcmc_sample_chain_dual_averaging_step_size_adaptation___init____bootstrap_results_transformed_kernel_bootstrap_results_mh_bootstrap_results_hmc_kernel_bootstrap_results_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_gradients_mcmc_sample_chain_dual_averaging_step_size_adaptation___init____bootstrap_results_transformed_kernel_bootstrap_results_mh_bootstrap_results_hmc_kernel_bootstrap_results_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_test_model_unnormalized_log_prob_LogNormal_log_prob_LogNormal_Normal_1_log_prob_SquaredDifference_grad_Sum_reduction.262", sym_visibility = "private", type = (tensor<f32>, tensor<f32>) -> tensor<f32>} : () -> ()
  "func"() ( {
  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32>):  // no predecessors
    %0 = "mhlo.add"(%arg0, %arg1) {name = "add.289"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    "std.return"(%0) : (tensor<f32>) -> ()
  }) {sym_name = "mcmc_sample_chain_dual_averaging_step_size_adaptation___init____bootstrap_results_transformed_kernel_bootstrap_results_mh_bootstrap_results_hmc_kernel_bootstrap_results_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_gradients_mcmc_sample_chain_dual_averaging_step_size_adaptation___init____bootstrap_results_transformed_kernel_bootstrap_results_mh_bootstrap_results_hmc_kernel_bootstrap_results_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_test_model_unnormalized_log_prob_LogNormal_log_prob_LogNormal_Normal_1_log_prob_truediv_grad_Sum_1_reduction.286", sym_visibility = "private", type = (tensor<f32>, tensor<f32>) -> tensor<f32>} : () -> ()
  "func"() ( {
  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32>):  // no predecessors
    %0 = "mhlo.add"(%arg0, %arg1) {name = "add.305"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    "std.return"(%0) : (tensor<f32>) -> ()
  }) {sym_name = "mcmc_sample_chain_dual_averaging_step_size_adaptation___init____bootstrap_results_transformed_kernel_bootstrap_results_mh_bootstrap_results_hmc_kernel_bootstrap_results_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_gradients_mcmc_sample_chain_dual_averaging_step_size_adaptation___init____bootstrap_results_transformed_kernel_bootstrap_results_mh_bootstrap_results_hmc_kernel_bootstrap_results_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_test_model_unnormalized_log_prob_LogNormal_log_prob_LogNormal_Normal_1_log_prob_mul_grad_Sum_reduction.302", sym_visibility = "private", type = (tensor<f32>, tensor<f32>) -> tensor<f32>} : () -> ()
  "func"() ( {
  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32>):  // no predecessors
    %0 = "mhlo.add"(%arg0, %arg1) {name = "add.353"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    "std.return"(%0) : (tensor<f32>) -> ()
  }) {sym_name = "mcmc_sample_chain_trace_scan_while_smart_for_loop_while_dual_averaging_step_size_adaptation___init____one_step_transformed_kernel_one_step_mh_one_step_hmc_kernel_one_step_leapfrog_integrate_while_leapfrog_integrate_one_step_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_gradients_mcmc_sample_chain_trace_scan_while_smart_for_loop_while_dual_averaging_step_size_adaptation___init____one_step_transformed_kernel_one_step_mh_one_step_hmc_kernel_one_step_leapfrog_integrate_while_leapfrog_integrate_one_step_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_add_grad_Sum_reduction.350", sym_visibility = "private", type = (tensor<f32>, tensor<f32>) -> tensor<f32>} : () -> ()
  "func"() ( {
  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32>):  // no predecessors
    %0 = "mhlo.add"(%arg0, %arg1) {name = "add.357"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    "std.return"(%0) : (tensor<f32>) -> ()
  }) {sym_name = "mcmc_sample_chain_trace_scan_while_smart_for_loop_while_dual_averaging_step_size_adaptation___init____one_step_transformed_kernel_one_step_mh_one_step_hmc_kernel_one_step_leapfrog_integrate_while_leapfrog_integrate_one_step_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_gradients_mcmc_sample_chain_trace_scan_while_smart_for_loop_while_dual_averaging_step_size_adaptation___init____one_step_transformed_kernel_one_step_mh_one_step_hmc_kernel_one_step_leapfrog_integrate_while_leapfrog_integrate_one_step_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_test_model_unnormalized_log_prob_LogNormal_log_prob_LogNormal_Normal_1_log_prob_sub_grad_Sum_reduction.354", sym_visibility = "private", type = (tensor<f32>, tensor<f32>) -> tensor<f32>} : () -> ()
  "func"() ( {
  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32>):  // no predecessors
    %0 = "mhlo.add"(%arg0, %arg1) {name = "add.361"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    "std.return"(%0) : (tensor<f32>) -> ()
  }) {sym_name = "mcmc_sample_chain_trace_scan_while_smart_for_loop_while_dual_averaging_step_size_adaptation___init____one_step_transformed_kernel_one_step_mh_one_step_hmc_kernel_one_step_leapfrog_integrate_while_leapfrog_integrate_one_step_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_gradients_mcmc_sample_chain_trace_scan_while_smart_for_loop_while_dual_averaging_step_size_adaptation___init____one_step_transformed_kernel_one_step_mh_one_step_hmc_kernel_one_step_leapfrog_integrate_while_leapfrog_integrate_one_step_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_test_model_unnormalized_log_prob_LogNormal_log_prob_LogNormal_Normal_1_log_prob_SquaredDifference_grad_Sum_reduction.358", sym_visibility = "private", type = (tensor<f32>, tensor<f32>) -> tensor<f32>} : () -> ()
  "func"() ( {
  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32>):  // no predecessors
    %0 = "mhlo.add"(%arg0, %arg1) {name = "add.365"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    "std.return"(%0) : (tensor<f32>) -> ()
  }) {sym_name = "mcmc_sample_chain_trace_scan_while_smart_for_loop_while_dual_averaging_step_size_adaptation___init____one_step_transformed_kernel_one_step_mh_one_step_hmc_kernel_one_step_leapfrog_integrate_while_leapfrog_integrate_one_step_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_gradients_mcmc_sample_chain_trace_scan_while_smart_for_loop_while_dual_averaging_step_size_adaptation___init____one_step_transformed_kernel_one_step_mh_one_step_hmc_kernel_one_step_leapfrog_integrate_while_leapfrog_integrate_one_step_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_test_model_unnormalized_log_prob_LogNormal_log_prob_LogNormal_Normal_1_log_prob_truediv_grad_Sum_1_reduction.362", sym_visibility = "private", type = (tensor<f32>, tensor<f32>) -> tensor<f32>} : () -> ()
  "func"() ( {
  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32>):  // no predecessors
    %0 = "mhlo.add"(%arg0, %arg1) {name = "add.369"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    "std.return"(%0) : (tensor<f32>) -> ()
  }) {sym_name = "mcmc_sample_chain_trace_scan_while_smart_for_loop_while_dual_averaging_step_size_adaptation___init____one_step_transformed_kernel_one_step_mh_one_step_hmc_kernel_one_step_leapfrog_integrate_while_leapfrog_integrate_one_step_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_gradients_mcmc_sample_chain_trace_scan_while_smart_for_loop_while_dual_averaging_step_size_adaptation___init____one_step_transformed_kernel_one_step_mh_one_step_hmc_kernel_one_step_leapfrog_integrate_while_leapfrog_integrate_one_step_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_test_model_unnormalized_log_prob_LogNormal_log_prob_LogNormal_Normal_1_log_prob_mul_grad_Sum_reduction.366", sym_visibility = "private", type = (tensor<f32>, tensor<f32>) -> tensor<f32>} : () -> ()
  "func"() ( {
  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32>):  // no predecessors
    %0 = "mhlo.add"(%arg0, %arg1) {name = "add.373"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    "std.return"(%0) : (tensor<f32>) -> ()
  }) {sym_name = "mcmc_sample_chain_trace_scan_while_smart_for_loop_while_dual_averaging_step_size_adaptation___init____one_step_transformed_kernel_one_step_mh_one_step_hmc_kernel_one_step_leapfrog_integrate_while_leapfrog_integrate_one_step_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_gradients_mcmc_sample_chain_trace_scan_while_smart_for_loop_while_dual_averaging_step_size_adaptation___init____one_step_transformed_kernel_one_step_mh_one_step_hmc_kernel_one_step_leapfrog_integrate_while_leapfrog_integrate_one_step_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_test_model_unnormalized_log_prob_LogNormal_log_prob_LogNormal_exp_2_inverse_log_det_jacobian_mul_grad_Sum_reduction.370", sym_visibility = "private", type = (tensor<f32>, tensor<f32>) -> tensor<f32>} : () -> ()
  "func"() ( {
  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32>):  // no predecessors
    %0 = "mhlo.add"(%arg0, %arg1) {name = "add.377"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    "std.return"(%0) : (tensor<f32>) -> ()
  }) {sym_name = "mcmc_sample_chain_trace_scan_while_smart_for_loop_while_dual_averaging_step_size_adaptation___init____one_step_transformed_kernel_one_step_mh_one_step_hmc_kernel_one_step_leapfrog_integrate_while_leapfrog_integrate_one_step_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_gradients_mcmc_sample_chain_trace_scan_while_smart_for_loop_while_dual_averaging_step_size_adaptation___init____one_step_transformed_kernel_one_step_mh_one_step_hmc_kernel_one_step_leapfrog_integrate_while_leapfrog_integrate_one_step_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_test_model_unnormalized_log_prob_LogNormal_log_prob_LogNormal_exp_2_inverse_log_det_jacobian_mul_1_grad_Sum_reduction.374", sym_visibility = "private", type = (tensor<f32>, tensor<f32>) -> tensor<f32>} : () -> ()
  "func"() ( {
  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32>):  // no predecessors
    %0 = "mhlo.add"(%arg0, %arg1) {name = "add.381"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    "std.return"(%0) : (tensor<f32>) -> ()
  }) {sym_name = "mcmc_sample_chain_trace_scan_while_smart_for_loop_while_dual_averaging_step_size_adaptation___init____one_step_transformed_kernel_one_step_mh_one_step_hmc_kernel_one_step_leapfrog_integrate_while_leapfrog_integrate_one_step_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_gradients_mcmc_sample_chain_trace_scan_while_smart_for_loop_while_dual_averaging_step_size_adaptation___init____one_step_transformed_kernel_one_step_mh_one_step_hmc_kernel_one_step_leapfrog_integrate_while_leapfrog_integrate_one_step_maybe_call_fn_and_grads_value_and_gradients_value_and_gradient_exp_1_forward_log_det_jacobian_mul_grad_Sum_reduction.378", sym_visibility = "private", type = (tensor<f32>, tensor<f32>) -> tensor<f32>} : () -> ()
  "func"() ( {
  ^bb0(%arg0: tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>):  // no predecessors
    %0 = "mhlo.get_tuple_element"(%arg0) {index = 5 : i32, name = "get-tuple-element.389"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
    %1 = "mhlo.get_tuple_element"(%arg0) {index = 6 : i32, name = "get-tuple-element.390"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
    %cst = "std.constant"() {name = "constant.398", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %2 = "mhlo.broadcast_in_dim"(%cst) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.399"} : (tensor<f32>) -> tensor<4xf32>
    %3 = "mhlo.convert"(%2) {name = "convert.400"} : (tensor<4xf32>) -> tensor<4xf32>
    %cst_0 = "std.constant"() {name = "constant.401", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %4 = "mhlo.convert"(%cst_0) {name = "convert.402"} : (tensor<f32>) -> tensor<f32>
    %5 = "mhlo.reduce"(%3, %4) ( {
    ^bb0(%arg1: tensor<f32>, %arg2: tensor<f32>):  // no predecessors
      %170 = "mhlo.add"(%arg1, %arg2) {name = "add.353"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
      "mhlo.return"(%170) : (tensor<f32>) -> ()
    }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
    %6 = "mhlo.convert"(%5) {name = "convert.404"} : (tensor<f32>) -> tensor<f32>
    %7 = "mhlo.reshape"(%6) {name = "reshape.405"} : (tensor<f32>) -> tensor<f32>
    %cst_1 = "std.constant"() {name = "constant.395", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %8 = "mhlo.broadcast_in_dim"(%cst_1) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.396"} : (tensor<f32>) -> tensor<4xf32>
    %9 = "mhlo.negate"(%8) {name = "negate.397"} : (tensor<4xf32>) -> tensor<4xf32>
    %10 = "mhlo.convert"(%9) {name = "convert.406"} : (tensor<4xf32>) -> tensor<4xf32>
    %cst_2 = "std.constant"() {name = "constant.407", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %11 = "mhlo.convert"(%cst_2) {name = "convert.408"} : (tensor<f32>) -> tensor<f32>
    %12 = "mhlo.reduce"(%10, %11) ( {
    ^bb0(%arg1: tensor<f32>, %arg2: tensor<f32>):  // no predecessors
      %170 = "mhlo.add"(%arg1, %arg2) {name = "add.357"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
      "mhlo.return"(%170) : (tensor<f32>) -> ()
    }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
    %13 = "mhlo.convert"(%12) {name = "convert.410"} : (tensor<f32>) -> tensor<f32>
    %14 = "mhlo.reshape"(%13) {name = "reshape.411"} : (tensor<f32>) -> tensor<f32>
    %cst_3 = "std.constant"() {name = "constant.416", value = dense<4> : tensor<1xi32>} : () -> tensor<1xi32>
    %cst_4 = "std.constant"() {name = "constant.417", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %15 = "mhlo.broadcast_in_dim"(%cst_4) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.419"} : (tensor<i32>) -> tensor<1xi32>
    %16 = "mhlo.compare"(%cst_3, %15) {comparison_direction = "LT", name = "compare.420"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi1>
    %cst_5 = "std.constant"() {name = "constant.412", value = dense<4> : tensor<1xi32>} : () -> tensor<1xi32>
    %cst_6 = "std.constant"() {name = "constant.413", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %17 = "mhlo.broadcast_in_dim"(%cst_6) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.414"} : (tensor<i32>) -> tensor<1xi32>
    %18 = "mhlo.maximum"(%cst_5, %17) {name = "maximum.415"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
    %19 = "mhlo.broadcast_in_dim"(%cst_4) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.421"} : (tensor<i32>) -> tensor<1xi32>
    %20 = "mhlo.compare"(%18, %19) {comparison_direction = "LT", name = "compare.422"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi1>
    %21 = "mhlo.compare"(%16, %20) {comparison_direction = "NE", name = "compare.423"} : (tensor<1xi1>, tensor<1xi1>) -> tensor<1xi1>
    %22 = "mhlo.abs"(%cst_3) {name = "abs.424"} : (tensor<1xi32>) -> tensor<1xi32>
    %23 = "mhlo.abs"(%18) {name = "abs.425"} : (tensor<1xi32>) -> tensor<1xi32>
    %24 = "mhlo.add"(%22, %23) {name = "add.426"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
    %cst_7 = "std.constant"() {name = "constant.418", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %25 = "mhlo.broadcast_in_dim"(%cst_7) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.427"} : (tensor<i32>) -> tensor<1xi32>
    %26 = "mhlo.subtract"(%24, %25) {name = "subtract.428"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
    %27 = "mhlo.negate"(%26) {name = "negate.429"} : (tensor<1xi32>) -> tensor<1xi32>
    %28 = "mhlo.divide"(%27, %23) {name = "divide.430"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
    %29 = "mhlo.divide"(%cst_3, %18) {name = "divide.431"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
    %30 = "mhlo.select"(%21, %28, %29) {name = "select.432"} : (tensor<1xi1>, tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
    %cst_8 = "std.constant"() {name = "constant.433", value = dense<-5.000000e-01> : tensor<f32>} : () -> tensor<f32>
    %31 = "mhlo.broadcast_in_dim"(%cst_8) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.436"} : (tensor<f32>) -> tensor<4xf32>
    %cst_9 = "std.constant"() {name = "constant.434", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %32 = "mhlo.broadcast_in_dim"(%cst_9) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.435"} : (tensor<f32>) -> tensor<4xf32>
    %33 = "mhlo.multiply"(%31, %32) {name = "multiply.437"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_10 = "std.constant"() {name = "constant.438", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %34 = "mhlo.broadcast_in_dim"(%cst_10) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.441"} : (tensor<f32>) -> tensor<4xf32>
    %cst_11 = "std.constant"() {name = "constant.439", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %35 = "mhlo.broadcast_in_dim"(%cst_11) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.440"} : (tensor<f32>) -> tensor<4xf32>
    %36 = "mhlo.multiply"(%34, %35) {name = "multiply.442"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_12 = "std.constant"() {name = "constant.503", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %37 = "mhlo.broadcast_in_dim"(%cst_12) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.504"} : (tensor<f32>) -> tensor<4xf32>
    %38 = "mhlo.get_tuple_element"(%arg0) {index = 4 : i32, name = "get-tuple-element.388"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
    %39 = "mhlo.get_tuple_element"(%arg0) {index = 8 : i32, name = "get-tuple-element.392"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
    %40 = "mhlo.get_tuple_element"(%arg0) {index = 3 : i32, name = "get-tuple-element.387"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
    %41 = "mhlo.multiply"(%39, %40) {name = "multiply.455"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %42 = "mhlo.add"(%38, %41) {name = "add.456"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %43 = "mhlo.exponential"(%42) {name = "exponential.486"} : (tensor<4xf32>) -> tensor<4xf32>
    %44 = "mhlo.log"(%43) {name = "log.493"} : (tensor<4xf32>) -> tensor<4xf32>
    %45 = "mhlo.get_tuple_element"(%arg0) {index = 9 : i32, name = "get-tuple-element.393"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<f32>
    %46 = "mhlo.broadcast_in_dim"(%45) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.499"} : (tensor<f32>) -> tensor<4xf32>
    %47 = "mhlo.divide"(%44, %46) {name = "divide.500"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %48 = "mhlo.get_tuple_element"(%arg0) {index = 10 : i32, name = "get-tuple-element.394"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<f32>
    %49 = "mhlo.divide"(%48, %45) {name = "divide.450"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    %50 = "mhlo.broadcast_in_dim"(%49) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.501"} : (tensor<f32>) -> tensor<4xf32>
    %51 = "mhlo.subtract"(%47, %50) {name = "subtract.502"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %52 = "mhlo.multiply"(%37, %51) {name = "multiply.505"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %53 = "mhlo.convert"(%52) {name = "convert.506"} : (tensor<4xf32>) -> tensor<4xf32>
    %cst_13 = "std.constant"() {name = "constant.507", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %54 = "mhlo.convert"(%cst_13) {name = "convert.508"} : (tensor<f32>) -> tensor<f32>
    %55 = "mhlo.reduce"(%53, %54) ( {
    ^bb0(%arg1: tensor<f32>, %arg2: tensor<f32>):  // no predecessors
      %170 = "mhlo.add"(%arg1, %arg2) {name = "add.361"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
      "mhlo.return"(%170) : (tensor<f32>) -> ()
    }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
    %56 = "mhlo.convert"(%55) {name = "convert.510"} : (tensor<f32>) -> tensor<f32>
    %57 = "mhlo.reshape"(%56) {name = "reshape.511"} : (tensor<f32>) -> tensor<f32>
    %58 = "mhlo.negate"(%57) {name = "negate.512"} : (tensor<f32>) -> tensor<f32>
    %59 = "mhlo.negate"(%44) {name = "negate.494"} : (tensor<4xf32>) -> tensor<4xf32>
    %60 = "mhlo.broadcast_in_dim"(%45) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.495"} : (tensor<f32>) -> tensor<4xf32>
    %61 = "mhlo.divide"(%59, %60) {name = "divide.496"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %62 = "mhlo.broadcast_in_dim"(%45) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.497"} : (tensor<f32>) -> tensor<4xf32>
    %63 = "mhlo.divide"(%61, %62) {name = "divide.498"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %64 = "mhlo.multiply"(%52, %63) {name = "multiply.527"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %65 = "mhlo.convert"(%64) {name = "convert.528"} : (tensor<4xf32>) -> tensor<4xf32>
    %cst_14 = "std.constant"() {name = "constant.529", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %66 = "mhlo.convert"(%cst_14) {name = "convert.530"} : (tensor<f32>) -> tensor<f32>
    %67 = "mhlo.reduce"(%65, %66) ( {
    ^bb0(%arg1: tensor<f32>, %arg2: tensor<f32>):  // no predecessors
      %170 = "mhlo.add"(%arg1, %arg2) {name = "add.365"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
      "mhlo.return"(%170) : (tensor<f32>) -> ()
    }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
    %68 = "mhlo.convert"(%67) {name = "convert.532"} : (tensor<f32>) -> tensor<f32>
    %69 = "mhlo.reshape"(%68) {name = "reshape.533"} : (tensor<f32>) -> tensor<f32>
    %cst_15 = "std.constant"() {name = "constant.537", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %70 = "mhlo.broadcast_in_dim"(%cst_15) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.538"} : (tensor<f32>) -> tensor<4xf32>
    %71 = "mhlo.broadcast_in_dim"(%49) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.534"} : (tensor<f32>) -> tensor<4xf32>
    %72 = "mhlo.subtract"(%47, %71) {name = "subtract.535"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %73 = "mhlo.multiply"(%72, %72) {name = "multiply.536"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %74 = "mhlo.multiply"(%70, %73) {name = "multiply.539"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %75 = "mhlo.convert"(%74) {name = "convert.540"} : (tensor<4xf32>) -> tensor<4xf32>
    %cst_16 = "std.constant"() {name = "constant.541", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %76 = "mhlo.convert"(%cst_16) {name = "convert.542"} : (tensor<f32>) -> tensor<f32>
    %77 = "mhlo.reduce"(%75, %76) ( {
    ^bb0(%arg1: tensor<f32>, %arg2: tensor<f32>):  // no predecessors
      %170 = "mhlo.add"(%arg1, %arg2) {name = "add.369"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
      "mhlo.return"(%170) : (tensor<f32>) -> ()
    }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
    %78 = "mhlo.convert"(%77) {name = "convert.544"} : (tensor<f32>) -> tensor<f32>
    %79 = "mhlo.reshape"(%78) {name = "reshape.545"} : (tensor<f32>) -> tensor<f32>
    %cst_17 = "std.constant"() {name = "constant.552", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %80 = "mhlo.broadcast_in_dim"(%cst_17) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.553"} : (tensor<f32>) -> tensor<4xf32>
    %81 = "mhlo.log"(%43) {name = "log.551"} : (tensor<4xf32>) -> tensor<4xf32>
    %82 = "mhlo.multiply"(%80, %81) {name = "multiply.554"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %83 = "mhlo.convert"(%82) {name = "convert.555"} : (tensor<4xf32>) -> tensor<4xf32>
    %cst_18 = "std.constant"() {name = "constant.556", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %84 = "mhlo.convert"(%cst_18) {name = "convert.557"} : (tensor<f32>) -> tensor<f32>
    %85 = "mhlo.reduce"(%83, %84) ( {
    ^bb0(%arg1: tensor<f32>, %arg2: tensor<f32>):  // no predecessors
      %170 = "mhlo.add"(%arg1, %arg2) {name = "add.373"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
      "mhlo.return"(%170) : (tensor<f32>) -> ()
    }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
    %86 = "mhlo.convert"(%85) {name = "convert.559"} : (tensor<f32>) -> tensor<f32>
    %87 = "mhlo.reshape"(%86) {name = "reshape.560"} : (tensor<f32>) -> tensor<f32>
    %cst_19 = "std.constant"() {name = "constant.564", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %88 = "mhlo.broadcast_in_dim"(%cst_19) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.565"} : (tensor<f32>) -> tensor<4xf32>
    %cst_20 = "std.constant"() {name = "constant.561", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %89 = "mhlo.broadcast_in_dim"(%cst_20) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.562"} : (tensor<f32>) -> tensor<4xf32>
    %90 = "mhlo.multiply"(%89, %81) {name = "multiply.563"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %91 = "mhlo.multiply"(%88, %90) {name = "multiply.566"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %92 = "mhlo.convert"(%91) {name = "convert.567"} : (tensor<4xf32>) -> tensor<4xf32>
    %cst_21 = "std.constant"() {name = "constant.568", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %93 = "mhlo.convert"(%cst_21) {name = "convert.569"} : (tensor<f32>) -> tensor<f32>
    %94 = "mhlo.reduce"(%92, %93) ( {
    ^bb0(%arg1: tensor<f32>, %arg2: tensor<f32>):  // no predecessors
      %170 = "mhlo.add"(%arg1, %arg2) {name = "add.377"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
      "mhlo.return"(%170) : (tensor<f32>) -> ()
    }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
    %95 = "mhlo.convert"(%94) {name = "convert.571"} : (tensor<f32>) -> tensor<f32>
    %96 = "mhlo.reshape"(%95) {name = "reshape.572"} : (tensor<f32>) -> tensor<f32>
    %cst_22 = "std.constant"() {name = "constant.546", value = dense<-5.000000e-01> : tensor<f32>} : () -> tensor<f32>
    %97 = "mhlo.broadcast_in_dim"(%cst_22) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.547"} : (tensor<f32>) -> tensor<4xf32>
    %98 = "mhlo.multiply"(%97, %73) {name = "multiply.548"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_23 = "std.constant"() {name = "constant.447", value = dense<0.918938517> : tensor<f32>} : () -> tensor<f32>
    %99 = "mhlo.log"(%45) {name = "log.446"} : (tensor<f32>) -> tensor<f32>
    %100 = "mhlo.add"(%cst_23, %99) {name = "add.448"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    %101 = "mhlo.broadcast_in_dim"(%100) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.549"} : (tensor<f32>) -> tensor<4xf32>
    %102 = "mhlo.subtract"(%98, %101) {name = "subtract.550"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_24 = "std.constant"() {name = "constant.573", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %103 = "mhlo.broadcast_in_dim"(%cst_24) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.574"} : (tensor<f32>) -> tensor<4xf32>
    %104 = "mhlo.multiply"(%103, %90) {name = "multiply.575"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %105 = "mhlo.add"(%102, %104) {name = "add.576"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_25 = "std.constant"() {name = "constant.582", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %106 = "mhlo.broadcast_in_dim"(%cst_25) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.583"} : (tensor<f32>) -> tensor<4xf32>
    %cst_26 = "std.constant"() {name = "constant.578", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %107 = "mhlo.broadcast_in_dim"(%cst_26) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.579"} : (tensor<f32>) -> tensor<4xf32>
    %108 = "mhlo.negate"(%42) {name = "negate.577"} : (tensor<4xf32>) -> tensor<4xf32>
    %109 = "mhlo.multiply"(%107, %108) {name = "multiply.580"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %110 = "mhlo.negate"(%109) {name = "negate.581"} : (tensor<4xf32>) -> tensor<4xf32>
    %111 = "mhlo.add"(%106, %110) {name = "add.584"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %112 = "mhlo.add"(%105, %111) {name = "add.585"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_27 = "std.constant"() {name = "constant.586", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %113 = "mhlo.broadcast_in_dim"(%cst_27) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.587"} : (tensor<f32>) -> tensor<4xf32>
    %114 = "mhlo.multiply"(%113, %108) {name = "multiply.588"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %115 = "mhlo.convert"(%114) {name = "convert.589"} : (tensor<4xf32>) -> tensor<4xf32>
    %cst_28 = "std.constant"() {name = "constant.590", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %116 = "mhlo.convert"(%cst_28) {name = "convert.591"} : (tensor<f32>) -> tensor<f32>
    %117 = "mhlo.reduce"(%115, %116) ( {
    ^bb0(%arg1: tensor<f32>, %arg2: tensor<f32>):  // no predecessors
      %170 = "mhlo.add"(%arg1, %arg2) {name = "add.381"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
      "mhlo.return"(%170) : (tensor<f32>) -> ()
    }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
    %118 = "mhlo.convert"(%117) {name = "convert.593"} : (tensor<f32>) -> tensor<f32>
    %119 = "mhlo.reshape"(%118) {name = "reshape.594"} : (tensor<f32>) -> tensor<f32>
    %120 = "mhlo.get_tuple_element"(%arg0) {index = 0 : i32, name = "get-tuple-element.384"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
    %cst_29 = "std.constant"() {name = "constant.451", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %121 = "mhlo.add"(%120, %cst_29) {name = "add.452"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
    %122 = "mhlo.get_tuple_element"(%arg0) {index = 1 : i32, name = "get-tuple-element.385"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
    %123 = "mhlo.get_tuple_element"(%arg0) {index = 2 : i32, name = "get-tuple-element.386"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
    %cst_30 = "std.constant"() {name = "constant.453", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %124 = "mhlo.add"(%123, %cst_30) {name = "add.454"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
    %cst_31 = "std.constant"() {name = "constant.522", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %125 = "mhlo.broadcast_in_dim"(%cst_31) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.523"} : (tensor<f32>) -> tensor<4xf32>
    %cst_32 = "std.constant"() {name = "constant.490", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %126 = "mhlo.broadcast_in_dim"(%cst_32) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.491"} : (tensor<f32>) -> tensor<4xf32>
    %cst_33 = "std.constant"() {name = "constant.487", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %127 = "mhlo.broadcast_in_dim"(%cst_33) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.488"} : (tensor<f32>) -> tensor<4xf32>
    %128 = "mhlo.divide"(%127, %43) {name = "divide.489"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %129 = "mhlo.multiply"(%126, %128) {name = "multiply.492"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %130 = "mhlo.broadcast_in_dim"(%45) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.513"} : (tensor<f32>) -> tensor<4xf32>
    %131 = "mhlo.divide"(%52, %130) {name = "divide.514"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %132 = "mhlo.reshape"(%131) {name = "reshape.515"} : (tensor<4xf32>) -> tensor<4xf32>
    %cst_34 = "std.constant"() {name = "constant.516", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %133 = "mhlo.broadcast_in_dim"(%cst_34) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.517"} : (tensor<f32>) -> tensor<4xf32>
    %134 = "mhlo.divide"(%133, %43) {name = "divide.518"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %135 = "mhlo.multiply"(%132, %134) {name = "multiply.519"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %136 = "mhlo.add"(%129, %135) {name = "add.520"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %137 = "mhlo.multiply"(%136, %43) {name = "multiply.521"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %138 = "mhlo.add"(%125, %137) {name = "add.524"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %139 = "mhlo.multiply"(%39, %138) {name = "multiply.525"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %140 = "mhlo.add"(%40, %139) {name = "add.526"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_35 = "std.constant"() {name = "constant.464", value = dense<-5.000000e-01> : tensor<f32>} : () -> tensor<f32>
    %141 = "mhlo.broadcast_in_dim"(%cst_35) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.465"} : (tensor<f32>) -> tensor<4xf32>
    %142 = "mhlo.exponential"(%42) {name = "exponential.457"} : (tensor<4xf32>) -> tensor<4xf32>
    %143 = "mhlo.log"(%142) {name = "log.458"} : (tensor<4xf32>) -> tensor<4xf32>
    %144 = "mhlo.broadcast_in_dim"(%45) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.459"} : (tensor<f32>) -> tensor<4xf32>
    %145 = "mhlo.divide"(%143, %144) {name = "divide.460"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %146 = "mhlo.divide"(%48, %45) {name = "divide.449"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    %147 = "mhlo.broadcast_in_dim"(%146) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.461"} : (tensor<f32>) -> tensor<4xf32>
    %148 = "mhlo.subtract"(%145, %147) {name = "subtract.462"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %149 = "mhlo.multiply"(%148, %148) {name = "multiply.463"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %150 = "mhlo.multiply"(%141, %149) {name = "multiply.466"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_36 = "std.constant"() {name = "constant.444", value = dense<0.918938517> : tensor<f32>} : () -> tensor<f32>
    %151 = "mhlo.log"(%45) {name = "log.443"} : (tensor<f32>) -> tensor<f32>
    %152 = "mhlo.add"(%cst_36, %151) {name = "add.445"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    %153 = "mhlo.broadcast_in_dim"(%152) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.467"} : (tensor<f32>) -> tensor<4xf32>
    %154 = "mhlo.subtract"(%150, %153) {name = "subtract.468"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_37 = "std.constant"() {name = "constant.473", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %155 = "mhlo.broadcast_in_dim"(%cst_37) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.474"} : (tensor<f32>) -> tensor<4xf32>
    %cst_38 = "std.constant"() {name = "constant.470", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %156 = "mhlo.broadcast_in_dim"(%cst_38) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.471"} : (tensor<f32>) -> tensor<4xf32>
    %157 = "mhlo.log"(%142) {name = "log.469"} : (tensor<4xf32>) -> tensor<4xf32>
    %158 = "mhlo.multiply"(%156, %157) {name = "multiply.472"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %159 = "mhlo.multiply"(%155, %158) {name = "multiply.475"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %160 = "mhlo.add"(%154, %159) {name = "add.476"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_39 = "std.constant"() {name = "constant.482", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %161 = "mhlo.broadcast_in_dim"(%cst_39) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.483"} : (tensor<f32>) -> tensor<4xf32>
    %cst_40 = "std.constant"() {name = "constant.478", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %162 = "mhlo.broadcast_in_dim"(%cst_40) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.479"} : (tensor<f32>) -> tensor<4xf32>
    %163 = "mhlo.negate"(%42) {name = "negate.477"} : (tensor<4xf32>) -> tensor<4xf32>
    %164 = "mhlo.multiply"(%162, %163) {name = "multiply.480"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %165 = "mhlo.negate"(%164) {name = "negate.481"} : (tensor<4xf32>) -> tensor<4xf32>
    %166 = "mhlo.add"(%161, %165) {name = "add.484"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %167 = "mhlo.add"(%160, %166) {name = "add.485"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %168 = "mhlo.get_tuple_element"(%arg0) {index = 7 : i32, name = "get-tuple-element.391"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
    %169 = "mhlo.tuple"(%121, %122, %124, %140, %42, %167, %138, %168, %39, %45, %48) {name = "tuple.595"} : (tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>
    "std.return"(%169) : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> ()
  }) {sym_name = "mcmc_sample_chain_trace_scan_while_smart_for_loop_while_dual_averaging_step_size_adaptation___init____one_step_transformed_kernel_one_step_mh_one_step_hmc_kernel_one_step_leapfrog_integrate_while_body_515__.382", sym_visibility = "private", type = (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>} : () -> ()
  "func"() ( {
  ^bb0(%arg0: tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>):  // no predecessors
    %0 = "mhlo.get_tuple_element"(%arg0) {index = 0 : i32, name = "get-tuple-element.598"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
    %1 = "mhlo.get_tuple_element"(%arg0) {index = 1 : i32, name = "get-tuple-element.599"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
    %2 = "mhlo.get_tuple_element"(%arg0) {index = 3 : i32, name = "get-tuple-element.601"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
    %3 = "mhlo.get_tuple_element"(%arg0) {index = 4 : i32, name = "get-tuple-element.602"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
    %4 = "mhlo.get_tuple_element"(%arg0) {index = 5 : i32, name = "get-tuple-element.603"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
    %5 = "mhlo.get_tuple_element"(%arg0) {index = 6 : i32, name = "get-tuple-element.604"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
    %6 = "mhlo.get_tuple_element"(%arg0) {index = 8 : i32, name = "get-tuple-element.606"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
    %7 = "mhlo.get_tuple_element"(%arg0) {index = 9 : i32, name = "get-tuple-element.607"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<f32>
    %8 = "mhlo.get_tuple_element"(%arg0) {index = 10 : i32, name = "get-tuple-element.608"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<f32>
    %9 = "mhlo.get_tuple_element"(%arg0) {index = 2 : i32, name = "get-tuple-element.600"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
    %10 = "mhlo.get_tuple_element"(%arg0) {index = 7 : i32, name = "get-tuple-element.605"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
    %11 = "mhlo.compare"(%9, %10) {comparison_direction = "LT", name = "compare.609"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
    %12 = "mhlo.tuple"(%11) {name = "tuple.610"} : (tensor<i1>) -> tuple<tensor<i1>>
    "std.return"(%12) : (tuple<tensor<i1>>) -> ()
  }) {sym_name = "mcmc_sample_chain_trace_scan_while_smart_for_loop_while_dual_averaging_step_size_adaptation___init____one_step_transformed_kernel_one_step_mh_one_step_hmc_kernel_one_step_leapfrog_integrate_while_cond_514__.596", sym_visibility = "private", type = (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tuple<tensor<i1>>} : () -> ()
  "func"() ( {
  ^bb0(%arg0: tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>):  // no predecessors
    %0 = "std.call"(%arg0) {callee = @mcmc_sample_chain_trace_scan_while_smart_for_loop_while_dual_averaging_step_size_adaptation___init____one_step_transformed_kernel_one_step_mh_one_step_hmc_kernel_one_step_leapfrog_integrate_while_cond_514__.596} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tuple<tensor<i1>>
    %1 = "mhlo.get_tuple_element"(%0) {index = 0 : i32, name = "get-tuple-element.614"} : (tuple<tensor<i1>>) -> tensor<i1>
    "std.return"(%1) : (tensor<i1>) -> ()
  }) {sym_name = "cond_wrapper.611", sym_visibility = "private", type = (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i1>} : () -> ()
  "func"() ( {
  ^bb0(%arg0: tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>):  // no predecessors
    %0 = "mhlo.get_tuple_element"(%arg0) {index = 4 : i32, name = "get-tuple-element.621"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %1 = "mhlo.get_tuple_element"(%arg0) {index = 11 : i32, name = "get-tuple-element.628"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %2 = "mhlo.get_tuple_element"(%arg0) {index = 13 : i32, name = "get-tuple-element.630"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xi1>
    %3 = "mhlo.get_tuple_element"(%arg0) {index = 14 : i32, name = "get-tuple-element.631"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %4 = "mhlo.get_tuple_element"(%arg0) {index = 15 : i32, name = "get-tuple-element.632"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %5 = "mhlo.get_tuple_element"(%arg0) {index = 16 : i32, name = "get-tuple-element.633"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %6 = "mhlo.get_tuple_element"(%arg0) {index = 17 : i32, name = "get-tuple-element.634"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %7 = "mhlo.get_tuple_element"(%arg0) {index = 18 : i32, name = "get-tuple-element.635"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %8 = "mhlo.get_tuple_element"(%arg0) {index = 19 : i32, name = "get-tuple-element.636"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %9 = "mhlo.get_tuple_element"(%arg0) {index = 20 : i32, name = "get-tuple-element.637"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %10 = "mhlo.get_tuple_element"(%arg0) {index = 21 : i32, name = "get-tuple-element.638"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %11 = "mhlo.get_tuple_element"(%arg0) {index = 22 : i32, name = "get-tuple-element.639"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %12 = "mhlo.get_tuple_element"(%arg0) {index = 23 : i32, name = "get-tuple-element.640"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
    %13 = "mhlo.get_tuple_element"(%arg0) {index = 24 : i32, name = "get-tuple-element.641"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
    %cst = "std.constant"() {name = "constant.655", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %cst_0 = "std.constant"() {name = "constant.656", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %14 = "mhlo.subtract"(%cst, %cst_0) {name = "subtract.657"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
    %cst_1 = "std.constant"() {name = "constant.658", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %15 = "mhlo.maximum"(%14, %cst_1) {name = "maximum.659"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
    %cst_2 = "std.constant"() {name = "constant.660", value = dense<1000> : tensor<i32>} : () -> tensor<i32>
    %16 = "mhlo.compare"(%15, %cst_2) {comparison_direction = "LT", name = "compare.661"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
    %17 = "mhlo.reshape"(%15) {name = "reshape.662"} : (tensor<i32>) -> tensor<1xi32>
    %18 = "mhlo.concatenate"(%17) {dimension = 0 : i64} : (tensor<1xi32>) -> tensor<1xi32>
    %cst_3 = "std.constant"() {name = "constant.664", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %19 = "mhlo.broadcast_in_dim"(%cst_3) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.665"} : (tensor<i32>) -> tensor<0xi32>
    %cst_4 = "std.constant"() {name = "constant.666", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %cst_5 = "std.constant"() {name = "constant.667", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %20 = "mhlo.subtract"(%cst_4, %cst_5) {name = "subtract.668"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
    %cst_6 = "std.constant"() {name = "constant.669", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %21 = "mhlo.maximum"(%20, %cst_6) {name = "maximum.670"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
    %cst_7 = "std.constant"() {name = "constant.671", value = dense<1000> : tensor<i32>} : () -> tensor<i32>
    %22 = "mhlo.compare"(%21, %cst_7) {comparison_direction = "LT", name = "compare.672"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
    %23 = "mhlo.reshape"(%21) {name = "reshape.673"} : (tensor<i32>) -> tensor<1xi32>
    %24 = "mhlo.concatenate"(%23) {dimension = 0 : i64} : (tensor<1xi32>) -> tensor<1xi32>
    %cst_8 = "std.constant"() {name = "constant.675", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %25 = "mhlo.broadcast_in_dim"(%cst_8) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.676"} : (tensor<i32>) -> tensor<0xi32>
    %cst_9 = "std.constant"() {name = "constant.677", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %cst_10 = "std.constant"() {name = "constant.678", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %26 = "mhlo.subtract"(%cst_9, %cst_10) {name = "subtract.679"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
    %cst_11 = "std.constant"() {name = "constant.680", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %27 = "mhlo.maximum"(%26, %cst_11) {name = "maximum.681"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
    %cst_12 = "std.constant"() {name = "constant.682", value = dense<1000> : tensor<i32>} : () -> tensor<i32>
    %28 = "mhlo.compare"(%27, %cst_12) {comparison_direction = "LT", name = "compare.683"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
    %29 = "mhlo.reshape"(%27) {name = "reshape.684"} : (tensor<i32>) -> tensor<1xi32>
    %30 = "mhlo.concatenate"(%29) {dimension = 0 : i64} : (tensor<1xi32>) -> tensor<1xi32>
    %cst_13 = "std.constant"() {name = "constant.686", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %31 = "mhlo.broadcast_in_dim"(%cst_13) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.687"} : (tensor<i32>) -> tensor<0xi32>
    %cst_14 = "std.constant"() {name = "constant.688", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %cst_15 = "std.constant"() {name = "constant.689", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %32 = "mhlo.subtract"(%cst_14, %cst_15) {name = "subtract.690"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
    %cst_16 = "std.constant"() {name = "constant.691", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %33 = "mhlo.maximum"(%32, %cst_16) {name = "maximum.692"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
    %cst_17 = "std.constant"() {name = "constant.693", value = dense<1000> : tensor<i32>} : () -> tensor<i32>
    %34 = "mhlo.compare"(%33, %cst_17) {comparison_direction = "LT", name = "compare.694"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
    %35 = "mhlo.reshape"(%33) {name = "reshape.695"} : (tensor<i32>) -> tensor<1xi32>
    %36 = "mhlo.concatenate"(%35) {dimension = 0 : i64} : (tensor<1xi32>) -> tensor<1xi32>
    %cst_18 = "std.constant"() {name = "constant.697", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %37 = "mhlo.broadcast_in_dim"(%cst_18) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.698"} : (tensor<i32>) -> tensor<0xi32>
    %cst_19 = "std.constant"() {name = "constant.699", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %cst_20 = "std.constant"() {name = "constant.700", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %38 = "mhlo.subtract"(%cst_19, %cst_20) {name = "subtract.701"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
    %cst_21 = "std.constant"() {name = "constant.702", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %39 = "mhlo.maximum"(%38, %cst_21) {name = "maximum.703"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
    %cst_22 = "std.constant"() {name = "constant.704", value = dense<1000> : tensor<i32>} : () -> tensor<i32>
    %40 = "mhlo.compare"(%39, %cst_22) {comparison_direction = "LT", name = "compare.705"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
    %41 = "mhlo.reshape"(%39) {name = "reshape.706"} : (tensor<i32>) -> tensor<1xi32>
    %42 = "mhlo.concatenate"(%41) {dimension = 0 : i64} : (tensor<1xi32>) -> tensor<1xi32>
    %cst_23 = "std.constant"() {name = "constant.708", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %43 = "mhlo.broadcast_in_dim"(%cst_23) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.709"} : (tensor<i32>) -> tensor<0xi32>
    %cst_24 = "std.constant"() {name = "constant.710", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %cst_25 = "std.constant"() {name = "constant.711", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %44 = "mhlo.subtract"(%cst_24, %cst_25) {name = "subtract.712"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
    %cst_26 = "std.constant"() {name = "constant.713", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %45 = "mhlo.maximum"(%44, %cst_26) {name = "maximum.714"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
    %cst_27 = "std.constant"() {name = "constant.715", value = dense<1000> : tensor<i32>} : () -> tensor<i32>
    %46 = "mhlo.compare"(%45, %cst_27) {comparison_direction = "LT", name = "compare.716"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
    %47 = "mhlo.reshape"(%45) {name = "reshape.717"} : (tensor<i32>) -> tensor<1xi32>
    %48 = "mhlo.concatenate"(%47) {dimension = 0 : i64} : (tensor<1xi32>) -> tensor<1xi32>
    %cst_28 = "std.constant"() {name = "constant.719", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %49 = "mhlo.broadcast_in_dim"(%cst_28) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.720"} : (tensor<i32>) -> tensor<0xi32>
    %cst_29 = "std.constant"() {name = "constant.734", value = dense<0> : tensor<ui64>} : () -> tensor<ui64>
    %cst_30 = "std.constant"() {name = "constant.749", value = dense<1053357856> : tensor<ui32>} : () -> tensor<ui32>
    %cst_31 = "std.constant"() {name = "constant.769", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %50 = "mhlo.add"(%cst_30, %cst_31) {name = "add.770"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_32 = "std.constant"() {name = "constant.791", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %51 = "mhlo.add"(%50, %cst_32) {name = "add.792"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_33 = "std.constant"() {name = "constant.813", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %52 = "mhlo.add"(%51, %cst_33) {name = "add.814"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_34 = "std.constant"() {name = "constant.835", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %53 = "mhlo.add"(%52, %cst_34) {name = "add.836"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_35 = "std.constant"() {name = "constant.857", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %54 = "mhlo.add"(%53, %cst_35) {name = "add.858"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_36 = "std.constant"() {name = "constant.879", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %55 = "mhlo.add"(%54, %cst_36) {name = "add.880"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_37 = "std.constant"() {name = "constant.901", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %56 = "mhlo.add"(%55, %cst_37) {name = "add.902"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_38 = "std.constant"() {name = "constant.923", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %57 = "mhlo.add"(%56, %cst_38) {name = "add.924"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_39 = "std.constant"() {name = "constant.945", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %58 = "mhlo.add"(%57, %cst_39) {name = "add.946"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_40 = "std.constant"() {name = "constant.967", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %59 = "mhlo.add"(%58, %cst_40) {name = "add.968"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_41 = "std.constant"() {name = "constant.750", value = dense<38149673> : tensor<ui32>} : () -> tensor<ui32>
    %cst_42 = "std.constant"() {name = "constant.771", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %60 = "mhlo.add"(%cst_41, %cst_42) {name = "add.772"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_43 = "std.constant"() {name = "constant.793", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %61 = "mhlo.add"(%60, %cst_43) {name = "add.794"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_44 = "std.constant"() {name = "constant.815", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %62 = "mhlo.add"(%61, %cst_44) {name = "add.816"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_45 = "std.constant"() {name = "constant.837", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %63 = "mhlo.add"(%62, %cst_45) {name = "add.838"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_46 = "std.constant"() {name = "constant.859", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %64 = "mhlo.add"(%63, %cst_46) {name = "add.860"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_47 = "std.constant"() {name = "constant.881", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %65 = "mhlo.add"(%64, %cst_47) {name = "add.882"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_48 = "std.constant"() {name = "constant.903", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %66 = "mhlo.add"(%65, %cst_48) {name = "add.904"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_49 = "std.constant"() {name = "constant.925", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %67 = "mhlo.add"(%66, %cst_49) {name = "add.926"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_50 = "std.constant"() {name = "constant.947", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %68 = "mhlo.add"(%67, %cst_50) {name = "add.948"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_51 = "std.constant"() {name = "constant.969", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %69 = "mhlo.add"(%68, %cst_51) {name = "add.970"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %70 = "mhlo.get_tuple_element"(%arg0) {index = 3 : i32, name = "get-tuple-element.620"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
    %71 = "mhlo.slice"(%70) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
    %72 = "mhlo.reshape"(%71) {name = "reshape.726"} : (tensor<1xi32>) -> tensor<i32>
    %73 = "mhlo.convert"(%72) {name = "convert.729"} : (tensor<i32>) -> tensor<ui64>
    %74 = "mhlo.slice"(%70) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
    %75 = "mhlo.reshape"(%74) {name = "reshape.728"} : (tensor<1xi32>) -> tensor<i32>
    %76 = "mhlo.convert"(%75) {name = "convert.730"} : (tensor<i32>) -> tensor<ui64>
    %cst_52 = "std.constant"() {name = "constant.731", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %77 = "mhlo.shift_left"(%76, %cst_52) {name = "shift-left.732"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %78 = "mhlo.or"(%73, %77) {name = "or.733"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %79 = "mhlo.convert"(%78) {name = "convert.736"} : (tensor<ui64>) -> tensor<ui32>
    %80 = "mhlo.convert"(%79) {name = "convert.739"} : (tensor<ui32>) -> tensor<ui64>
    %81 = "mhlo.convert"(%80) {name = "convert.741"} : (tensor<ui64>) -> tensor<ui32>
    %82 = "mhlo.convert"(%81) {name = "convert.751"} : (tensor<ui32>) -> tensor<ui64>
    %cst_53 = "std.constant"() {name = "constant.752", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %83 = "mhlo.multiply"(%82, %cst_53) {name = "multiply.753"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_54 = "std.constant"() {name = "constant.755", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %84 = "mhlo.shift_right_logical"(%83, %cst_54) {name = "shift-right-logical.756"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %85 = "mhlo.convert"(%84) {name = "convert.757"} : (tensor<ui64>) -> tensor<ui32>
    %cst_55 = "std.constant"() {name = "constant.735", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %86 = "mhlo.shift_right_logical"(%78, %cst_55) {name = "shift-right-logical.737"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %87 = "mhlo.convert"(%86) {name = "convert.738"} : (tensor<ui64>) -> tensor<ui32>
    %88 = "mhlo.convert"(%87) {name = "convert.740"} : (tensor<ui32>) -> tensor<ui64>
    %cst_56 = "std.constant"() {name = "constant.746", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %89 = "mhlo.shift_right_logical"(%88, %cst_56) {name = "shift-right-logical.747"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %90 = "mhlo.convert"(%89) {name = "convert.748"} : (tensor<ui64>) -> tensor<ui32>
    %91 = "mhlo.xor"(%85, %90) {name = "xor.767"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %92 = "mhlo.xor"(%91, %cst_41) {name = "xor.768"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %93 = "mhlo.convert"(%92) {name = "convert.780"} : (tensor<ui32>) -> tensor<ui64>
    %cst_57 = "std.constant"() {name = "constant.781", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %94 = "mhlo.multiply"(%93, %cst_57) {name = "multiply.782"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_58 = "std.constant"() {name = "constant.784", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %95 = "mhlo.shift_right_logical"(%94, %cst_58) {name = "shift-right-logical.785"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %96 = "mhlo.convert"(%95) {name = "convert.786"} : (tensor<ui64>) -> tensor<ui32>
    %97 = "mhlo.convert"(%88) {name = "convert.745"} : (tensor<ui64>) -> tensor<ui32>
    %98 = "mhlo.convert"(%97) {name = "convert.758"} : (tensor<ui32>) -> tensor<ui64>
    %cst_59 = "std.constant"() {name = "constant.759", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %99 = "mhlo.multiply"(%98, %cst_59) {name = "multiply.760"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %100 = "mhlo.convert"(%99) {name = "convert.761"} : (tensor<ui64>) -> tensor<ui32>
    %101 = "mhlo.xor"(%96, %100) {name = "xor.787"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %102 = "mhlo.xor"(%101, %50) {name = "xor.788"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %103 = "mhlo.convert"(%102) {name = "convert.795"} : (tensor<ui32>) -> tensor<ui64>
    %cst_60 = "std.constant"() {name = "constant.796", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %104 = "mhlo.multiply"(%103, %cst_60) {name = "multiply.797"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_61 = "std.constant"() {name = "constant.799", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %105 = "mhlo.shift_right_logical"(%104, %cst_61) {name = "shift-right-logical.800"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %106 = "mhlo.convert"(%105) {name = "convert.801"} : (tensor<ui64>) -> tensor<ui32>
    %cst_62 = "std.constant"() {name = "constant.762", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %107 = "mhlo.shift_right_logical"(%99, %cst_62) {name = "shift-right-logical.763"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %108 = "mhlo.convert"(%107) {name = "convert.764"} : (tensor<ui64>) -> tensor<ui32>
    %cst_63 = "std.constant"() {name = "constant.742", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %109 = "mhlo.shift_right_logical"(%80, %cst_63) {name = "shift-right-logical.743"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %110 = "mhlo.convert"(%109) {name = "convert.744"} : (tensor<ui64>) -> tensor<ui32>
    %111 = "mhlo.xor"(%108, %110) {name = "xor.765"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %112 = "mhlo.xor"(%111, %cst_30) {name = "xor.766"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %113 = "mhlo.convert"(%112) {name = "convert.773"} : (tensor<ui32>) -> tensor<ui64>
    %cst_64 = "std.constant"() {name = "constant.774", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %114 = "mhlo.multiply"(%113, %cst_64) {name = "multiply.775"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %115 = "mhlo.convert"(%114) {name = "convert.776"} : (tensor<ui64>) -> tensor<ui32>
    %116 = "mhlo.xor"(%106, %115) {name = "xor.811"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %117 = "mhlo.xor"(%116, %61) {name = "xor.812"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %118 = "mhlo.convert"(%117) {name = "convert.824"} : (tensor<ui32>) -> tensor<ui64>
    %cst_65 = "std.constant"() {name = "constant.825", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %119 = "mhlo.multiply"(%118, %cst_65) {name = "multiply.826"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_66 = "std.constant"() {name = "constant.828", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %120 = "mhlo.shift_right_logical"(%119, %cst_66) {name = "shift-right-logical.829"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %121 = "mhlo.convert"(%120) {name = "convert.830"} : (tensor<ui64>) -> tensor<ui32>
    %cst_67 = "std.constant"() {name = "constant.777", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %122 = "mhlo.shift_right_logical"(%114, %cst_67) {name = "shift-right-logical.778"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %123 = "mhlo.convert"(%122) {name = "convert.779"} : (tensor<ui64>) -> tensor<ui32>
    %124 = "mhlo.convert"(%83) {name = "convert.754"} : (tensor<ui64>) -> tensor<ui32>
    %125 = "mhlo.xor"(%123, %124) {name = "xor.789"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %126 = "mhlo.xor"(%125, %60) {name = "xor.790"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %127 = "mhlo.convert"(%126) {name = "convert.802"} : (tensor<ui32>) -> tensor<ui64>
    %cst_68 = "std.constant"() {name = "constant.803", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %128 = "mhlo.multiply"(%127, %cst_68) {name = "multiply.804"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %129 = "mhlo.convert"(%128) {name = "convert.805"} : (tensor<ui64>) -> tensor<ui32>
    %130 = "mhlo.xor"(%121, %129) {name = "xor.831"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %131 = "mhlo.xor"(%130, %52) {name = "xor.832"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %132 = "mhlo.convert"(%131) {name = "convert.839"} : (tensor<ui32>) -> tensor<ui64>
    %cst_69 = "std.constant"() {name = "constant.840", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %133 = "mhlo.multiply"(%132, %cst_69) {name = "multiply.841"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_70 = "std.constant"() {name = "constant.843", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %134 = "mhlo.shift_right_logical"(%133, %cst_70) {name = "shift-right-logical.844"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %135 = "mhlo.convert"(%134) {name = "convert.845"} : (tensor<ui64>) -> tensor<ui32>
    %cst_71 = "std.constant"() {name = "constant.806", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %136 = "mhlo.shift_right_logical"(%128, %cst_71) {name = "shift-right-logical.807"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %137 = "mhlo.convert"(%136) {name = "convert.808"} : (tensor<ui64>) -> tensor<ui32>
    %138 = "mhlo.convert"(%94) {name = "convert.783"} : (tensor<ui64>) -> tensor<ui32>
    %139 = "mhlo.xor"(%137, %138) {name = "xor.809"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %140 = "mhlo.xor"(%139, %51) {name = "xor.810"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %141 = "mhlo.convert"(%140) {name = "convert.817"} : (tensor<ui32>) -> tensor<ui64>
    %cst_72 = "std.constant"() {name = "constant.818", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %142 = "mhlo.multiply"(%141, %cst_72) {name = "multiply.819"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %143 = "mhlo.convert"(%142) {name = "convert.820"} : (tensor<ui64>) -> tensor<ui32>
    %144 = "mhlo.xor"(%135, %143) {name = "xor.855"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %145 = "mhlo.xor"(%144, %63) {name = "xor.856"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %146 = "mhlo.convert"(%145) {name = "convert.868"} : (tensor<ui32>) -> tensor<ui64>
    %cst_73 = "std.constant"() {name = "constant.869", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %147 = "mhlo.multiply"(%146, %cst_73) {name = "multiply.870"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_74 = "std.constant"() {name = "constant.872", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %148 = "mhlo.shift_right_logical"(%147, %cst_74) {name = "shift-right-logical.873"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %149 = "mhlo.convert"(%148) {name = "convert.874"} : (tensor<ui64>) -> tensor<ui32>
    %cst_75 = "std.constant"() {name = "constant.821", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %150 = "mhlo.shift_right_logical"(%142, %cst_75) {name = "shift-right-logical.822"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %151 = "mhlo.convert"(%150) {name = "convert.823"} : (tensor<ui64>) -> tensor<ui32>
    %152 = "mhlo.convert"(%104) {name = "convert.798"} : (tensor<ui64>) -> tensor<ui32>
    %153 = "mhlo.xor"(%151, %152) {name = "xor.833"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %154 = "mhlo.xor"(%153, %62) {name = "xor.834"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %155 = "mhlo.convert"(%154) {name = "convert.846"} : (tensor<ui32>) -> tensor<ui64>
    %cst_76 = "std.constant"() {name = "constant.847", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %156 = "mhlo.multiply"(%155, %cst_76) {name = "multiply.848"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %157 = "mhlo.convert"(%156) {name = "convert.849"} : (tensor<ui64>) -> tensor<ui32>
    %158 = "mhlo.xor"(%149, %157) {name = "xor.875"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %159 = "mhlo.xor"(%158, %54) {name = "xor.876"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %160 = "mhlo.convert"(%159) {name = "convert.883"} : (tensor<ui32>) -> tensor<ui64>
    %cst_77 = "std.constant"() {name = "constant.884", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %161 = "mhlo.multiply"(%160, %cst_77) {name = "multiply.885"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_78 = "std.constant"() {name = "constant.887", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %162 = "mhlo.shift_right_logical"(%161, %cst_78) {name = "shift-right-logical.888"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %163 = "mhlo.convert"(%162) {name = "convert.889"} : (tensor<ui64>) -> tensor<ui32>
    %cst_79 = "std.constant"() {name = "constant.850", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %164 = "mhlo.shift_right_logical"(%156, %cst_79) {name = "shift-right-logical.851"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %165 = "mhlo.convert"(%164) {name = "convert.852"} : (tensor<ui64>) -> tensor<ui32>
    %166 = "mhlo.convert"(%119) {name = "convert.827"} : (tensor<ui64>) -> tensor<ui32>
    %167 = "mhlo.xor"(%165, %166) {name = "xor.853"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %168 = "mhlo.xor"(%167, %53) {name = "xor.854"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %169 = "mhlo.convert"(%168) {name = "convert.861"} : (tensor<ui32>) -> tensor<ui64>
    %cst_80 = "std.constant"() {name = "constant.862", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %170 = "mhlo.multiply"(%169, %cst_80) {name = "multiply.863"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %171 = "mhlo.convert"(%170) {name = "convert.864"} : (tensor<ui64>) -> tensor<ui32>
    %172 = "mhlo.xor"(%163, %171) {name = "xor.899"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %173 = "mhlo.xor"(%172, %65) {name = "xor.900"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %174 = "mhlo.convert"(%173) {name = "convert.912"} : (tensor<ui32>) -> tensor<ui64>
    %cst_81 = "std.constant"() {name = "constant.913", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %175 = "mhlo.multiply"(%174, %cst_81) {name = "multiply.914"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_82 = "std.constant"() {name = "constant.916", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %176 = "mhlo.shift_right_logical"(%175, %cst_82) {name = "shift-right-logical.917"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %177 = "mhlo.convert"(%176) {name = "convert.918"} : (tensor<ui64>) -> tensor<ui32>
    %cst_83 = "std.constant"() {name = "constant.865", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %178 = "mhlo.shift_right_logical"(%170, %cst_83) {name = "shift-right-logical.866"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %179 = "mhlo.convert"(%178) {name = "convert.867"} : (tensor<ui64>) -> tensor<ui32>
    %180 = "mhlo.convert"(%133) {name = "convert.842"} : (tensor<ui64>) -> tensor<ui32>
    %181 = "mhlo.xor"(%179, %180) {name = "xor.877"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %182 = "mhlo.xor"(%181, %64) {name = "xor.878"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %183 = "mhlo.convert"(%182) {name = "convert.890"} : (tensor<ui32>) -> tensor<ui64>
    %cst_84 = "std.constant"() {name = "constant.891", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %184 = "mhlo.multiply"(%183, %cst_84) {name = "multiply.892"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %185 = "mhlo.convert"(%184) {name = "convert.893"} : (tensor<ui64>) -> tensor<ui32>
    %186 = "mhlo.xor"(%177, %185) {name = "xor.919"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %187 = "mhlo.xor"(%186, %56) {name = "xor.920"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %188 = "mhlo.convert"(%187) {name = "convert.927"} : (tensor<ui32>) -> tensor<ui64>
    %cst_85 = "std.constant"() {name = "constant.928", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %189 = "mhlo.multiply"(%188, %cst_85) {name = "multiply.929"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_86 = "std.constant"() {name = "constant.931", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %190 = "mhlo.shift_right_logical"(%189, %cst_86) {name = "shift-right-logical.932"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %191 = "mhlo.convert"(%190) {name = "convert.933"} : (tensor<ui64>) -> tensor<ui32>
    %cst_87 = "std.constant"() {name = "constant.894", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %192 = "mhlo.shift_right_logical"(%184, %cst_87) {name = "shift-right-logical.895"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %193 = "mhlo.convert"(%192) {name = "convert.896"} : (tensor<ui64>) -> tensor<ui32>
    %194 = "mhlo.convert"(%147) {name = "convert.871"} : (tensor<ui64>) -> tensor<ui32>
    %195 = "mhlo.xor"(%193, %194) {name = "xor.897"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %196 = "mhlo.xor"(%195, %55) {name = "xor.898"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %197 = "mhlo.convert"(%196) {name = "convert.905"} : (tensor<ui32>) -> tensor<ui64>
    %cst_88 = "std.constant"() {name = "constant.906", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %198 = "mhlo.multiply"(%197, %cst_88) {name = "multiply.907"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %199 = "mhlo.convert"(%198) {name = "convert.908"} : (tensor<ui64>) -> tensor<ui32>
    %200 = "mhlo.xor"(%191, %199) {name = "xor.943"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %201 = "mhlo.xor"(%200, %67) {name = "xor.944"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %202 = "mhlo.convert"(%201) {name = "convert.956"} : (tensor<ui32>) -> tensor<ui64>
    %cst_89 = "std.constant"() {name = "constant.957", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %203 = "mhlo.multiply"(%202, %cst_89) {name = "multiply.958"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_90 = "std.constant"() {name = "constant.960", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %204 = "mhlo.shift_right_logical"(%203, %cst_90) {name = "shift-right-logical.961"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %205 = "mhlo.convert"(%204) {name = "convert.962"} : (tensor<ui64>) -> tensor<ui32>
    %cst_91 = "std.constant"() {name = "constant.909", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %206 = "mhlo.shift_right_logical"(%198, %cst_91) {name = "shift-right-logical.910"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %207 = "mhlo.convert"(%206) {name = "convert.911"} : (tensor<ui64>) -> tensor<ui32>
    %208 = "mhlo.convert"(%161) {name = "convert.886"} : (tensor<ui64>) -> tensor<ui32>
    %209 = "mhlo.xor"(%207, %208) {name = "xor.921"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %210 = "mhlo.xor"(%209, %66) {name = "xor.922"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %211 = "mhlo.convert"(%210) {name = "convert.934"} : (tensor<ui32>) -> tensor<ui64>
    %cst_92 = "std.constant"() {name = "constant.935", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %212 = "mhlo.multiply"(%211, %cst_92) {name = "multiply.936"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %213 = "mhlo.convert"(%212) {name = "convert.937"} : (tensor<ui64>) -> tensor<ui32>
    %214 = "mhlo.xor"(%205, %213) {name = "xor.963"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %215 = "mhlo.xor"(%214, %58) {name = "xor.964"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %216 = "mhlo.convert"(%215) {name = "convert.985"} : (tensor<ui32>) -> tensor<ui64>
    %217 = "mhlo.convert"(%203) {name = "convert.959"} : (tensor<ui64>) -> tensor<ui32>
    %218 = "mhlo.convert"(%217) {name = "convert.986"} : (tensor<ui32>) -> tensor<ui64>
    %cst_93 = "std.constant"() {name = "constant.987", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %219 = "mhlo.shift_left"(%218, %cst_93) {name = "shift-left.988"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %220 = "mhlo.or"(%216, %219) {name = "or.989"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %221 = "mhlo.reshape"(%220) {name = "reshape.990"} : (tensor<ui64>) -> tensor<1xui64>
    %cst_94 = "std.constant"() {name = "constant.971", value = dense<0> : tensor<ui32>} : () -> tensor<ui32>
    %222 = "mhlo.convert"(%cst_94) {name = "convert.972"} : (tensor<ui32>) -> tensor<ui64>
    %223 = "mhlo.convert"(%cst_94) {name = "convert.973"} : (tensor<ui32>) -> tensor<ui64>
    %cst_95 = "std.constant"() {name = "constant.974", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %224 = "mhlo.shift_left"(%223, %cst_95) {name = "shift-left.975"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %225 = "mhlo.or"(%222, %224) {name = "or.976"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %226 = "mhlo.reshape"(%225) {name = "reshape.982"} : (tensor<ui64>) -> tensor<1xui64>
    %cst_96 = "std.constant"() {name = "constant.938", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %227 = "mhlo.shift_right_logical"(%212, %cst_96) {name = "shift-right-logical.939"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %228 = "mhlo.convert"(%227) {name = "convert.940"} : (tensor<ui64>) -> tensor<ui32>
    %229 = "mhlo.convert"(%175) {name = "convert.915"} : (tensor<ui64>) -> tensor<ui32>
    %230 = "mhlo.xor"(%228, %229) {name = "xor.941"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %231 = "mhlo.xor"(%230, %57) {name = "xor.942"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %232 = "mhlo.convert"(%231) {name = "convert.949"} : (tensor<ui32>) -> tensor<ui64>
    %cst_97 = "std.constant"() {name = "constant.950", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %233 = "mhlo.multiply"(%232, %cst_97) {name = "multiply.951"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_98 = "std.constant"() {name = "constant.953", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %234 = "mhlo.shift_right_logical"(%233, %cst_98) {name = "shift-right-logical.954"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %235 = "mhlo.convert"(%234) {name = "convert.955"} : (tensor<ui64>) -> tensor<ui32>
    %236 = "mhlo.convert"(%189) {name = "convert.930"} : (tensor<ui64>) -> tensor<ui32>
    %237 = "mhlo.xor"(%235, %236) {name = "xor.965"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %238 = "mhlo.xor"(%237, %68) {name = "xor.966"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %239 = "mhlo.convert"(%238) {name = "convert.977"} : (tensor<ui32>) -> tensor<ui64>
    %240 = "mhlo.convert"(%233) {name = "convert.952"} : (tensor<ui64>) -> tensor<ui32>
    %241 = "mhlo.convert"(%240) {name = "convert.978"} : (tensor<ui32>) -> tensor<ui64>
    %cst_99 = "std.constant"() {name = "constant.979", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %242 = "mhlo.shift_left"(%241, %cst_99) {name = "shift-left.980"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %243 = "mhlo.or"(%239, %242) {name = "or.981"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %244 = "mhlo.reshape"(%243) {name = "reshape.983"} : (tensor<ui64>) -> tensor<1xui64>
    %245 = "mhlo.concatenate"(%226, %244) {dimension = 0 : i64} : (tensor<1xui64>, tensor<1xui64>) -> tensor<2xui64>
    %246 = "mhlo.concatenate"(%221, %245) {dimension = 0 : i64} : (tensor<1xui64>, tensor<2xui64>) -> tensor<3xui64>
    %247 = "mhlo.rng_bit_generator"(%246) {rng_algorithm = 2 : i32} : (tensor<3xui64>) -> tuple<tensor<3xui64>, tensor<2x2xui32>>
    %248 = "mhlo.get_tuple_element"(%247) {index = 0 : i32, name = "get-tuple-element.994"} : (tuple<tensor<3xui64>, tensor<2x2xui32>>) -> tensor<3xui64>
    %cst_100 = "std.constant"() {name = "constant.1009", value = dense<0> : tensor<ui64>} : () -> tensor<ui64>
    %cst_101 = "std.constant"() {name = "constant.1024", value = dense<1053357856> : tensor<ui32>} : () -> tensor<ui32>
    %cst_102 = "std.constant"() {name = "constant.1044", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %249 = "mhlo.add"(%cst_101, %cst_102) {name = "add.1045"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_103 = "std.constant"() {name = "constant.1066", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %250 = "mhlo.add"(%249, %cst_103) {name = "add.1067"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_104 = "std.constant"() {name = "constant.1088", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %251 = "mhlo.add"(%250, %cst_104) {name = "add.1089"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_105 = "std.constant"() {name = "constant.1110", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %252 = "mhlo.add"(%251, %cst_105) {name = "add.1111"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_106 = "std.constant"() {name = "constant.1132", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %253 = "mhlo.add"(%252, %cst_106) {name = "add.1133"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_107 = "std.constant"() {name = "constant.1154", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %254 = "mhlo.add"(%253, %cst_107) {name = "add.1155"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_108 = "std.constant"() {name = "constant.1176", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %255 = "mhlo.add"(%254, %cst_108) {name = "add.1177"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_109 = "std.constant"() {name = "constant.1198", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %256 = "mhlo.add"(%255, %cst_109) {name = "add.1199"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_110 = "std.constant"() {name = "constant.1220", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %257 = "mhlo.add"(%256, %cst_110) {name = "add.1221"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_111 = "std.constant"() {name = "constant.1242", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %258 = "mhlo.add"(%257, %cst_111) {name = "add.1243"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_112 = "std.constant"() {name = "constant.1025", value = dense<38149673> : tensor<ui32>} : () -> tensor<ui32>
    %cst_113 = "std.constant"() {name = "constant.1046", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %259 = "mhlo.add"(%cst_112, %cst_113) {name = "add.1047"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_114 = "std.constant"() {name = "constant.1068", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %260 = "mhlo.add"(%259, %cst_114) {name = "add.1069"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_115 = "std.constant"() {name = "constant.1090", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %261 = "mhlo.add"(%260, %cst_115) {name = "add.1091"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_116 = "std.constant"() {name = "constant.1112", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %262 = "mhlo.add"(%261, %cst_116) {name = "add.1113"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_117 = "std.constant"() {name = "constant.1134", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %263 = "mhlo.add"(%262, %cst_117) {name = "add.1135"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_118 = "std.constant"() {name = "constant.1156", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %264 = "mhlo.add"(%263, %cst_118) {name = "add.1157"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_119 = "std.constant"() {name = "constant.1178", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %265 = "mhlo.add"(%264, %cst_119) {name = "add.1179"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_120 = "std.constant"() {name = "constant.1200", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %266 = "mhlo.add"(%265, %cst_120) {name = "add.1201"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_121 = "std.constant"() {name = "constant.1222", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %267 = "mhlo.add"(%266, %cst_121) {name = "add.1223"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_122 = "std.constant"() {name = "constant.1244", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %268 = "mhlo.add"(%267, %cst_122) {name = "add.1245"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %269 = "mhlo.get_tuple_element"(%247) {index = 1 : i32, name = "get-tuple-element.993"} : (tuple<tensor<3xui64>, tensor<2x2xui32>>) -> tensor<2x2xui32>
    %270 = "mhlo.bitcast_convert"(%269) {name = "bitcast-convert.995"} : (tensor<2x2xui32>) -> tensor<2x2xi32>
    %271 = "mhlo.slice"(%270) {limit_indices = dense<[1, 2]> : tensor<2xi64>, start_indices = dense<0> : tensor<2xi64>, strides = dense<1> : tensor<2xi64>} : (tensor<2x2xi32>) -> tensor<1x2xi32>
    %272 = "mhlo.reshape"(%271) {name = "reshape.997"} : (tensor<1x2xi32>) -> tensor<2xi32>
    %273 = "mhlo.slice"(%272) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
    %274 = "mhlo.reshape"(%273) {name = "reshape.1001"} : (tensor<1xi32>) -> tensor<i32>
    %275 = "mhlo.convert"(%274) {name = "convert.1004"} : (tensor<i32>) -> tensor<ui64>
    %276 = "mhlo.slice"(%272) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
    %277 = "mhlo.reshape"(%276) {name = "reshape.1003"} : (tensor<1xi32>) -> tensor<i32>
    %278 = "mhlo.convert"(%277) {name = "convert.1005"} : (tensor<i32>) -> tensor<ui64>
    %cst_123 = "std.constant"() {name = "constant.1006", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %279 = "mhlo.shift_left"(%278, %cst_123) {name = "shift-left.1007"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %280 = "mhlo.or"(%275, %279) {name = "or.1008"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %281 = "mhlo.convert"(%280) {name = "convert.1011"} : (tensor<ui64>) -> tensor<ui32>
    %282 = "mhlo.convert"(%281) {name = "convert.1014"} : (tensor<ui32>) -> tensor<ui64>
    %283 = "mhlo.convert"(%282) {name = "convert.1016"} : (tensor<ui64>) -> tensor<ui32>
    %284 = "mhlo.convert"(%283) {name = "convert.1026"} : (tensor<ui32>) -> tensor<ui64>
    %cst_124 = "std.constant"() {name = "constant.1027", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %285 = "mhlo.multiply"(%284, %cst_124) {name = "multiply.1028"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_125 = "std.constant"() {name = "constant.1030", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %286 = "mhlo.shift_right_logical"(%285, %cst_125) {name = "shift-right-logical.1031"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %287 = "mhlo.convert"(%286) {name = "convert.1032"} : (tensor<ui64>) -> tensor<ui32>
    %cst_126 = "std.constant"() {name = "constant.1010", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %288 = "mhlo.shift_right_logical"(%280, %cst_126) {name = "shift-right-logical.1012"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %289 = "mhlo.convert"(%288) {name = "convert.1013"} : (tensor<ui64>) -> tensor<ui32>
    %290 = "mhlo.convert"(%289) {name = "convert.1015"} : (tensor<ui32>) -> tensor<ui64>
    %cst_127 = "std.constant"() {name = "constant.1021", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %291 = "mhlo.shift_right_logical"(%290, %cst_127) {name = "shift-right-logical.1022"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %292 = "mhlo.convert"(%291) {name = "convert.1023"} : (tensor<ui64>) -> tensor<ui32>
    %293 = "mhlo.xor"(%287, %292) {name = "xor.1042"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %294 = "mhlo.xor"(%293, %cst_112) {name = "xor.1043"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %295 = "mhlo.convert"(%294) {name = "convert.1055"} : (tensor<ui32>) -> tensor<ui64>
    %cst_128 = "std.constant"() {name = "constant.1056", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %296 = "mhlo.multiply"(%295, %cst_128) {name = "multiply.1057"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_129 = "std.constant"() {name = "constant.1059", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %297 = "mhlo.shift_right_logical"(%296, %cst_129) {name = "shift-right-logical.1060"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %298 = "mhlo.convert"(%297) {name = "convert.1061"} : (tensor<ui64>) -> tensor<ui32>
    %299 = "mhlo.convert"(%290) {name = "convert.1020"} : (tensor<ui64>) -> tensor<ui32>
    %300 = "mhlo.convert"(%299) {name = "convert.1033"} : (tensor<ui32>) -> tensor<ui64>
    %cst_130 = "std.constant"() {name = "constant.1034", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %301 = "mhlo.multiply"(%300, %cst_130) {name = "multiply.1035"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %302 = "mhlo.convert"(%301) {name = "convert.1036"} : (tensor<ui64>) -> tensor<ui32>
    %303 = "mhlo.xor"(%298, %302) {name = "xor.1062"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %304 = "mhlo.xor"(%303, %249) {name = "xor.1063"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %305 = "mhlo.convert"(%304) {name = "convert.1070"} : (tensor<ui32>) -> tensor<ui64>
    %cst_131 = "std.constant"() {name = "constant.1071", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %306 = "mhlo.multiply"(%305, %cst_131) {name = "multiply.1072"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_132 = "std.constant"() {name = "constant.1074", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %307 = "mhlo.shift_right_logical"(%306, %cst_132) {name = "shift-right-logical.1075"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %308 = "mhlo.convert"(%307) {name = "convert.1076"} : (tensor<ui64>) -> tensor<ui32>
    %cst_133 = "std.constant"() {name = "constant.1037", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %309 = "mhlo.shift_right_logical"(%301, %cst_133) {name = "shift-right-logical.1038"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %310 = "mhlo.convert"(%309) {name = "convert.1039"} : (tensor<ui64>) -> tensor<ui32>
    %cst_134 = "std.constant"() {name = "constant.1017", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %311 = "mhlo.shift_right_logical"(%282, %cst_134) {name = "shift-right-logical.1018"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %312 = "mhlo.convert"(%311) {name = "convert.1019"} : (tensor<ui64>) -> tensor<ui32>
    %313 = "mhlo.xor"(%310, %312) {name = "xor.1040"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %314 = "mhlo.xor"(%313, %cst_101) {name = "xor.1041"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %315 = "mhlo.convert"(%314) {name = "convert.1048"} : (tensor<ui32>) -> tensor<ui64>
    %cst_135 = "std.constant"() {name = "constant.1049", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %316 = "mhlo.multiply"(%315, %cst_135) {name = "multiply.1050"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %317 = "mhlo.convert"(%316) {name = "convert.1051"} : (tensor<ui64>) -> tensor<ui32>
    %318 = "mhlo.xor"(%308, %317) {name = "xor.1086"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %319 = "mhlo.xor"(%318, %260) {name = "xor.1087"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %320 = "mhlo.convert"(%319) {name = "convert.1099"} : (tensor<ui32>) -> tensor<ui64>
    %cst_136 = "std.constant"() {name = "constant.1100", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %321 = "mhlo.multiply"(%320, %cst_136) {name = "multiply.1101"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_137 = "std.constant"() {name = "constant.1103", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %322 = "mhlo.shift_right_logical"(%321, %cst_137) {name = "shift-right-logical.1104"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %323 = "mhlo.convert"(%322) {name = "convert.1105"} : (tensor<ui64>) -> tensor<ui32>
    %cst_138 = "std.constant"() {name = "constant.1052", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %324 = "mhlo.shift_right_logical"(%316, %cst_138) {name = "shift-right-logical.1053"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %325 = "mhlo.convert"(%324) {name = "convert.1054"} : (tensor<ui64>) -> tensor<ui32>
    %326 = "mhlo.convert"(%285) {name = "convert.1029"} : (tensor<ui64>) -> tensor<ui32>
    %327 = "mhlo.xor"(%325, %326) {name = "xor.1064"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %328 = "mhlo.xor"(%327, %259) {name = "xor.1065"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %329 = "mhlo.convert"(%328) {name = "convert.1077"} : (tensor<ui32>) -> tensor<ui64>
    %cst_139 = "std.constant"() {name = "constant.1078", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %330 = "mhlo.multiply"(%329, %cst_139) {name = "multiply.1079"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %331 = "mhlo.convert"(%330) {name = "convert.1080"} : (tensor<ui64>) -> tensor<ui32>
    %332 = "mhlo.xor"(%323, %331) {name = "xor.1106"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %333 = "mhlo.xor"(%332, %251) {name = "xor.1107"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %334 = "mhlo.convert"(%333) {name = "convert.1114"} : (tensor<ui32>) -> tensor<ui64>
    %cst_140 = "std.constant"() {name = "constant.1115", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %335 = "mhlo.multiply"(%334, %cst_140) {name = "multiply.1116"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_141 = "std.constant"() {name = "constant.1118", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %336 = "mhlo.shift_right_logical"(%335, %cst_141) {name = "shift-right-logical.1119"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %337 = "mhlo.convert"(%336) {name = "convert.1120"} : (tensor<ui64>) -> tensor<ui32>
    %cst_142 = "std.constant"() {name = "constant.1081", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %338 = "mhlo.shift_right_logical"(%330, %cst_142) {name = "shift-right-logical.1082"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %339 = "mhlo.convert"(%338) {name = "convert.1083"} : (tensor<ui64>) -> tensor<ui32>
    %340 = "mhlo.convert"(%296) {name = "convert.1058"} : (tensor<ui64>) -> tensor<ui32>
    %341 = "mhlo.xor"(%339, %340) {name = "xor.1084"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %342 = "mhlo.xor"(%341, %250) {name = "xor.1085"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %343 = "mhlo.convert"(%342) {name = "convert.1092"} : (tensor<ui32>) -> tensor<ui64>
    %cst_143 = "std.constant"() {name = "constant.1093", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %344 = "mhlo.multiply"(%343, %cst_143) {name = "multiply.1094"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %345 = "mhlo.convert"(%344) {name = "convert.1095"} : (tensor<ui64>) -> tensor<ui32>
    %346 = "mhlo.xor"(%337, %345) {name = "xor.1130"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %347 = "mhlo.xor"(%346, %262) {name = "xor.1131"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %348 = "mhlo.convert"(%347) {name = "convert.1143"} : (tensor<ui32>) -> tensor<ui64>
    %cst_144 = "std.constant"() {name = "constant.1144", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %349 = "mhlo.multiply"(%348, %cst_144) {name = "multiply.1145"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_145 = "std.constant"() {name = "constant.1147", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %350 = "mhlo.shift_right_logical"(%349, %cst_145) {name = "shift-right-logical.1148"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %351 = "mhlo.convert"(%350) {name = "convert.1149"} : (tensor<ui64>) -> tensor<ui32>
    %cst_146 = "std.constant"() {name = "constant.1096", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %352 = "mhlo.shift_right_logical"(%344, %cst_146) {name = "shift-right-logical.1097"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %353 = "mhlo.convert"(%352) {name = "convert.1098"} : (tensor<ui64>) -> tensor<ui32>
    %354 = "mhlo.convert"(%306) {name = "convert.1073"} : (tensor<ui64>) -> tensor<ui32>
    %355 = "mhlo.xor"(%353, %354) {name = "xor.1108"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %356 = "mhlo.xor"(%355, %261) {name = "xor.1109"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %357 = "mhlo.convert"(%356) {name = "convert.1121"} : (tensor<ui32>) -> tensor<ui64>
    %cst_147 = "std.constant"() {name = "constant.1122", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %358 = "mhlo.multiply"(%357, %cst_147) {name = "multiply.1123"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %359 = "mhlo.convert"(%358) {name = "convert.1124"} : (tensor<ui64>) -> tensor<ui32>
    %360 = "mhlo.xor"(%351, %359) {name = "xor.1150"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %361 = "mhlo.xor"(%360, %253) {name = "xor.1151"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %362 = "mhlo.convert"(%361) {name = "convert.1158"} : (tensor<ui32>) -> tensor<ui64>
    %cst_148 = "std.constant"() {name = "constant.1159", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %363 = "mhlo.multiply"(%362, %cst_148) {name = "multiply.1160"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_149 = "std.constant"() {name = "constant.1162", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %364 = "mhlo.shift_right_logical"(%363, %cst_149) {name = "shift-right-logical.1163"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %365 = "mhlo.convert"(%364) {name = "convert.1164"} : (tensor<ui64>) -> tensor<ui32>
    %cst_150 = "std.constant"() {name = "constant.1125", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %366 = "mhlo.shift_right_logical"(%358, %cst_150) {name = "shift-right-logical.1126"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %367 = "mhlo.convert"(%366) {name = "convert.1127"} : (tensor<ui64>) -> tensor<ui32>
    %368 = "mhlo.convert"(%321) {name = "convert.1102"} : (tensor<ui64>) -> tensor<ui32>
    %369 = "mhlo.xor"(%367, %368) {name = "xor.1128"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %370 = "mhlo.xor"(%369, %252) {name = "xor.1129"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %371 = "mhlo.convert"(%370) {name = "convert.1136"} : (tensor<ui32>) -> tensor<ui64>
    %cst_151 = "std.constant"() {name = "constant.1137", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %372 = "mhlo.multiply"(%371, %cst_151) {name = "multiply.1138"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %373 = "mhlo.convert"(%372) {name = "convert.1139"} : (tensor<ui64>) -> tensor<ui32>
    %374 = "mhlo.xor"(%365, %373) {name = "xor.1174"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %375 = "mhlo.xor"(%374, %264) {name = "xor.1175"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %376 = "mhlo.convert"(%375) {name = "convert.1187"} : (tensor<ui32>) -> tensor<ui64>
    %cst_152 = "std.constant"() {name = "constant.1188", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %377 = "mhlo.multiply"(%376, %cst_152) {name = "multiply.1189"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_153 = "std.constant"() {name = "constant.1191", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %378 = "mhlo.shift_right_logical"(%377, %cst_153) {name = "shift-right-logical.1192"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %379 = "mhlo.convert"(%378) {name = "convert.1193"} : (tensor<ui64>) -> tensor<ui32>
    %cst_154 = "std.constant"() {name = "constant.1140", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %380 = "mhlo.shift_right_logical"(%372, %cst_154) {name = "shift-right-logical.1141"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %381 = "mhlo.convert"(%380) {name = "convert.1142"} : (tensor<ui64>) -> tensor<ui32>
    %382 = "mhlo.convert"(%335) {name = "convert.1117"} : (tensor<ui64>) -> tensor<ui32>
    %383 = "mhlo.xor"(%381, %382) {name = "xor.1152"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %384 = "mhlo.xor"(%383, %263) {name = "xor.1153"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %385 = "mhlo.convert"(%384) {name = "convert.1165"} : (tensor<ui32>) -> tensor<ui64>
    %cst_155 = "std.constant"() {name = "constant.1166", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %386 = "mhlo.multiply"(%385, %cst_155) {name = "multiply.1167"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %387 = "mhlo.convert"(%386) {name = "convert.1168"} : (tensor<ui64>) -> tensor<ui32>
    %388 = "mhlo.xor"(%379, %387) {name = "xor.1194"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %389 = "mhlo.xor"(%388, %255) {name = "xor.1195"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %390 = "mhlo.convert"(%389) {name = "convert.1202"} : (tensor<ui32>) -> tensor<ui64>
    %cst_156 = "std.constant"() {name = "constant.1203", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %391 = "mhlo.multiply"(%390, %cst_156) {name = "multiply.1204"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_157 = "std.constant"() {name = "constant.1206", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %392 = "mhlo.shift_right_logical"(%391, %cst_157) {name = "shift-right-logical.1207"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %393 = "mhlo.convert"(%392) {name = "convert.1208"} : (tensor<ui64>) -> tensor<ui32>
    %cst_158 = "std.constant"() {name = "constant.1169", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %394 = "mhlo.shift_right_logical"(%386, %cst_158) {name = "shift-right-logical.1170"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %395 = "mhlo.convert"(%394) {name = "convert.1171"} : (tensor<ui64>) -> tensor<ui32>
    %396 = "mhlo.convert"(%349) {name = "convert.1146"} : (tensor<ui64>) -> tensor<ui32>
    %397 = "mhlo.xor"(%395, %396) {name = "xor.1172"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %398 = "mhlo.xor"(%397, %254) {name = "xor.1173"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %399 = "mhlo.convert"(%398) {name = "convert.1180"} : (tensor<ui32>) -> tensor<ui64>
    %cst_159 = "std.constant"() {name = "constant.1181", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %400 = "mhlo.multiply"(%399, %cst_159) {name = "multiply.1182"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %401 = "mhlo.convert"(%400) {name = "convert.1183"} : (tensor<ui64>) -> tensor<ui32>
    %402 = "mhlo.xor"(%393, %401) {name = "xor.1218"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %403 = "mhlo.xor"(%402, %266) {name = "xor.1219"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %404 = "mhlo.convert"(%403) {name = "convert.1231"} : (tensor<ui32>) -> tensor<ui64>
    %cst_160 = "std.constant"() {name = "constant.1232", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %405 = "mhlo.multiply"(%404, %cst_160) {name = "multiply.1233"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_161 = "std.constant"() {name = "constant.1235", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %406 = "mhlo.shift_right_logical"(%405, %cst_161) {name = "shift-right-logical.1236"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %407 = "mhlo.convert"(%406) {name = "convert.1237"} : (tensor<ui64>) -> tensor<ui32>
    %cst_162 = "std.constant"() {name = "constant.1184", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %408 = "mhlo.shift_right_logical"(%400, %cst_162) {name = "shift-right-logical.1185"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %409 = "mhlo.convert"(%408) {name = "convert.1186"} : (tensor<ui64>) -> tensor<ui32>
    %410 = "mhlo.convert"(%363) {name = "convert.1161"} : (tensor<ui64>) -> tensor<ui32>
    %411 = "mhlo.xor"(%409, %410) {name = "xor.1196"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %412 = "mhlo.xor"(%411, %265) {name = "xor.1197"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %413 = "mhlo.convert"(%412) {name = "convert.1209"} : (tensor<ui32>) -> tensor<ui64>
    %cst_163 = "std.constant"() {name = "constant.1210", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %414 = "mhlo.multiply"(%413, %cst_163) {name = "multiply.1211"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %415 = "mhlo.convert"(%414) {name = "convert.1212"} : (tensor<ui64>) -> tensor<ui32>
    %416 = "mhlo.xor"(%407, %415) {name = "xor.1238"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %417 = "mhlo.xor"(%416, %257) {name = "xor.1239"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %418 = "mhlo.convert"(%417) {name = "convert.1260"} : (tensor<ui32>) -> tensor<ui64>
    %419 = "mhlo.convert"(%405) {name = "convert.1234"} : (tensor<ui64>) -> tensor<ui32>
    %420 = "mhlo.convert"(%419) {name = "convert.1261"} : (tensor<ui32>) -> tensor<ui64>
    %cst_164 = "std.constant"() {name = "constant.1262", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %421 = "mhlo.shift_left"(%420, %cst_164) {name = "shift-left.1263"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %422 = "mhlo.or"(%418, %421) {name = "or.1264"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %423 = "mhlo.reshape"(%422) {name = "reshape.1265"} : (tensor<ui64>) -> tensor<1xui64>
    %cst_165 = "std.constant"() {name = "constant.1246", value = dense<0> : tensor<ui32>} : () -> tensor<ui32>
    %424 = "mhlo.convert"(%cst_165) {name = "convert.1247"} : (tensor<ui32>) -> tensor<ui64>
    %425 = "mhlo.convert"(%cst_165) {name = "convert.1248"} : (tensor<ui32>) -> tensor<ui64>
    %cst_166 = "std.constant"() {name = "constant.1249", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %426 = "mhlo.shift_left"(%425, %cst_166) {name = "shift-left.1250"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %427 = "mhlo.or"(%424, %426) {name = "or.1251"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %428 = "mhlo.reshape"(%427) {name = "reshape.1257"} : (tensor<ui64>) -> tensor<1xui64>
    %cst_167 = "std.constant"() {name = "constant.1213", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %429 = "mhlo.shift_right_logical"(%414, %cst_167) {name = "shift-right-logical.1214"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %430 = "mhlo.convert"(%429) {name = "convert.1215"} : (tensor<ui64>) -> tensor<ui32>
    %431 = "mhlo.convert"(%377) {name = "convert.1190"} : (tensor<ui64>) -> tensor<ui32>
    %432 = "mhlo.xor"(%430, %431) {name = "xor.1216"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %433 = "mhlo.xor"(%432, %256) {name = "xor.1217"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %434 = "mhlo.convert"(%433) {name = "convert.1224"} : (tensor<ui32>) -> tensor<ui64>
    %cst_168 = "std.constant"() {name = "constant.1225", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %435 = "mhlo.multiply"(%434, %cst_168) {name = "multiply.1226"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_169 = "std.constant"() {name = "constant.1228", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %436 = "mhlo.shift_right_logical"(%435, %cst_169) {name = "shift-right-logical.1229"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %437 = "mhlo.convert"(%436) {name = "convert.1230"} : (tensor<ui64>) -> tensor<ui32>
    %438 = "mhlo.convert"(%391) {name = "convert.1205"} : (tensor<ui64>) -> tensor<ui32>
    %439 = "mhlo.xor"(%437, %438) {name = "xor.1240"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %440 = "mhlo.xor"(%439, %267) {name = "xor.1241"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %441 = "mhlo.convert"(%440) {name = "convert.1252"} : (tensor<ui32>) -> tensor<ui64>
    %442 = "mhlo.convert"(%435) {name = "convert.1227"} : (tensor<ui64>) -> tensor<ui32>
    %443 = "mhlo.convert"(%442) {name = "convert.1253"} : (tensor<ui32>) -> tensor<ui64>
    %cst_170 = "std.constant"() {name = "constant.1254", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %444 = "mhlo.shift_left"(%443, %cst_170) {name = "shift-left.1255"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %445 = "mhlo.or"(%441, %444) {name = "or.1256"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %446 = "mhlo.reshape"(%445) {name = "reshape.1258"} : (tensor<ui64>) -> tensor<1xui64>
    %447 = "mhlo.concatenate"(%428, %446) {dimension = 0 : i64} : (tensor<1xui64>, tensor<1xui64>) -> tensor<2xui64>
    %448 = "mhlo.concatenate"(%423, %447) {dimension = 0 : i64} : (tensor<1xui64>, tensor<2xui64>) -> tensor<3xui64>
    %449 = "mhlo.rng_bit_generator"(%448) {rng_algorithm = 2 : i32} : (tensor<3xui64>) -> tuple<tensor<3xui64>, tensor<2x2xui32>>
    %450 = "mhlo.get_tuple_element"(%449) {index = 0 : i32, name = "get-tuple-element.1269"} : (tuple<tensor<3xui64>, tensor<2x2xui32>>) -> tensor<3xui64>
    %cst_171 = "std.constant"() {name = "constant.1284", value = dense<0> : tensor<ui64>} : () -> tensor<ui64>
    %cst_172 = "std.constant"() {name = "constant.1299", value = dense<1053357856> : tensor<ui32>} : () -> tensor<ui32>
    %cst_173 = "std.constant"() {name = "constant.1319", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %451 = "mhlo.add"(%cst_172, %cst_173) {name = "add.1320"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_174 = "std.constant"() {name = "constant.1341", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %452 = "mhlo.add"(%451, %cst_174) {name = "add.1342"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_175 = "std.constant"() {name = "constant.1363", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %453 = "mhlo.add"(%452, %cst_175) {name = "add.1364"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_176 = "std.constant"() {name = "constant.1385", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %454 = "mhlo.add"(%453, %cst_176) {name = "add.1386"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_177 = "std.constant"() {name = "constant.1407", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %455 = "mhlo.add"(%454, %cst_177) {name = "add.1408"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_178 = "std.constant"() {name = "constant.1429", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %456 = "mhlo.add"(%455, %cst_178) {name = "add.1430"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_179 = "std.constant"() {name = "constant.1451", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %457 = "mhlo.add"(%456, %cst_179) {name = "add.1452"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_180 = "std.constant"() {name = "constant.1473", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %458 = "mhlo.add"(%457, %cst_180) {name = "add.1474"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_181 = "std.constant"() {name = "constant.1495", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %459 = "mhlo.add"(%458, %cst_181) {name = "add.1496"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_182 = "std.constant"() {name = "constant.1517", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %460 = "mhlo.add"(%459, %cst_182) {name = "add.1518"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_183 = "std.constant"() {name = "constant.1300", value = dense<38149673> : tensor<ui32>} : () -> tensor<ui32>
    %cst_184 = "std.constant"() {name = "constant.1321", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %461 = "mhlo.add"(%cst_183, %cst_184) {name = "add.1322"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_185 = "std.constant"() {name = "constant.1343", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %462 = "mhlo.add"(%461, %cst_185) {name = "add.1344"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_186 = "std.constant"() {name = "constant.1365", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %463 = "mhlo.add"(%462, %cst_186) {name = "add.1366"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_187 = "std.constant"() {name = "constant.1387", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %464 = "mhlo.add"(%463, %cst_187) {name = "add.1388"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_188 = "std.constant"() {name = "constant.1409", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %465 = "mhlo.add"(%464, %cst_188) {name = "add.1410"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_189 = "std.constant"() {name = "constant.1431", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %466 = "mhlo.add"(%465, %cst_189) {name = "add.1432"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_190 = "std.constant"() {name = "constant.1453", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %467 = "mhlo.add"(%466, %cst_190) {name = "add.1454"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_191 = "std.constant"() {name = "constant.1475", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %468 = "mhlo.add"(%467, %cst_191) {name = "add.1476"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_192 = "std.constant"() {name = "constant.1497", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %469 = "mhlo.add"(%468, %cst_192) {name = "add.1498"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_193 = "std.constant"() {name = "constant.1519", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %470 = "mhlo.add"(%469, %cst_193) {name = "add.1520"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %471 = "mhlo.get_tuple_element"(%449) {index = 1 : i32, name = "get-tuple-element.1268"} : (tuple<tensor<3xui64>, tensor<2x2xui32>>) -> tensor<2x2xui32>
    %472 = "mhlo.bitcast_convert"(%471) {name = "bitcast-convert.1270"} : (tensor<2x2xui32>) -> tensor<2x2xi32>
    %473 = "mhlo.slice"(%472) {limit_indices = dense<[1, 2]> : tensor<2xi64>, start_indices = dense<0> : tensor<2xi64>, strides = dense<1> : tensor<2xi64>} : (tensor<2x2xi32>) -> tensor<1x2xi32>
    %474 = "mhlo.reshape"(%473) {name = "reshape.1272"} : (tensor<1x2xi32>) -> tensor<2xi32>
    %475 = "mhlo.slice"(%474) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
    %476 = "mhlo.reshape"(%475) {name = "reshape.1276"} : (tensor<1xi32>) -> tensor<i32>
    %477 = "mhlo.convert"(%476) {name = "convert.1279"} : (tensor<i32>) -> tensor<ui64>
    %478 = "mhlo.slice"(%474) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
    %479 = "mhlo.reshape"(%478) {name = "reshape.1278"} : (tensor<1xi32>) -> tensor<i32>
    %480 = "mhlo.convert"(%479) {name = "convert.1280"} : (tensor<i32>) -> tensor<ui64>
    %cst_194 = "std.constant"() {name = "constant.1281", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %481 = "mhlo.shift_left"(%480, %cst_194) {name = "shift-left.1282"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %482 = "mhlo.or"(%477, %481) {name = "or.1283"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %483 = "mhlo.convert"(%482) {name = "convert.1286"} : (tensor<ui64>) -> tensor<ui32>
    %484 = "mhlo.convert"(%483) {name = "convert.1289"} : (tensor<ui32>) -> tensor<ui64>
    %485 = "mhlo.convert"(%484) {name = "convert.1291"} : (tensor<ui64>) -> tensor<ui32>
    %486 = "mhlo.convert"(%485) {name = "convert.1301"} : (tensor<ui32>) -> tensor<ui64>
    %cst_195 = "std.constant"() {name = "constant.1302", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %487 = "mhlo.multiply"(%486, %cst_195) {name = "multiply.1303"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_196 = "std.constant"() {name = "constant.1305", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %488 = "mhlo.shift_right_logical"(%487, %cst_196) {name = "shift-right-logical.1306"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %489 = "mhlo.convert"(%488) {name = "convert.1307"} : (tensor<ui64>) -> tensor<ui32>
    %cst_197 = "std.constant"() {name = "constant.1285", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %490 = "mhlo.shift_right_logical"(%482, %cst_197) {name = "shift-right-logical.1287"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %491 = "mhlo.convert"(%490) {name = "convert.1288"} : (tensor<ui64>) -> tensor<ui32>
    %492 = "mhlo.convert"(%491) {name = "convert.1290"} : (tensor<ui32>) -> tensor<ui64>
    %cst_198 = "std.constant"() {name = "constant.1296", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %493 = "mhlo.shift_right_logical"(%492, %cst_198) {name = "shift-right-logical.1297"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %494 = "mhlo.convert"(%493) {name = "convert.1298"} : (tensor<ui64>) -> tensor<ui32>
    %495 = "mhlo.xor"(%489, %494) {name = "xor.1317"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %496 = "mhlo.xor"(%495, %cst_183) {name = "xor.1318"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %497 = "mhlo.convert"(%496) {name = "convert.1330"} : (tensor<ui32>) -> tensor<ui64>
    %cst_199 = "std.constant"() {name = "constant.1331", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %498 = "mhlo.multiply"(%497, %cst_199) {name = "multiply.1332"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_200 = "std.constant"() {name = "constant.1334", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %499 = "mhlo.shift_right_logical"(%498, %cst_200) {name = "shift-right-logical.1335"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %500 = "mhlo.convert"(%499) {name = "convert.1336"} : (tensor<ui64>) -> tensor<ui32>
    %501 = "mhlo.convert"(%492) {name = "convert.1295"} : (tensor<ui64>) -> tensor<ui32>
    %502 = "mhlo.convert"(%501) {name = "convert.1308"} : (tensor<ui32>) -> tensor<ui64>
    %cst_201 = "std.constant"() {name = "constant.1309", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %503 = "mhlo.multiply"(%502, %cst_201) {name = "multiply.1310"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %504 = "mhlo.convert"(%503) {name = "convert.1311"} : (tensor<ui64>) -> tensor<ui32>
    %505 = "mhlo.xor"(%500, %504) {name = "xor.1337"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %506 = "mhlo.xor"(%505, %451) {name = "xor.1338"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %507 = "mhlo.convert"(%506) {name = "convert.1345"} : (tensor<ui32>) -> tensor<ui64>
    %cst_202 = "std.constant"() {name = "constant.1346", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %508 = "mhlo.multiply"(%507, %cst_202) {name = "multiply.1347"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_203 = "std.constant"() {name = "constant.1349", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %509 = "mhlo.shift_right_logical"(%508, %cst_203) {name = "shift-right-logical.1350"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %510 = "mhlo.convert"(%509) {name = "convert.1351"} : (tensor<ui64>) -> tensor<ui32>
    %cst_204 = "std.constant"() {name = "constant.1312", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %511 = "mhlo.shift_right_logical"(%503, %cst_204) {name = "shift-right-logical.1313"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %512 = "mhlo.convert"(%511) {name = "convert.1314"} : (tensor<ui64>) -> tensor<ui32>
    %cst_205 = "std.constant"() {name = "constant.1292", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %513 = "mhlo.shift_right_logical"(%484, %cst_205) {name = "shift-right-logical.1293"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %514 = "mhlo.convert"(%513) {name = "convert.1294"} : (tensor<ui64>) -> tensor<ui32>
    %515 = "mhlo.xor"(%512, %514) {name = "xor.1315"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %516 = "mhlo.xor"(%515, %cst_172) {name = "xor.1316"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %517 = "mhlo.convert"(%516) {name = "convert.1323"} : (tensor<ui32>) -> tensor<ui64>
    %cst_206 = "std.constant"() {name = "constant.1324", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %518 = "mhlo.multiply"(%517, %cst_206) {name = "multiply.1325"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %519 = "mhlo.convert"(%518) {name = "convert.1326"} : (tensor<ui64>) -> tensor<ui32>
    %520 = "mhlo.xor"(%510, %519) {name = "xor.1361"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %521 = "mhlo.xor"(%520, %462) {name = "xor.1362"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %522 = "mhlo.convert"(%521) {name = "convert.1374"} : (tensor<ui32>) -> tensor<ui64>
    %cst_207 = "std.constant"() {name = "constant.1375", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %523 = "mhlo.multiply"(%522, %cst_207) {name = "multiply.1376"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_208 = "std.constant"() {name = "constant.1378", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %524 = "mhlo.shift_right_logical"(%523, %cst_208) {name = "shift-right-logical.1379"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %525 = "mhlo.convert"(%524) {name = "convert.1380"} : (tensor<ui64>) -> tensor<ui32>
    %cst_209 = "std.constant"() {name = "constant.1327", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %526 = "mhlo.shift_right_logical"(%518, %cst_209) {name = "shift-right-logical.1328"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %527 = "mhlo.convert"(%526) {name = "convert.1329"} : (tensor<ui64>) -> tensor<ui32>
    %528 = "mhlo.convert"(%487) {name = "convert.1304"} : (tensor<ui64>) -> tensor<ui32>
    %529 = "mhlo.xor"(%527, %528) {name = "xor.1339"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %530 = "mhlo.xor"(%529, %461) {name = "xor.1340"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %531 = "mhlo.convert"(%530) {name = "convert.1352"} : (tensor<ui32>) -> tensor<ui64>
    %cst_210 = "std.constant"() {name = "constant.1353", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %532 = "mhlo.multiply"(%531, %cst_210) {name = "multiply.1354"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %533 = "mhlo.convert"(%532) {name = "convert.1355"} : (tensor<ui64>) -> tensor<ui32>
    %534 = "mhlo.xor"(%525, %533) {name = "xor.1381"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %535 = "mhlo.xor"(%534, %453) {name = "xor.1382"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %536 = "mhlo.convert"(%535) {name = "convert.1389"} : (tensor<ui32>) -> tensor<ui64>
    %cst_211 = "std.constant"() {name = "constant.1390", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %537 = "mhlo.multiply"(%536, %cst_211) {name = "multiply.1391"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_212 = "std.constant"() {name = "constant.1393", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %538 = "mhlo.shift_right_logical"(%537, %cst_212) {name = "shift-right-logical.1394"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %539 = "mhlo.convert"(%538) {name = "convert.1395"} : (tensor<ui64>) -> tensor<ui32>
    %cst_213 = "std.constant"() {name = "constant.1356", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %540 = "mhlo.shift_right_logical"(%532, %cst_213) {name = "shift-right-logical.1357"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %541 = "mhlo.convert"(%540) {name = "convert.1358"} : (tensor<ui64>) -> tensor<ui32>
    %542 = "mhlo.convert"(%498) {name = "convert.1333"} : (tensor<ui64>) -> tensor<ui32>
    %543 = "mhlo.xor"(%541, %542) {name = "xor.1359"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %544 = "mhlo.xor"(%543, %452) {name = "xor.1360"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %545 = "mhlo.convert"(%544) {name = "convert.1367"} : (tensor<ui32>) -> tensor<ui64>
    %cst_214 = "std.constant"() {name = "constant.1368", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %546 = "mhlo.multiply"(%545, %cst_214) {name = "multiply.1369"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %547 = "mhlo.convert"(%546) {name = "convert.1370"} : (tensor<ui64>) -> tensor<ui32>
    %548 = "mhlo.xor"(%539, %547) {name = "xor.1405"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %549 = "mhlo.xor"(%548, %464) {name = "xor.1406"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %550 = "mhlo.convert"(%549) {name = "convert.1418"} : (tensor<ui32>) -> tensor<ui64>
    %cst_215 = "std.constant"() {name = "constant.1419", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %551 = "mhlo.multiply"(%550, %cst_215) {name = "multiply.1420"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_216 = "std.constant"() {name = "constant.1422", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %552 = "mhlo.shift_right_logical"(%551, %cst_216) {name = "shift-right-logical.1423"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %553 = "mhlo.convert"(%552) {name = "convert.1424"} : (tensor<ui64>) -> tensor<ui32>
    %cst_217 = "std.constant"() {name = "constant.1371", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %554 = "mhlo.shift_right_logical"(%546, %cst_217) {name = "shift-right-logical.1372"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %555 = "mhlo.convert"(%554) {name = "convert.1373"} : (tensor<ui64>) -> tensor<ui32>
    %556 = "mhlo.convert"(%508) {name = "convert.1348"} : (tensor<ui64>) -> tensor<ui32>
    %557 = "mhlo.xor"(%555, %556) {name = "xor.1383"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %558 = "mhlo.xor"(%557, %463) {name = "xor.1384"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %559 = "mhlo.convert"(%558) {name = "convert.1396"} : (tensor<ui32>) -> tensor<ui64>
    %cst_218 = "std.constant"() {name = "constant.1397", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %560 = "mhlo.multiply"(%559, %cst_218) {name = "multiply.1398"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %561 = "mhlo.convert"(%560) {name = "convert.1399"} : (tensor<ui64>) -> tensor<ui32>
    %562 = "mhlo.xor"(%553, %561) {name = "xor.1425"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %563 = "mhlo.xor"(%562, %455) {name = "xor.1426"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %564 = "mhlo.convert"(%563) {name = "convert.1433"} : (tensor<ui32>) -> tensor<ui64>
    %cst_219 = "std.constant"() {name = "constant.1434", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %565 = "mhlo.multiply"(%564, %cst_219) {name = "multiply.1435"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_220 = "std.constant"() {name = "constant.1437", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %566 = "mhlo.shift_right_logical"(%565, %cst_220) {name = "shift-right-logical.1438"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %567 = "mhlo.convert"(%566) {name = "convert.1439"} : (tensor<ui64>) -> tensor<ui32>
    %cst_221 = "std.constant"() {name = "constant.1400", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %568 = "mhlo.shift_right_logical"(%560, %cst_221) {name = "shift-right-logical.1401"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %569 = "mhlo.convert"(%568) {name = "convert.1402"} : (tensor<ui64>) -> tensor<ui32>
    %570 = "mhlo.convert"(%523) {name = "convert.1377"} : (tensor<ui64>) -> tensor<ui32>
    %571 = "mhlo.xor"(%569, %570) {name = "xor.1403"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %572 = "mhlo.xor"(%571, %454) {name = "xor.1404"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %573 = "mhlo.convert"(%572) {name = "convert.1411"} : (tensor<ui32>) -> tensor<ui64>
    %cst_222 = "std.constant"() {name = "constant.1412", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %574 = "mhlo.multiply"(%573, %cst_222) {name = "multiply.1413"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %575 = "mhlo.convert"(%574) {name = "convert.1414"} : (tensor<ui64>) -> tensor<ui32>
    %576 = "mhlo.xor"(%567, %575) {name = "xor.1449"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %577 = "mhlo.xor"(%576, %466) {name = "xor.1450"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %578 = "mhlo.convert"(%577) {name = "convert.1462"} : (tensor<ui32>) -> tensor<ui64>
    %cst_223 = "std.constant"() {name = "constant.1463", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %579 = "mhlo.multiply"(%578, %cst_223) {name = "multiply.1464"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_224 = "std.constant"() {name = "constant.1466", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %580 = "mhlo.shift_right_logical"(%579, %cst_224) {name = "shift-right-logical.1467"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %581 = "mhlo.convert"(%580) {name = "convert.1468"} : (tensor<ui64>) -> tensor<ui32>
    %cst_225 = "std.constant"() {name = "constant.1415", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %582 = "mhlo.shift_right_logical"(%574, %cst_225) {name = "shift-right-logical.1416"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %583 = "mhlo.convert"(%582) {name = "convert.1417"} : (tensor<ui64>) -> tensor<ui32>
    %584 = "mhlo.convert"(%537) {name = "convert.1392"} : (tensor<ui64>) -> tensor<ui32>
    %585 = "mhlo.xor"(%583, %584) {name = "xor.1427"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %586 = "mhlo.xor"(%585, %465) {name = "xor.1428"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %587 = "mhlo.convert"(%586) {name = "convert.1440"} : (tensor<ui32>) -> tensor<ui64>
    %cst_226 = "std.constant"() {name = "constant.1441", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %588 = "mhlo.multiply"(%587, %cst_226) {name = "multiply.1442"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %589 = "mhlo.convert"(%588) {name = "convert.1443"} : (tensor<ui64>) -> tensor<ui32>
    %590 = "mhlo.xor"(%581, %589) {name = "xor.1469"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %591 = "mhlo.xor"(%590, %457) {name = "xor.1470"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %592 = "mhlo.convert"(%591) {name = "convert.1477"} : (tensor<ui32>) -> tensor<ui64>
    %cst_227 = "std.constant"() {name = "constant.1478", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %593 = "mhlo.multiply"(%592, %cst_227) {name = "multiply.1479"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_228 = "std.constant"() {name = "constant.1481", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %594 = "mhlo.shift_right_logical"(%593, %cst_228) {name = "shift-right-logical.1482"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %595 = "mhlo.convert"(%594) {name = "convert.1483"} : (tensor<ui64>) -> tensor<ui32>
    %cst_229 = "std.constant"() {name = "constant.1444", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %596 = "mhlo.shift_right_logical"(%588, %cst_229) {name = "shift-right-logical.1445"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %597 = "mhlo.convert"(%596) {name = "convert.1446"} : (tensor<ui64>) -> tensor<ui32>
    %598 = "mhlo.convert"(%551) {name = "convert.1421"} : (tensor<ui64>) -> tensor<ui32>
    %599 = "mhlo.xor"(%597, %598) {name = "xor.1447"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %600 = "mhlo.xor"(%599, %456) {name = "xor.1448"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %601 = "mhlo.convert"(%600) {name = "convert.1455"} : (tensor<ui32>) -> tensor<ui64>
    %cst_230 = "std.constant"() {name = "constant.1456", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %602 = "mhlo.multiply"(%601, %cst_230) {name = "multiply.1457"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %603 = "mhlo.convert"(%602) {name = "convert.1458"} : (tensor<ui64>) -> tensor<ui32>
    %604 = "mhlo.xor"(%595, %603) {name = "xor.1493"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %605 = "mhlo.xor"(%604, %468) {name = "xor.1494"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %606 = "mhlo.convert"(%605) {name = "convert.1506"} : (tensor<ui32>) -> tensor<ui64>
    %cst_231 = "std.constant"() {name = "constant.1507", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %607 = "mhlo.multiply"(%606, %cst_231) {name = "multiply.1508"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_232 = "std.constant"() {name = "constant.1510", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %608 = "mhlo.shift_right_logical"(%607, %cst_232) {name = "shift-right-logical.1511"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %609 = "mhlo.convert"(%608) {name = "convert.1512"} : (tensor<ui64>) -> tensor<ui32>
    %cst_233 = "std.constant"() {name = "constant.1459", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %610 = "mhlo.shift_right_logical"(%602, %cst_233) {name = "shift-right-logical.1460"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %611 = "mhlo.convert"(%610) {name = "convert.1461"} : (tensor<ui64>) -> tensor<ui32>
    %612 = "mhlo.convert"(%565) {name = "convert.1436"} : (tensor<ui64>) -> tensor<ui32>
    %613 = "mhlo.xor"(%611, %612) {name = "xor.1471"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %614 = "mhlo.xor"(%613, %467) {name = "xor.1472"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %615 = "mhlo.convert"(%614) {name = "convert.1484"} : (tensor<ui32>) -> tensor<ui64>
    %cst_234 = "std.constant"() {name = "constant.1485", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %616 = "mhlo.multiply"(%615, %cst_234) {name = "multiply.1486"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %617 = "mhlo.convert"(%616) {name = "convert.1487"} : (tensor<ui64>) -> tensor<ui32>
    %618 = "mhlo.xor"(%609, %617) {name = "xor.1513"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %619 = "mhlo.xor"(%618, %459) {name = "xor.1514"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %620 = "mhlo.convert"(%619) {name = "convert.1535"} : (tensor<ui32>) -> tensor<ui64>
    %621 = "mhlo.convert"(%607) {name = "convert.1509"} : (tensor<ui64>) -> tensor<ui32>
    %622 = "mhlo.convert"(%621) {name = "convert.1536"} : (tensor<ui32>) -> tensor<ui64>
    %cst_235 = "std.constant"() {name = "constant.1537", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %623 = "mhlo.shift_left"(%622, %cst_235) {name = "shift-left.1538"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %624 = "mhlo.or"(%620, %623) {name = "or.1539"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %625 = "mhlo.reshape"(%624) {name = "reshape.1540"} : (tensor<ui64>) -> tensor<1xui64>
    %cst_236 = "std.constant"() {name = "constant.1521", value = dense<0> : tensor<ui32>} : () -> tensor<ui32>
    %626 = "mhlo.convert"(%cst_236) {name = "convert.1522"} : (tensor<ui32>) -> tensor<ui64>
    %627 = "mhlo.convert"(%cst_236) {name = "convert.1523"} : (tensor<ui32>) -> tensor<ui64>
    %cst_237 = "std.constant"() {name = "constant.1524", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %628 = "mhlo.shift_left"(%627, %cst_237) {name = "shift-left.1525"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %629 = "mhlo.or"(%626, %628) {name = "or.1526"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %630 = "mhlo.reshape"(%629) {name = "reshape.1532"} : (tensor<ui64>) -> tensor<1xui64>
    %cst_238 = "std.constant"() {name = "constant.1488", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %631 = "mhlo.shift_right_logical"(%616, %cst_238) {name = "shift-right-logical.1489"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %632 = "mhlo.convert"(%631) {name = "convert.1490"} : (tensor<ui64>) -> tensor<ui32>
    %633 = "mhlo.convert"(%579) {name = "convert.1465"} : (tensor<ui64>) -> tensor<ui32>
    %634 = "mhlo.xor"(%632, %633) {name = "xor.1491"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %635 = "mhlo.xor"(%634, %458) {name = "xor.1492"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %636 = "mhlo.convert"(%635) {name = "convert.1499"} : (tensor<ui32>) -> tensor<ui64>
    %cst_239 = "std.constant"() {name = "constant.1500", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %637 = "mhlo.multiply"(%636, %cst_239) {name = "multiply.1501"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_240 = "std.constant"() {name = "constant.1503", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %638 = "mhlo.shift_right_logical"(%637, %cst_240) {name = "shift-right-logical.1504"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %639 = "mhlo.convert"(%638) {name = "convert.1505"} : (tensor<ui64>) -> tensor<ui32>
    %640 = "mhlo.convert"(%593) {name = "convert.1480"} : (tensor<ui64>) -> tensor<ui32>
    %641 = "mhlo.xor"(%639, %640) {name = "xor.1515"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %642 = "mhlo.xor"(%641, %469) {name = "xor.1516"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %643 = "mhlo.convert"(%642) {name = "convert.1527"} : (tensor<ui32>) -> tensor<ui64>
    %644 = "mhlo.convert"(%637) {name = "convert.1502"} : (tensor<ui64>) -> tensor<ui32>
    %645 = "mhlo.convert"(%644) {name = "convert.1528"} : (tensor<ui32>) -> tensor<ui64>
    %cst_241 = "std.constant"() {name = "constant.1529", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %646 = "mhlo.shift_left"(%645, %cst_241) {name = "shift-left.1530"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %647 = "mhlo.or"(%643, %646) {name = "or.1531"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %648 = "mhlo.reshape"(%647) {name = "reshape.1533"} : (tensor<ui64>) -> tensor<1xui64>
    %649 = "mhlo.concatenate"(%630, %648) {dimension = 0 : i64} : (tensor<1xui64>, tensor<1xui64>) -> tensor<2xui64>
    %650 = "mhlo.concatenate"(%625, %649) {dimension = 0 : i64} : (tensor<1xui64>, tensor<2xui64>) -> tensor<3xui64>
    %651 = "mhlo.rng_bit_generator"(%650) {rng_algorithm = 2 : i32} : (tensor<3xui64>) -> tuple<tensor<3xui64>, tensor<1x2xui32>>
    %652 = "mhlo.get_tuple_element"(%651) {index = 0 : i32, name = "get-tuple-element.1544"} : (tuple<tensor<3xui64>, tensor<1x2xui32>>) -> tensor<3xui64>
    %cst_242 = "std.constant"() {name = "constant.1552", value = dense<0> : tensor<ui64>} : () -> tensor<ui64>
    %cst_243 = "std.constant"() {name = "constant.1574", value = dense<1053357856> : tensor<ui32>} : () -> tensor<ui32>
    %cst_244 = "std.constant"() {name = "constant.1594", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %653 = "mhlo.add"(%cst_243, %cst_244) {name = "add.1595"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_245 = "std.constant"() {name = "constant.1616", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %654 = "mhlo.add"(%653, %cst_245) {name = "add.1617"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_246 = "std.constant"() {name = "constant.1638", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %655 = "mhlo.add"(%654, %cst_246) {name = "add.1639"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_247 = "std.constant"() {name = "constant.1660", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %656 = "mhlo.add"(%655, %cst_247) {name = "add.1661"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_248 = "std.constant"() {name = "constant.1682", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %657 = "mhlo.add"(%656, %cst_248) {name = "add.1683"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_249 = "std.constant"() {name = "constant.1704", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %658 = "mhlo.add"(%657, %cst_249) {name = "add.1705"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_250 = "std.constant"() {name = "constant.1726", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %659 = "mhlo.add"(%658, %cst_250) {name = "add.1727"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_251 = "std.constant"() {name = "constant.1748", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %660 = "mhlo.add"(%659, %cst_251) {name = "add.1749"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_252 = "std.constant"() {name = "constant.1770", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %661 = "mhlo.add"(%660, %cst_252) {name = "add.1771"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_253 = "std.constant"() {name = "constant.1792", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %662 = "mhlo.add"(%661, %cst_253) {name = "add.1793"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_254 = "std.constant"() {name = "constant.1575", value = dense<38149673> : tensor<ui32>} : () -> tensor<ui32>
    %cst_255 = "std.constant"() {name = "constant.1596", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %663 = "mhlo.add"(%cst_254, %cst_255) {name = "add.1597"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_256 = "std.constant"() {name = "constant.1618", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %664 = "mhlo.add"(%663, %cst_256) {name = "add.1619"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_257 = "std.constant"() {name = "constant.1640", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %665 = "mhlo.add"(%664, %cst_257) {name = "add.1641"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_258 = "std.constant"() {name = "constant.1662", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %666 = "mhlo.add"(%665, %cst_258) {name = "add.1663"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_259 = "std.constant"() {name = "constant.1684", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %667 = "mhlo.add"(%666, %cst_259) {name = "add.1685"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_260 = "std.constant"() {name = "constant.1706", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %668 = "mhlo.add"(%667, %cst_260) {name = "add.1707"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_261 = "std.constant"() {name = "constant.1728", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %669 = "mhlo.add"(%668, %cst_261) {name = "add.1729"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_262 = "std.constant"() {name = "constant.1750", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %670 = "mhlo.add"(%669, %cst_262) {name = "add.1751"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_263 = "std.constant"() {name = "constant.1772", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %671 = "mhlo.add"(%670, %cst_263) {name = "add.1773"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_264 = "std.constant"() {name = "constant.1794", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %672 = "mhlo.add"(%671, %cst_264) {name = "add.1795"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %673 = "mhlo.get_tuple_element"(%651) {index = 1 : i32, name = "get-tuple-element.1543"} : (tuple<tensor<3xui64>, tensor<1x2xui32>>) -> tensor<1x2xui32>
    %674 = "mhlo.bitcast_convert"(%673) {name = "bitcast-convert.1545"} : (tensor<1x2xui32>) -> tensor<1x2xi32>
    %675 = "mhlo.slice"(%674) {limit_indices = dense<[1, 2]> : tensor<2xi64>, start_indices = dense<0> : tensor<2xi64>, strides = dense<1> : tensor<2xi64>} : (tensor<1x2xi32>) -> tensor<1x2xi32>
    %676 = "mhlo.reshape"(%675) {name = "reshape.1547"} : (tensor<1x2xi32>) -> tensor<2xi32>
    %677 = "mhlo.slice"(%676) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
    %678 = "mhlo.reshape"(%677) {name = "reshape.1549"} : (tensor<1xi32>) -> tensor<i32>
    %679 = "mhlo.convert"(%678) {name = "convert.1553"} : (tensor<i32>) -> tensor<ui64>
    %680 = "mhlo.slice"(%676) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
    %681 = "mhlo.reshape"(%680) {name = "reshape.1551"} : (tensor<1xi32>) -> tensor<i32>
    %682 = "mhlo.convert"(%681) {name = "convert.1554"} : (tensor<i32>) -> tensor<ui64>
    %cst_265 = "std.constant"() {name = "constant.1555", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %683 = "mhlo.shift_left"(%682, %cst_265) {name = "shift-left.1556"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %684 = "mhlo.or"(%679, %683) {name = "or.1557"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %685 = "mhlo.convert"(%684) {name = "convert.1561"} : (tensor<ui64>) -> tensor<ui32>
    %686 = "mhlo.convert"(%685) {name = "convert.1564"} : (tensor<ui32>) -> tensor<ui64>
    %687 = "mhlo.convert"(%686) {name = "convert.1566"} : (tensor<ui64>) -> tensor<ui32>
    %688 = "mhlo.convert"(%687) {name = "convert.1576"} : (tensor<ui32>) -> tensor<ui64>
    %cst_266 = "std.constant"() {name = "constant.1577", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %689 = "mhlo.multiply"(%688, %cst_266) {name = "multiply.1578"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_267 = "std.constant"() {name = "constant.1580", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %690 = "mhlo.shift_right_logical"(%689, %cst_267) {name = "shift-right-logical.1581"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %691 = "mhlo.convert"(%690) {name = "convert.1582"} : (tensor<ui64>) -> tensor<ui32>
    %cst_268 = "std.constant"() {name = "constant.1560", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %692 = "mhlo.shift_right_logical"(%684, %cst_268) {name = "shift-right-logical.1562"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %693 = "mhlo.convert"(%692) {name = "convert.1563"} : (tensor<ui64>) -> tensor<ui32>
    %694 = "mhlo.convert"(%693) {name = "convert.1565"} : (tensor<ui32>) -> tensor<ui64>
    %cst_269 = "std.constant"() {name = "constant.1571", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %695 = "mhlo.shift_right_logical"(%694, %cst_269) {name = "shift-right-logical.1572"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %696 = "mhlo.convert"(%695) {name = "convert.1573"} : (tensor<ui64>) -> tensor<ui32>
    %697 = "mhlo.xor"(%691, %696) {name = "xor.1592"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %698 = "mhlo.xor"(%697, %cst_254) {name = "xor.1593"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %699 = "mhlo.convert"(%698) {name = "convert.1605"} : (tensor<ui32>) -> tensor<ui64>
    %cst_270 = "std.constant"() {name = "constant.1606", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %700 = "mhlo.multiply"(%699, %cst_270) {name = "multiply.1607"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_271 = "std.constant"() {name = "constant.1609", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %701 = "mhlo.shift_right_logical"(%700, %cst_271) {name = "shift-right-logical.1610"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %702 = "mhlo.convert"(%701) {name = "convert.1611"} : (tensor<ui64>) -> tensor<ui32>
    %703 = "mhlo.convert"(%694) {name = "convert.1570"} : (tensor<ui64>) -> tensor<ui32>
    %704 = "mhlo.convert"(%703) {name = "convert.1583"} : (tensor<ui32>) -> tensor<ui64>
    %cst_272 = "std.constant"() {name = "constant.1584", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %705 = "mhlo.multiply"(%704, %cst_272) {name = "multiply.1585"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %706 = "mhlo.convert"(%705) {name = "convert.1586"} : (tensor<ui64>) -> tensor<ui32>
    %707 = "mhlo.xor"(%702, %706) {name = "xor.1612"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %708 = "mhlo.xor"(%707, %653) {name = "xor.1613"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %709 = "mhlo.convert"(%708) {name = "convert.1620"} : (tensor<ui32>) -> tensor<ui64>
    %cst_273 = "std.constant"() {name = "constant.1621", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %710 = "mhlo.multiply"(%709, %cst_273) {name = "multiply.1622"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_274 = "std.constant"() {name = "constant.1624", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %711 = "mhlo.shift_right_logical"(%710, %cst_274) {name = "shift-right-logical.1625"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %712 = "mhlo.convert"(%711) {name = "convert.1626"} : (tensor<ui64>) -> tensor<ui32>
    %cst_275 = "std.constant"() {name = "constant.1587", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %713 = "mhlo.shift_right_logical"(%705, %cst_275) {name = "shift-right-logical.1588"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %714 = "mhlo.convert"(%713) {name = "convert.1589"} : (tensor<ui64>) -> tensor<ui32>
    %cst_276 = "std.constant"() {name = "constant.1567", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %715 = "mhlo.shift_right_logical"(%686, %cst_276) {name = "shift-right-logical.1568"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %716 = "mhlo.convert"(%715) {name = "convert.1569"} : (tensor<ui64>) -> tensor<ui32>
    %717 = "mhlo.xor"(%714, %716) {name = "xor.1590"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %718 = "mhlo.xor"(%717, %cst_243) {name = "xor.1591"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %719 = "mhlo.convert"(%718) {name = "convert.1598"} : (tensor<ui32>) -> tensor<ui64>
    %cst_277 = "std.constant"() {name = "constant.1599", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %720 = "mhlo.multiply"(%719, %cst_277) {name = "multiply.1600"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %721 = "mhlo.convert"(%720) {name = "convert.1601"} : (tensor<ui64>) -> tensor<ui32>
    %722 = "mhlo.xor"(%712, %721) {name = "xor.1636"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %723 = "mhlo.xor"(%722, %664) {name = "xor.1637"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %724 = "mhlo.convert"(%723) {name = "convert.1649"} : (tensor<ui32>) -> tensor<ui64>
    %cst_278 = "std.constant"() {name = "constant.1650", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %725 = "mhlo.multiply"(%724, %cst_278) {name = "multiply.1651"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_279 = "std.constant"() {name = "constant.1653", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %726 = "mhlo.shift_right_logical"(%725, %cst_279) {name = "shift-right-logical.1654"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %727 = "mhlo.convert"(%726) {name = "convert.1655"} : (tensor<ui64>) -> tensor<ui32>
    %cst_280 = "std.constant"() {name = "constant.1602", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %728 = "mhlo.shift_right_logical"(%720, %cst_280) {name = "shift-right-logical.1603"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %729 = "mhlo.convert"(%728) {name = "convert.1604"} : (tensor<ui64>) -> tensor<ui32>
    %730 = "mhlo.convert"(%689) {name = "convert.1579"} : (tensor<ui64>) -> tensor<ui32>
    %731 = "mhlo.xor"(%729, %730) {name = "xor.1614"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %732 = "mhlo.xor"(%731, %663) {name = "xor.1615"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %733 = "mhlo.convert"(%732) {name = "convert.1627"} : (tensor<ui32>) -> tensor<ui64>
    %cst_281 = "std.constant"() {name = "constant.1628", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %734 = "mhlo.multiply"(%733, %cst_281) {name = "multiply.1629"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %735 = "mhlo.convert"(%734) {name = "convert.1630"} : (tensor<ui64>) -> tensor<ui32>
    %736 = "mhlo.xor"(%727, %735) {name = "xor.1656"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %737 = "mhlo.xor"(%736, %655) {name = "xor.1657"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %738 = "mhlo.convert"(%737) {name = "convert.1664"} : (tensor<ui32>) -> tensor<ui64>
    %cst_282 = "std.constant"() {name = "constant.1665", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %739 = "mhlo.multiply"(%738, %cst_282) {name = "multiply.1666"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_283 = "std.constant"() {name = "constant.1668", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %740 = "mhlo.shift_right_logical"(%739, %cst_283) {name = "shift-right-logical.1669"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %741 = "mhlo.convert"(%740) {name = "convert.1670"} : (tensor<ui64>) -> tensor<ui32>
    %cst_284 = "std.constant"() {name = "constant.1631", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %742 = "mhlo.shift_right_logical"(%734, %cst_284) {name = "shift-right-logical.1632"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %743 = "mhlo.convert"(%742) {name = "convert.1633"} : (tensor<ui64>) -> tensor<ui32>
    %744 = "mhlo.convert"(%700) {name = "convert.1608"} : (tensor<ui64>) -> tensor<ui32>
    %745 = "mhlo.xor"(%743, %744) {name = "xor.1634"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %746 = "mhlo.xor"(%745, %654) {name = "xor.1635"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %747 = "mhlo.convert"(%746) {name = "convert.1642"} : (tensor<ui32>) -> tensor<ui64>
    %cst_285 = "std.constant"() {name = "constant.1643", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %748 = "mhlo.multiply"(%747, %cst_285) {name = "multiply.1644"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %749 = "mhlo.convert"(%748) {name = "convert.1645"} : (tensor<ui64>) -> tensor<ui32>
    %750 = "mhlo.xor"(%741, %749) {name = "xor.1680"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %751 = "mhlo.xor"(%750, %666) {name = "xor.1681"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %752 = "mhlo.convert"(%751) {name = "convert.1693"} : (tensor<ui32>) -> tensor<ui64>
    %cst_286 = "std.constant"() {name = "constant.1694", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %753 = "mhlo.multiply"(%752, %cst_286) {name = "multiply.1695"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_287 = "std.constant"() {name = "constant.1697", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %754 = "mhlo.shift_right_logical"(%753, %cst_287) {name = "shift-right-logical.1698"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %755 = "mhlo.convert"(%754) {name = "convert.1699"} : (tensor<ui64>) -> tensor<ui32>
    %cst_288 = "std.constant"() {name = "constant.1646", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %756 = "mhlo.shift_right_logical"(%748, %cst_288) {name = "shift-right-logical.1647"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %757 = "mhlo.convert"(%756) {name = "convert.1648"} : (tensor<ui64>) -> tensor<ui32>
    %758 = "mhlo.convert"(%710) {name = "convert.1623"} : (tensor<ui64>) -> tensor<ui32>
    %759 = "mhlo.xor"(%757, %758) {name = "xor.1658"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %760 = "mhlo.xor"(%759, %665) {name = "xor.1659"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %761 = "mhlo.convert"(%760) {name = "convert.1671"} : (tensor<ui32>) -> tensor<ui64>
    %cst_289 = "std.constant"() {name = "constant.1672", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %762 = "mhlo.multiply"(%761, %cst_289) {name = "multiply.1673"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %763 = "mhlo.convert"(%762) {name = "convert.1674"} : (tensor<ui64>) -> tensor<ui32>
    %764 = "mhlo.xor"(%755, %763) {name = "xor.1700"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %765 = "mhlo.xor"(%764, %657) {name = "xor.1701"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %766 = "mhlo.convert"(%765) {name = "convert.1708"} : (tensor<ui32>) -> tensor<ui64>
    %cst_290 = "std.constant"() {name = "constant.1709", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %767 = "mhlo.multiply"(%766, %cst_290) {name = "multiply.1710"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_291 = "std.constant"() {name = "constant.1712", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %768 = "mhlo.shift_right_logical"(%767, %cst_291) {name = "shift-right-logical.1713"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %769 = "mhlo.convert"(%768) {name = "convert.1714"} : (tensor<ui64>) -> tensor<ui32>
    %cst_292 = "std.constant"() {name = "constant.1675", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %770 = "mhlo.shift_right_logical"(%762, %cst_292) {name = "shift-right-logical.1676"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %771 = "mhlo.convert"(%770) {name = "convert.1677"} : (tensor<ui64>) -> tensor<ui32>
    %772 = "mhlo.convert"(%725) {name = "convert.1652"} : (tensor<ui64>) -> tensor<ui32>
    %773 = "mhlo.xor"(%771, %772) {name = "xor.1678"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %774 = "mhlo.xor"(%773, %656) {name = "xor.1679"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %775 = "mhlo.convert"(%774) {name = "convert.1686"} : (tensor<ui32>) -> tensor<ui64>
    %cst_293 = "std.constant"() {name = "constant.1687", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %776 = "mhlo.multiply"(%775, %cst_293) {name = "multiply.1688"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %777 = "mhlo.convert"(%776) {name = "convert.1689"} : (tensor<ui64>) -> tensor<ui32>
    %778 = "mhlo.xor"(%769, %777) {name = "xor.1724"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %779 = "mhlo.xor"(%778, %668) {name = "xor.1725"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %780 = "mhlo.convert"(%779) {name = "convert.1737"} : (tensor<ui32>) -> tensor<ui64>
    %cst_294 = "std.constant"() {name = "constant.1738", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %781 = "mhlo.multiply"(%780, %cst_294) {name = "multiply.1739"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_295 = "std.constant"() {name = "constant.1741", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %782 = "mhlo.shift_right_logical"(%781, %cst_295) {name = "shift-right-logical.1742"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %783 = "mhlo.convert"(%782) {name = "convert.1743"} : (tensor<ui64>) -> tensor<ui32>
    %cst_296 = "std.constant"() {name = "constant.1690", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %784 = "mhlo.shift_right_logical"(%776, %cst_296) {name = "shift-right-logical.1691"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %785 = "mhlo.convert"(%784) {name = "convert.1692"} : (tensor<ui64>) -> tensor<ui32>
    %786 = "mhlo.convert"(%739) {name = "convert.1667"} : (tensor<ui64>) -> tensor<ui32>
    %787 = "mhlo.xor"(%785, %786) {name = "xor.1702"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %788 = "mhlo.xor"(%787, %667) {name = "xor.1703"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %789 = "mhlo.convert"(%788) {name = "convert.1715"} : (tensor<ui32>) -> tensor<ui64>
    %cst_297 = "std.constant"() {name = "constant.1716", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %790 = "mhlo.multiply"(%789, %cst_297) {name = "multiply.1717"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %791 = "mhlo.convert"(%790) {name = "convert.1718"} : (tensor<ui64>) -> tensor<ui32>
    %792 = "mhlo.xor"(%783, %791) {name = "xor.1744"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %793 = "mhlo.xor"(%792, %659) {name = "xor.1745"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %794 = "mhlo.convert"(%793) {name = "convert.1752"} : (tensor<ui32>) -> tensor<ui64>
    %cst_298 = "std.constant"() {name = "constant.1753", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %795 = "mhlo.multiply"(%794, %cst_298) {name = "multiply.1754"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_299 = "std.constant"() {name = "constant.1756", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %796 = "mhlo.shift_right_logical"(%795, %cst_299) {name = "shift-right-logical.1757"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %797 = "mhlo.convert"(%796) {name = "convert.1758"} : (tensor<ui64>) -> tensor<ui32>
    %cst_300 = "std.constant"() {name = "constant.1719", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %798 = "mhlo.shift_right_logical"(%790, %cst_300) {name = "shift-right-logical.1720"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %799 = "mhlo.convert"(%798) {name = "convert.1721"} : (tensor<ui64>) -> tensor<ui32>
    %800 = "mhlo.convert"(%753) {name = "convert.1696"} : (tensor<ui64>) -> tensor<ui32>
    %801 = "mhlo.xor"(%799, %800) {name = "xor.1722"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %802 = "mhlo.xor"(%801, %658) {name = "xor.1723"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %803 = "mhlo.convert"(%802) {name = "convert.1730"} : (tensor<ui32>) -> tensor<ui64>
    %cst_301 = "std.constant"() {name = "constant.1731", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %804 = "mhlo.multiply"(%803, %cst_301) {name = "multiply.1732"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %805 = "mhlo.convert"(%804) {name = "convert.1733"} : (tensor<ui64>) -> tensor<ui32>
    %806 = "mhlo.xor"(%797, %805) {name = "xor.1768"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %807 = "mhlo.xor"(%806, %670) {name = "xor.1769"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %808 = "mhlo.convert"(%807) {name = "convert.1781"} : (tensor<ui32>) -> tensor<ui64>
    %cst_302 = "std.constant"() {name = "constant.1782", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %809 = "mhlo.multiply"(%808, %cst_302) {name = "multiply.1783"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_303 = "std.constant"() {name = "constant.1785", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %810 = "mhlo.shift_right_logical"(%809, %cst_303) {name = "shift-right-logical.1786"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %811 = "mhlo.convert"(%810) {name = "convert.1787"} : (tensor<ui64>) -> tensor<ui32>
    %cst_304 = "std.constant"() {name = "constant.1734", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %812 = "mhlo.shift_right_logical"(%804, %cst_304) {name = "shift-right-logical.1735"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %813 = "mhlo.convert"(%812) {name = "convert.1736"} : (tensor<ui64>) -> tensor<ui32>
    %814 = "mhlo.convert"(%767) {name = "convert.1711"} : (tensor<ui64>) -> tensor<ui32>
    %815 = "mhlo.xor"(%813, %814) {name = "xor.1746"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %816 = "mhlo.xor"(%815, %669) {name = "xor.1747"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %817 = "mhlo.convert"(%816) {name = "convert.1759"} : (tensor<ui32>) -> tensor<ui64>
    %cst_305 = "std.constant"() {name = "constant.1760", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %818 = "mhlo.multiply"(%817, %cst_305) {name = "multiply.1761"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %819 = "mhlo.convert"(%818) {name = "convert.1762"} : (tensor<ui64>) -> tensor<ui32>
    %820 = "mhlo.xor"(%811, %819) {name = "xor.1788"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %821 = "mhlo.xor"(%820, %661) {name = "xor.1789"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %822 = "mhlo.convert"(%821) {name = "convert.1810"} : (tensor<ui32>) -> tensor<ui64>
    %823 = "mhlo.convert"(%809) {name = "convert.1784"} : (tensor<ui64>) -> tensor<ui32>
    %824 = "mhlo.convert"(%823) {name = "convert.1811"} : (tensor<ui32>) -> tensor<ui64>
    %cst_306 = "std.constant"() {name = "constant.1812", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %825 = "mhlo.shift_left"(%824, %cst_306) {name = "shift-left.1813"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %826 = "mhlo.or"(%822, %825) {name = "or.1814"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %827 = "mhlo.reshape"(%826) {name = "reshape.1815"} : (tensor<ui64>) -> tensor<1xui64>
    %cst_307 = "std.constant"() {name = "constant.1796", value = dense<0> : tensor<ui32>} : () -> tensor<ui32>
    %828 = "mhlo.convert"(%cst_307) {name = "convert.1797"} : (tensor<ui32>) -> tensor<ui64>
    %829 = "mhlo.convert"(%cst_307) {name = "convert.1798"} : (tensor<ui32>) -> tensor<ui64>
    %cst_308 = "std.constant"() {name = "constant.1799", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %830 = "mhlo.shift_left"(%829, %cst_308) {name = "shift-left.1800"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %831 = "mhlo.or"(%828, %830) {name = "or.1801"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %832 = "mhlo.reshape"(%831) {name = "reshape.1807"} : (tensor<ui64>) -> tensor<1xui64>
    %cst_309 = "std.constant"() {name = "constant.1763", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %833 = "mhlo.shift_right_logical"(%818, %cst_309) {name = "shift-right-logical.1764"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %834 = "mhlo.convert"(%833) {name = "convert.1765"} : (tensor<ui64>) -> tensor<ui32>
    %835 = "mhlo.convert"(%781) {name = "convert.1740"} : (tensor<ui64>) -> tensor<ui32>
    %836 = "mhlo.xor"(%834, %835) {name = "xor.1766"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %837 = "mhlo.xor"(%836, %660) {name = "xor.1767"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %838 = "mhlo.convert"(%837) {name = "convert.1774"} : (tensor<ui32>) -> tensor<ui64>
    %cst_310 = "std.constant"() {name = "constant.1775", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %839 = "mhlo.multiply"(%838, %cst_310) {name = "multiply.1776"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_311 = "std.constant"() {name = "constant.1778", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %840 = "mhlo.shift_right_logical"(%839, %cst_311) {name = "shift-right-logical.1779"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %841 = "mhlo.convert"(%840) {name = "convert.1780"} : (tensor<ui64>) -> tensor<ui32>
    %842 = "mhlo.convert"(%795) {name = "convert.1755"} : (tensor<ui64>) -> tensor<ui32>
    %843 = "mhlo.xor"(%841, %842) {name = "xor.1790"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %844 = "mhlo.xor"(%843, %671) {name = "xor.1791"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %845 = "mhlo.convert"(%844) {name = "convert.1802"} : (tensor<ui32>) -> tensor<ui64>
    %846 = "mhlo.convert"(%839) {name = "convert.1777"} : (tensor<ui64>) -> tensor<ui32>
    %847 = "mhlo.convert"(%846) {name = "convert.1803"} : (tensor<ui32>) -> tensor<ui64>
    %cst_312 = "std.constant"() {name = "constant.1804", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %848 = "mhlo.shift_left"(%847, %cst_312) {name = "shift-left.1805"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %849 = "mhlo.or"(%845, %848) {name = "or.1806"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %850 = "mhlo.reshape"(%849) {name = "reshape.1808"} : (tensor<ui64>) -> tensor<1xui64>
    %851 = "mhlo.concatenate"(%832, %850) {dimension = 0 : i64} : (tensor<1xui64>, tensor<1xui64>) -> tensor<2xui64>
    %852 = "mhlo.concatenate"(%827, %851) {dimension = 0 : i64} : (tensor<1xui64>, tensor<2xui64>) -> tensor<3xui64>
    %853 = "mhlo.rng_bit_generator"(%852) {rng_algorithm = 2 : i32} : (tensor<3xui64>) -> tuple<tensor<3xui64>, tensor<4xui32>>
    %854 = "mhlo.get_tuple_element"(%853) {index = 0 : i32, name = "get-tuple-element.1819"} : (tuple<tensor<3xui64>, tensor<4xui32>>) -> tensor<3xui64>
    %cst_313 = "std.constant"() {name = "constant.1871", value = dense<0> : tensor<ui64>} : () -> tensor<ui64>
    %cst_314 = "std.constant"() {name = "constant.1886", value = dense<1053357856> : tensor<ui32>} : () -> tensor<ui32>
    %cst_315 = "std.constant"() {name = "constant.1906", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %855 = "mhlo.add"(%cst_314, %cst_315) {name = "add.1907"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_316 = "std.constant"() {name = "constant.1928", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %856 = "mhlo.add"(%855, %cst_316) {name = "add.1929"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_317 = "std.constant"() {name = "constant.1950", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %857 = "mhlo.add"(%856, %cst_317) {name = "add.1951"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_318 = "std.constant"() {name = "constant.1972", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %858 = "mhlo.add"(%857, %cst_318) {name = "add.1973"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_319 = "std.constant"() {name = "constant.1994", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %859 = "mhlo.add"(%858, %cst_319) {name = "add.1995"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_320 = "std.constant"() {name = "constant.2016", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %860 = "mhlo.add"(%859, %cst_320) {name = "add.2017"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_321 = "std.constant"() {name = "constant.2038", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %861 = "mhlo.add"(%860, %cst_321) {name = "add.2039"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_322 = "std.constant"() {name = "constant.2060", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %862 = "mhlo.add"(%861, %cst_322) {name = "add.2061"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_323 = "std.constant"() {name = "constant.2082", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %863 = "mhlo.add"(%862, %cst_323) {name = "add.2083"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_324 = "std.constant"() {name = "constant.2104", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
    %864 = "mhlo.add"(%863, %cst_324) {name = "add.2105"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_325 = "std.constant"() {name = "constant.1887", value = dense<38149673> : tensor<ui32>} : () -> tensor<ui32>
    %cst_326 = "std.constant"() {name = "constant.1908", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %865 = "mhlo.add"(%cst_325, %cst_326) {name = "add.1909"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_327 = "std.constant"() {name = "constant.1930", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %866 = "mhlo.add"(%865, %cst_327) {name = "add.1931"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_328 = "std.constant"() {name = "constant.1952", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %867 = "mhlo.add"(%866, %cst_328) {name = "add.1953"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_329 = "std.constant"() {name = "constant.1974", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %868 = "mhlo.add"(%867, %cst_329) {name = "add.1975"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_330 = "std.constant"() {name = "constant.1996", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %869 = "mhlo.add"(%868, %cst_330) {name = "add.1997"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_331 = "std.constant"() {name = "constant.2018", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %870 = "mhlo.add"(%869, %cst_331) {name = "add.2019"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_332 = "std.constant"() {name = "constant.2040", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %871 = "mhlo.add"(%870, %cst_332) {name = "add.2041"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_333 = "std.constant"() {name = "constant.2062", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %872 = "mhlo.add"(%871, %cst_333) {name = "add.2063"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_334 = "std.constant"() {name = "constant.2084", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %873 = "mhlo.add"(%872, %cst_334) {name = "add.2085"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %cst_335 = "std.constant"() {name = "constant.2106", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
    %874 = "mhlo.add"(%873, %cst_335) {name = "add.2107"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %875 = "mhlo.slice"(%472) {limit_indices = dense<2> : tensor<2xi64>, start_indices = dense<[1, 0]> : tensor<2xi64>, strides = dense<1> : tensor<2xi64>} : (tensor<2x2xi32>) -> tensor<1x2xi32>
    %876 = "mhlo.reshape"(%875) {name = "reshape.1274"} : (tensor<1x2xi32>) -> tensor<2xi32>
    %877 = "mhlo.slice"(%876) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
    %878 = "mhlo.reshape"(%877) {name = "reshape.1863"} : (tensor<1xi32>) -> tensor<i32>
    %879 = "mhlo.convert"(%878) {name = "convert.1866"} : (tensor<i32>) -> tensor<ui64>
    %880 = "mhlo.slice"(%876) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
    %881 = "mhlo.reshape"(%880) {name = "reshape.1865"} : (tensor<1xi32>) -> tensor<i32>
    %882 = "mhlo.convert"(%881) {name = "convert.1867"} : (tensor<i32>) -> tensor<ui64>
    %cst_336 = "std.constant"() {name = "constant.1868", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %883 = "mhlo.shift_left"(%882, %cst_336) {name = "shift-left.1869"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %884 = "mhlo.or"(%879, %883) {name = "or.1870"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %885 = "mhlo.convert"(%884) {name = "convert.1873"} : (tensor<ui64>) -> tensor<ui32>
    %886 = "mhlo.convert"(%885) {name = "convert.1876"} : (tensor<ui32>) -> tensor<ui64>
    %887 = "mhlo.convert"(%886) {name = "convert.1878"} : (tensor<ui64>) -> tensor<ui32>
    %888 = "mhlo.convert"(%887) {name = "convert.1888"} : (tensor<ui32>) -> tensor<ui64>
    %cst_337 = "std.constant"() {name = "constant.1889", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %889 = "mhlo.multiply"(%888, %cst_337) {name = "multiply.1890"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_338 = "std.constant"() {name = "constant.1892", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %890 = "mhlo.shift_right_logical"(%889, %cst_338) {name = "shift-right-logical.1893"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %891 = "mhlo.convert"(%890) {name = "convert.1894"} : (tensor<ui64>) -> tensor<ui32>
    %cst_339 = "std.constant"() {name = "constant.1872", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %892 = "mhlo.shift_right_logical"(%884, %cst_339) {name = "shift-right-logical.1874"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %893 = "mhlo.convert"(%892) {name = "convert.1875"} : (tensor<ui64>) -> tensor<ui32>
    %894 = "mhlo.convert"(%893) {name = "convert.1877"} : (tensor<ui32>) -> tensor<ui64>
    %cst_340 = "std.constant"() {name = "constant.1883", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %895 = "mhlo.shift_right_logical"(%894, %cst_340) {name = "shift-right-logical.1884"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %896 = "mhlo.convert"(%895) {name = "convert.1885"} : (tensor<ui64>) -> tensor<ui32>
    %897 = "mhlo.xor"(%891, %896) {name = "xor.1904"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %898 = "mhlo.xor"(%897, %cst_325) {name = "xor.1905"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %899 = "mhlo.convert"(%898) {name = "convert.1917"} : (tensor<ui32>) -> tensor<ui64>
    %cst_341 = "std.constant"() {name = "constant.1918", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %900 = "mhlo.multiply"(%899, %cst_341) {name = "multiply.1919"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_342 = "std.constant"() {name = "constant.1921", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %901 = "mhlo.shift_right_logical"(%900, %cst_342) {name = "shift-right-logical.1922"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %902 = "mhlo.convert"(%901) {name = "convert.1923"} : (tensor<ui64>) -> tensor<ui32>
    %903 = "mhlo.convert"(%894) {name = "convert.1882"} : (tensor<ui64>) -> tensor<ui32>
    %904 = "mhlo.convert"(%903) {name = "convert.1895"} : (tensor<ui32>) -> tensor<ui64>
    %cst_343 = "std.constant"() {name = "constant.1896", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %905 = "mhlo.multiply"(%904, %cst_343) {name = "multiply.1897"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %906 = "mhlo.convert"(%905) {name = "convert.1898"} : (tensor<ui64>) -> tensor<ui32>
    %907 = "mhlo.xor"(%902, %906) {name = "xor.1924"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %908 = "mhlo.xor"(%907, %855) {name = "xor.1925"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %909 = "mhlo.convert"(%908) {name = "convert.1932"} : (tensor<ui32>) -> tensor<ui64>
    %cst_344 = "std.constant"() {name = "constant.1933", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %910 = "mhlo.multiply"(%909, %cst_344) {name = "multiply.1934"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_345 = "std.constant"() {name = "constant.1936", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %911 = "mhlo.shift_right_logical"(%910, %cst_345) {name = "shift-right-logical.1937"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %912 = "mhlo.convert"(%911) {name = "convert.1938"} : (tensor<ui64>) -> tensor<ui32>
    %cst_346 = "std.constant"() {name = "constant.1899", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %913 = "mhlo.shift_right_logical"(%905, %cst_346) {name = "shift-right-logical.1900"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %914 = "mhlo.convert"(%913) {name = "convert.1901"} : (tensor<ui64>) -> tensor<ui32>
    %cst_347 = "std.constant"() {name = "constant.1879", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %915 = "mhlo.shift_right_logical"(%886, %cst_347) {name = "shift-right-logical.1880"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %916 = "mhlo.convert"(%915) {name = "convert.1881"} : (tensor<ui64>) -> tensor<ui32>
    %917 = "mhlo.xor"(%914, %916) {name = "xor.1902"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %918 = "mhlo.xor"(%917, %cst_314) {name = "xor.1903"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %919 = "mhlo.convert"(%918) {name = "convert.1910"} : (tensor<ui32>) -> tensor<ui64>
    %cst_348 = "std.constant"() {name = "constant.1911", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %920 = "mhlo.multiply"(%919, %cst_348) {name = "multiply.1912"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %921 = "mhlo.convert"(%920) {name = "convert.1913"} : (tensor<ui64>) -> tensor<ui32>
    %922 = "mhlo.xor"(%912, %921) {name = "xor.1948"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %923 = "mhlo.xor"(%922, %866) {name = "xor.1949"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %924 = "mhlo.convert"(%923) {name = "convert.1961"} : (tensor<ui32>) -> tensor<ui64>
    %cst_349 = "std.constant"() {name = "constant.1962", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %925 = "mhlo.multiply"(%924, %cst_349) {name = "multiply.1963"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_350 = "std.constant"() {name = "constant.1965", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %926 = "mhlo.shift_right_logical"(%925, %cst_350) {name = "shift-right-logical.1966"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %927 = "mhlo.convert"(%926) {name = "convert.1967"} : (tensor<ui64>) -> tensor<ui32>
    %cst_351 = "std.constant"() {name = "constant.1914", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %928 = "mhlo.shift_right_logical"(%920, %cst_351) {name = "shift-right-logical.1915"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %929 = "mhlo.convert"(%928) {name = "convert.1916"} : (tensor<ui64>) -> tensor<ui32>
    %930 = "mhlo.convert"(%889) {name = "convert.1891"} : (tensor<ui64>) -> tensor<ui32>
    %931 = "mhlo.xor"(%929, %930) {name = "xor.1926"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %932 = "mhlo.xor"(%931, %865) {name = "xor.1927"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %933 = "mhlo.convert"(%932) {name = "convert.1939"} : (tensor<ui32>) -> tensor<ui64>
    %cst_352 = "std.constant"() {name = "constant.1940", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %934 = "mhlo.multiply"(%933, %cst_352) {name = "multiply.1941"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %935 = "mhlo.convert"(%934) {name = "convert.1942"} : (tensor<ui64>) -> tensor<ui32>
    %936 = "mhlo.xor"(%927, %935) {name = "xor.1968"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %937 = "mhlo.xor"(%936, %857) {name = "xor.1969"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %938 = "mhlo.convert"(%937) {name = "convert.1976"} : (tensor<ui32>) -> tensor<ui64>
    %cst_353 = "std.constant"() {name = "constant.1977", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %939 = "mhlo.multiply"(%938, %cst_353) {name = "multiply.1978"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_354 = "std.constant"() {name = "constant.1980", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %940 = "mhlo.shift_right_logical"(%939, %cst_354) {name = "shift-right-logical.1981"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %941 = "mhlo.convert"(%940) {name = "convert.1982"} : (tensor<ui64>) -> tensor<ui32>
    %cst_355 = "std.constant"() {name = "constant.1943", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %942 = "mhlo.shift_right_logical"(%934, %cst_355) {name = "shift-right-logical.1944"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %943 = "mhlo.convert"(%942) {name = "convert.1945"} : (tensor<ui64>) -> tensor<ui32>
    %944 = "mhlo.convert"(%900) {name = "convert.1920"} : (tensor<ui64>) -> tensor<ui32>
    %945 = "mhlo.xor"(%943, %944) {name = "xor.1946"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %946 = "mhlo.xor"(%945, %856) {name = "xor.1947"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %947 = "mhlo.convert"(%946) {name = "convert.1954"} : (tensor<ui32>) -> tensor<ui64>
    %cst_356 = "std.constant"() {name = "constant.1955", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %948 = "mhlo.multiply"(%947, %cst_356) {name = "multiply.1956"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %949 = "mhlo.convert"(%948) {name = "convert.1957"} : (tensor<ui64>) -> tensor<ui32>
    %950 = "mhlo.xor"(%941, %949) {name = "xor.1992"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %951 = "mhlo.xor"(%950, %868) {name = "xor.1993"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %952 = "mhlo.convert"(%951) {name = "convert.2005"} : (tensor<ui32>) -> tensor<ui64>
    %cst_357 = "std.constant"() {name = "constant.2006", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %953 = "mhlo.multiply"(%952, %cst_357) {name = "multiply.2007"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_358 = "std.constant"() {name = "constant.2009", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %954 = "mhlo.shift_right_logical"(%953, %cst_358) {name = "shift-right-logical.2010"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %955 = "mhlo.convert"(%954) {name = "convert.2011"} : (tensor<ui64>) -> tensor<ui32>
    %cst_359 = "std.constant"() {name = "constant.1958", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %956 = "mhlo.shift_right_logical"(%948, %cst_359) {name = "shift-right-logical.1959"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %957 = "mhlo.convert"(%956) {name = "convert.1960"} : (tensor<ui64>) -> tensor<ui32>
    %958 = "mhlo.convert"(%910) {name = "convert.1935"} : (tensor<ui64>) -> tensor<ui32>
    %959 = "mhlo.xor"(%957, %958) {name = "xor.1970"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %960 = "mhlo.xor"(%959, %867) {name = "xor.1971"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %961 = "mhlo.convert"(%960) {name = "convert.1983"} : (tensor<ui32>) -> tensor<ui64>
    %cst_360 = "std.constant"() {name = "constant.1984", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %962 = "mhlo.multiply"(%961, %cst_360) {name = "multiply.1985"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %963 = "mhlo.convert"(%962) {name = "convert.1986"} : (tensor<ui64>) -> tensor<ui32>
    %964 = "mhlo.xor"(%955, %963) {name = "xor.2012"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %965 = "mhlo.xor"(%964, %859) {name = "xor.2013"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %966 = "mhlo.convert"(%965) {name = "convert.2020"} : (tensor<ui32>) -> tensor<ui64>
    %cst_361 = "std.constant"() {name = "constant.2021", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %967 = "mhlo.multiply"(%966, %cst_361) {name = "multiply.2022"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_362 = "std.constant"() {name = "constant.2024", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %968 = "mhlo.shift_right_logical"(%967, %cst_362) {name = "shift-right-logical.2025"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %969 = "mhlo.convert"(%968) {name = "convert.2026"} : (tensor<ui64>) -> tensor<ui32>
    %cst_363 = "std.constant"() {name = "constant.1987", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %970 = "mhlo.shift_right_logical"(%962, %cst_363) {name = "shift-right-logical.1988"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %971 = "mhlo.convert"(%970) {name = "convert.1989"} : (tensor<ui64>) -> tensor<ui32>
    %972 = "mhlo.convert"(%925) {name = "convert.1964"} : (tensor<ui64>) -> tensor<ui32>
    %973 = "mhlo.xor"(%971, %972) {name = "xor.1990"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %974 = "mhlo.xor"(%973, %858) {name = "xor.1991"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %975 = "mhlo.convert"(%974) {name = "convert.1998"} : (tensor<ui32>) -> tensor<ui64>
    %cst_364 = "std.constant"() {name = "constant.1999", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %976 = "mhlo.multiply"(%975, %cst_364) {name = "multiply.2000"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %977 = "mhlo.convert"(%976) {name = "convert.2001"} : (tensor<ui64>) -> tensor<ui32>
    %978 = "mhlo.xor"(%969, %977) {name = "xor.2036"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %979 = "mhlo.xor"(%978, %870) {name = "xor.2037"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %980 = "mhlo.convert"(%979) {name = "convert.2049"} : (tensor<ui32>) -> tensor<ui64>
    %cst_365 = "std.constant"() {name = "constant.2050", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %981 = "mhlo.multiply"(%980, %cst_365) {name = "multiply.2051"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_366 = "std.constant"() {name = "constant.2053", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %982 = "mhlo.shift_right_logical"(%981, %cst_366) {name = "shift-right-logical.2054"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %983 = "mhlo.convert"(%982) {name = "convert.2055"} : (tensor<ui64>) -> tensor<ui32>
    %cst_367 = "std.constant"() {name = "constant.2002", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %984 = "mhlo.shift_right_logical"(%976, %cst_367) {name = "shift-right-logical.2003"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %985 = "mhlo.convert"(%984) {name = "convert.2004"} : (tensor<ui64>) -> tensor<ui32>
    %986 = "mhlo.convert"(%939) {name = "convert.1979"} : (tensor<ui64>) -> tensor<ui32>
    %987 = "mhlo.xor"(%985, %986) {name = "xor.2014"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %988 = "mhlo.xor"(%987, %869) {name = "xor.2015"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %989 = "mhlo.convert"(%988) {name = "convert.2027"} : (tensor<ui32>) -> tensor<ui64>
    %cst_368 = "std.constant"() {name = "constant.2028", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %990 = "mhlo.multiply"(%989, %cst_368) {name = "multiply.2029"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %991 = "mhlo.convert"(%990) {name = "convert.2030"} : (tensor<ui64>) -> tensor<ui32>
    %992 = "mhlo.xor"(%983, %991) {name = "xor.2056"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %993 = "mhlo.xor"(%992, %861) {name = "xor.2057"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %994 = "mhlo.convert"(%993) {name = "convert.2064"} : (tensor<ui32>) -> tensor<ui64>
    %cst_369 = "std.constant"() {name = "constant.2065", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %995 = "mhlo.multiply"(%994, %cst_369) {name = "multiply.2066"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_370 = "std.constant"() {name = "constant.2068", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %996 = "mhlo.shift_right_logical"(%995, %cst_370) {name = "shift-right-logical.2069"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %997 = "mhlo.convert"(%996) {name = "convert.2070"} : (tensor<ui64>) -> tensor<ui32>
    %cst_371 = "std.constant"() {name = "constant.2031", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %998 = "mhlo.shift_right_logical"(%990, %cst_371) {name = "shift-right-logical.2032"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %999 = "mhlo.convert"(%998) {name = "convert.2033"} : (tensor<ui64>) -> tensor<ui32>
    %1000 = "mhlo.convert"(%953) {name = "convert.2008"} : (tensor<ui64>) -> tensor<ui32>
    %1001 = "mhlo.xor"(%999, %1000) {name = "xor.2034"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %1002 = "mhlo.xor"(%1001, %860) {name = "xor.2035"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %1003 = "mhlo.convert"(%1002) {name = "convert.2042"} : (tensor<ui32>) -> tensor<ui64>
    %cst_372 = "std.constant"() {name = "constant.2043", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %1004 = "mhlo.multiply"(%1003, %cst_372) {name = "multiply.2044"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %1005 = "mhlo.convert"(%1004) {name = "convert.2045"} : (tensor<ui64>) -> tensor<ui32>
    %1006 = "mhlo.xor"(%997, %1005) {name = "xor.2080"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %1007 = "mhlo.xor"(%1006, %872) {name = "xor.2081"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %1008 = "mhlo.convert"(%1007) {name = "convert.2093"} : (tensor<ui32>) -> tensor<ui64>
    %cst_373 = "std.constant"() {name = "constant.2094", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %1009 = "mhlo.multiply"(%1008, %cst_373) {name = "multiply.2095"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_374 = "std.constant"() {name = "constant.2097", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %1010 = "mhlo.shift_right_logical"(%1009, %cst_374) {name = "shift-right-logical.2098"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %1011 = "mhlo.convert"(%1010) {name = "convert.2099"} : (tensor<ui64>) -> tensor<ui32>
    %cst_375 = "std.constant"() {name = "constant.2046", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %1012 = "mhlo.shift_right_logical"(%1004, %cst_375) {name = "shift-right-logical.2047"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %1013 = "mhlo.convert"(%1012) {name = "convert.2048"} : (tensor<ui64>) -> tensor<ui32>
    %1014 = "mhlo.convert"(%967) {name = "convert.2023"} : (tensor<ui64>) -> tensor<ui32>
    %1015 = "mhlo.xor"(%1013, %1014) {name = "xor.2058"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %1016 = "mhlo.xor"(%1015, %871) {name = "xor.2059"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %1017 = "mhlo.convert"(%1016) {name = "convert.2071"} : (tensor<ui32>) -> tensor<ui64>
    %cst_376 = "std.constant"() {name = "constant.2072", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
    %1018 = "mhlo.multiply"(%1017, %cst_376) {name = "multiply.2073"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %1019 = "mhlo.convert"(%1018) {name = "convert.2074"} : (tensor<ui64>) -> tensor<ui32>
    %1020 = "mhlo.xor"(%1011, %1019) {name = "xor.2100"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %1021 = "mhlo.xor"(%1020, %863) {name = "xor.2101"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %1022 = "mhlo.convert"(%1021) {name = "convert.2122"} : (tensor<ui32>) -> tensor<ui64>
    %1023 = "mhlo.convert"(%1009) {name = "convert.2096"} : (tensor<ui64>) -> tensor<ui32>
    %1024 = "mhlo.convert"(%1023) {name = "convert.2123"} : (tensor<ui32>) -> tensor<ui64>
    %cst_377 = "std.constant"() {name = "constant.2124", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %1025 = "mhlo.shift_left"(%1024, %cst_377) {name = "shift-left.2125"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %1026 = "mhlo.or"(%1022, %1025) {name = "or.2126"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %1027 = "mhlo.reshape"(%1026) {name = "reshape.2127"} : (tensor<ui64>) -> tensor<1xui64>
    %cst_378 = "std.constant"() {name = "constant.2108", value = dense<0> : tensor<ui32>} : () -> tensor<ui32>
    %1028 = "mhlo.convert"(%cst_378) {name = "convert.2109"} : (tensor<ui32>) -> tensor<ui64>
    %1029 = "mhlo.convert"(%cst_378) {name = "convert.2110"} : (tensor<ui32>) -> tensor<ui64>
    %cst_379 = "std.constant"() {name = "constant.2111", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %1030 = "mhlo.shift_left"(%1029, %cst_379) {name = "shift-left.2112"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %1031 = "mhlo.or"(%1028, %1030) {name = "or.2113"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %1032 = "mhlo.reshape"(%1031) {name = "reshape.2119"} : (tensor<ui64>) -> tensor<1xui64>
    %cst_380 = "std.constant"() {name = "constant.2075", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %1033 = "mhlo.shift_right_logical"(%1018, %cst_380) {name = "shift-right-logical.2076"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %1034 = "mhlo.convert"(%1033) {name = "convert.2077"} : (tensor<ui64>) -> tensor<ui32>
    %1035 = "mhlo.convert"(%981) {name = "convert.2052"} : (tensor<ui64>) -> tensor<ui32>
    %1036 = "mhlo.xor"(%1034, %1035) {name = "xor.2078"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %1037 = "mhlo.xor"(%1036, %862) {name = "xor.2079"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %1038 = "mhlo.convert"(%1037) {name = "convert.2086"} : (tensor<ui32>) -> tensor<ui64>
    %cst_381 = "std.constant"() {name = "constant.2087", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
    %1039 = "mhlo.multiply"(%1038, %cst_381) {name = "multiply.2088"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %cst_382 = "std.constant"() {name = "constant.2090", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %1040 = "mhlo.shift_right_logical"(%1039, %cst_382) {name = "shift-right-logical.2091"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %1041 = "mhlo.convert"(%1040) {name = "convert.2092"} : (tensor<ui64>) -> tensor<ui32>
    %1042 = "mhlo.convert"(%995) {name = "convert.2067"} : (tensor<ui64>) -> tensor<ui32>
    %1043 = "mhlo.xor"(%1041, %1042) {name = "xor.2102"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %1044 = "mhlo.xor"(%1043, %873) {name = "xor.2103"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
    %1045 = "mhlo.convert"(%1044) {name = "convert.2114"} : (tensor<ui32>) -> tensor<ui64>
    %1046 = "mhlo.convert"(%1039) {name = "convert.2089"} : (tensor<ui64>) -> tensor<ui32>
    %1047 = "mhlo.convert"(%1046) {name = "convert.2115"} : (tensor<ui32>) -> tensor<ui64>
    %cst_383 = "std.constant"() {name = "constant.2116", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
    %1048 = "mhlo.shift_left"(%1047, %cst_383) {name = "shift-left.2117"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %1049 = "mhlo.or"(%1045, %1048) {name = "or.2118"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
    %1050 = "mhlo.reshape"(%1049) {name = "reshape.2120"} : (tensor<ui64>) -> tensor<1xui64>
    %1051 = "mhlo.concatenate"(%1032, %1050) {dimension = 0 : i64} : (tensor<1xui64>, tensor<1xui64>) -> tensor<2xui64>
    %1052 = "mhlo.concatenate"(%1027, %1051) {dimension = 0 : i64} : (tensor<1xui64>, tensor<2xui64>) -> tensor<3xui64>
    %1053 = "mhlo.rng_bit_generator"(%1052) {rng_algorithm = 2 : i32} : (tensor<3xui64>) -> tuple<tensor<3xui64>, tensor<4xui32>>
    %1054 = "mhlo.get_tuple_element"(%1053) {index = 0 : i32, name = "get-tuple-element.2131"} : (tuple<tensor<3xui64>, tensor<4xui32>>) -> tensor<3xui64>
    %cst_384 = "std.constant"() {name = "constant.2179", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %cst_385 = "std.constant"() {name = "constant.2180", value = dense<-1> : tensor<i32>} : () -> tensor<i32>
    %cst_386 = "std.constant"() {name = "constant.2181", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %cst_387 = "std.constant"() {name = "constant.2182", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %cst_388 = "std.constant"() {name = "constant.2183", value = dense<-1> : tensor<i32>} : () -> tensor<i32>
    %cst_389 = "std.constant"() {name = "constant.2184", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %cst_390 = "std.constant"() {name = "constant.1837", value = dense<6.28318548> : tensor<f32>} : () -> tensor<f32>
    %1055 = "mhlo.broadcast_in_dim"(%cst_390) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1838"} : (tensor<f32>) -> tensor<2xf32>
    %1056 = "mhlo.get_tuple_element"(%853) {index = 1 : i32, name = "get-tuple-element.1818"} : (tuple<tensor<3xui64>, tensor<4xui32>>) -> tensor<4xui32>
    %cst_391 = "std.constant"() {name = "constant.1820", value = dense<9> : tensor<ui32>} : () -> tensor<ui32>
    %1057 = "mhlo.broadcast_in_dim"(%cst_391) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1821"} : (tensor<ui32>) -> tensor<4xui32>
    %1058 = "mhlo.shift_right_logical"(%1056, %1057) {name = "shift-right-logical.1822"} : (tensor<4xui32>, tensor<4xui32>) -> tensor<4xui32>
    %1059 = "mhlo.convert"(%1058) {name = "convert.1823"} : (tensor<4xui32>) -> tensor<4xf32>
    %cst_392 = "std.constant"() {name = "constant.1824", value = dense<1.1920929E-7> : tensor<f32>} : () -> tensor<f32>
    %1060 = "mhlo.broadcast_in_dim"(%cst_392) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1825"} : (tensor<f32>) -> tensor<4xf32>
    %1061 = "mhlo.multiply"(%1059, %1060) {name = "multiply.1826"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_393 = "std.constant"() {name = "constant.1559", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %cst_394 = "std.constant"() {name = "constant.1558", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %1062 = "mhlo.subtract"(%cst_393, %cst_394) {name = "subtract.1827"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    %1063 = "mhlo.broadcast_in_dim"(%1062) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1828"} : (tensor<f32>) -> tensor<4xf32>
    %1064 = "mhlo.multiply"(%1061, %1063) {name = "multiply.1829"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1065 = "mhlo.broadcast_in_dim"(%cst_394) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1830"} : (tensor<f32>) -> tensor<4xf32>
    %1066 = "mhlo.add"(%1064, %1065) {name = "add.1831"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1067 = "mhlo.slice"(%1066) {limit_indices = dense<4> : tensor<1xi64>, start_indices = dense<2> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xf32>) -> tensor<2xf32>
    %1068 = "mhlo.multiply"(%1055, %1067) {name = "multiply.1839"} : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
    %1069 = "mhlo.sine"(%1068) {name = "sine.1845"} : (tensor<2xf32>) -> tensor<2xf32>
    %cst_395 = "std.constant"() {name = "constant.1840", value = dense<-2.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %1070 = "mhlo.broadcast_in_dim"(%cst_395) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1842"} : (tensor<f32>) -> tensor<2xf32>
    %1071 = "mhlo.slice"(%1066) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xf32>) -> tensor<2xf32>
    %cst_396 = "std.constant"() {name = "constant.1834", value = dense<1.000000e-07> : tensor<f32>} : () -> tensor<f32>
    %1072 = "mhlo.broadcast_in_dim"(%cst_396) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1835"} : (tensor<f32>) -> tensor<2xf32>
    %1073 = "mhlo.maximum"(%1071, %1072) {name = "maximum.1836"} : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
    %1074 = "mhlo.log"(%1073) {name = "log.1841"} : (tensor<2xf32>) -> tensor<2xf32>
    %1075 = "mhlo.multiply"(%1070, %1074) {name = "multiply.1843"} : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
    %1076 = "mhlo.sqrt"(%1075) {name = "sqrt.1844"} : (tensor<2xf32>) -> tensor<2xf32>
    %1077 = "mhlo.multiply"(%1069, %1076) {name = "multiply.1846"} : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
    %1078 = "mhlo.cosine"(%1068) {name = "cosine.1847"} : (tensor<2xf32>) -> tensor<2xf32>
    %1079 = "mhlo.multiply"(%1078, %1076) {name = "multiply.1848"} : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
    %1080 = "mhlo.concatenate"(%1077, %1079) {dimension = 0 : i64} : (tensor<2xf32>, tensor<2xf32>) -> tensor<4xf32>
    %1081 = "mhlo.reshape"(%1080) {name = "reshape.1850"} : (tensor<4xf32>) -> tensor<4xf32>
    %cst_397 = "std.constant"() {name = "constant.1851", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %1082 = "mhlo.broadcast_in_dim"(%cst_397) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1852"} : (tensor<f32>) -> tensor<4xf32>
    %1083 = "mhlo.multiply"(%1081, %1082) {name = "multiply.1853"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_398 = "std.constant"() {name = "constant.1854", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %1084 = "mhlo.broadcast_in_dim"(%cst_398) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1855"} : (tensor<f32>) -> tensor<4xf32>
    %1085 = "mhlo.add"(%1083, %1084) {name = "add.1856"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_399 = "std.constant"() {name = "constant.2170", value = dense<5.000000e-01> : tensor<f32>} : () -> tensor<f32>
    %1086 = "mhlo.broadcast_in_dim"(%cst_399) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2171"} : (tensor<f32>) -> tensor<4xf32>
    %1087 = "mhlo.get_tuple_element"(%arg0) {index = 33 : i32, name = "get-tuple-element.650"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %1088 = "mhlo.multiply"(%1086, %1087) {name = "multiply.2172"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1089 = "mhlo.get_tuple_element"(%arg0) {index = 8 : i32, name = "get-tuple-element.625"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %1090 = "mhlo.multiply"(%1088, %1089) {name = "multiply.2177"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1091 = "mhlo.add"(%1085, %1090) {name = "add.2178"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1092 = "mhlo.get_tuple_element"(%arg0) {index = 5 : i32, name = "get-tuple-element.622"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %1093 = "mhlo.get_tuple_element"(%arg0) {index = 7 : i32, name = "get-tuple-element.624"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %1094 = "mhlo.get_tuple_element"(%arg0) {index = 12 : i32, name = "get-tuple-element.629"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %1095 = "mhlo.get_tuple_element"(%arg0) {index = 35 : i32, name = "get-tuple-element.652"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %1096 = "mhlo.get_tuple_element"(%arg0) {index = 36 : i32, name = "get-tuple-element.653"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %1097 = "mhlo.tuple"(%cst_387, %cst_388, %cst_389, %1091, %1092, %1093, %1089, %1094, %1087, %1095, %1096) {name = "tuple.2185"} : (tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>
    %1098 = "mhlo.while"(%1097) ( {
    ^bb0(%arg1: tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>):  // no predecessors
      %1253 = "std.call"(%arg1) {callee = @mcmc_sample_chain_trace_scan_while_smart_for_loop_while_dual_averaging_step_size_adaptation___init____one_step_transformed_kernel_one_step_mh_one_step_hmc_kernel_one_step_leapfrog_integrate_while_cond_514__.596} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tuple<tensor<i1>>
      %1254 = "mhlo.get_tuple_element"(%1253) {index = 0 : i32, name = "get-tuple-element.614"} : (tuple<tensor<i1>>) -> tensor<i1>
      "mhlo.return"(%1254) : (tensor<i1>) -> ()
    },  {
    ^bb0(%arg1: tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>):  // no predecessors
      %1253 = "mhlo.get_tuple_element"(%arg1) {index = 5 : i32, name = "get-tuple-element.389"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
      %1254 = "mhlo.get_tuple_element"(%arg1) {index = 6 : i32, name = "get-tuple-element.390"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
      %cst_423 = "std.constant"() {name = "constant.398", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1255 = "mhlo.broadcast_in_dim"(%cst_423) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.399"} : (tensor<f32>) -> tensor<4xf32>
      %1256 = "mhlo.convert"(%1255) {name = "convert.400"} : (tensor<4xf32>) -> tensor<4xf32>
      %cst_424 = "std.constant"() {name = "constant.401", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1257 = "mhlo.convert"(%cst_424) {name = "convert.402"} : (tensor<f32>) -> tensor<f32>
      %1258 = "mhlo.reduce"(%1256, %1257) ( {
      ^bb0(%arg2: tensor<f32>, %arg3: tensor<f32>):  // no predecessors
        %1423 = "mhlo.add"(%arg2, %arg3) {name = "add.353"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "mhlo.return"(%1423) : (tensor<f32>) -> ()
      }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
      %1259 = "mhlo.convert"(%1258) {name = "convert.404"} : (tensor<f32>) -> tensor<f32>
      %1260 = "mhlo.reshape"(%1259) {name = "reshape.405"} : (tensor<f32>) -> tensor<f32>
      %cst_425 = "std.constant"() {name = "constant.395", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1261 = "mhlo.broadcast_in_dim"(%cst_425) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.396"} : (tensor<f32>) -> tensor<4xf32>
      %1262 = "mhlo.negate"(%1261) {name = "negate.397"} : (tensor<4xf32>) -> tensor<4xf32>
      %1263 = "mhlo.convert"(%1262) {name = "convert.406"} : (tensor<4xf32>) -> tensor<4xf32>
      %cst_426 = "std.constant"() {name = "constant.407", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1264 = "mhlo.convert"(%cst_426) {name = "convert.408"} : (tensor<f32>) -> tensor<f32>
      %1265 = "mhlo.reduce"(%1263, %1264) ( {
      ^bb0(%arg2: tensor<f32>, %arg3: tensor<f32>):  // no predecessors
        %1423 = "mhlo.add"(%arg2, %arg3) {name = "add.357"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "mhlo.return"(%1423) : (tensor<f32>) -> ()
      }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
      %1266 = "mhlo.convert"(%1265) {name = "convert.410"} : (tensor<f32>) -> tensor<f32>
      %1267 = "mhlo.reshape"(%1266) {name = "reshape.411"} : (tensor<f32>) -> tensor<f32>
      %cst_427 = "std.constant"() {name = "constant.416", value = dense<4> : tensor<1xi32>} : () -> tensor<1xi32>
      %cst_428 = "std.constant"() {name = "constant.417", value = dense<0> : tensor<i32>} : () -> tensor<i32>
      %1268 = "mhlo.broadcast_in_dim"(%cst_428) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.419"} : (tensor<i32>) -> tensor<1xi32>
      %1269 = "mhlo.compare"(%cst_427, %1268) {comparison_direction = "LT", name = "compare.420"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi1>
      %cst_429 = "std.constant"() {name = "constant.412", value = dense<4> : tensor<1xi32>} : () -> tensor<1xi32>
      %cst_430 = "std.constant"() {name = "constant.413", value = dense<1> : tensor<i32>} : () -> tensor<i32>
      %1270 = "mhlo.broadcast_in_dim"(%cst_430) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.414"} : (tensor<i32>) -> tensor<1xi32>
      %1271 = "mhlo.maximum"(%cst_429, %1270) {name = "maximum.415"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
      %1272 = "mhlo.broadcast_in_dim"(%cst_428) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.421"} : (tensor<i32>) -> tensor<1xi32>
      %1273 = "mhlo.compare"(%1271, %1272) {comparison_direction = "LT", name = "compare.422"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi1>
      %1274 = "mhlo.compare"(%1269, %1273) {comparison_direction = "NE", name = "compare.423"} : (tensor<1xi1>, tensor<1xi1>) -> tensor<1xi1>
      %1275 = "mhlo.abs"(%cst_427) {name = "abs.424"} : (tensor<1xi32>) -> tensor<1xi32>
      %1276 = "mhlo.abs"(%1271) {name = "abs.425"} : (tensor<1xi32>) -> tensor<1xi32>
      %1277 = "mhlo.add"(%1275, %1276) {name = "add.426"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
      %cst_431 = "std.constant"() {name = "constant.418", value = dense<1> : tensor<i32>} : () -> tensor<i32>
      %1278 = "mhlo.broadcast_in_dim"(%cst_431) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.427"} : (tensor<i32>) -> tensor<1xi32>
      %1279 = "mhlo.subtract"(%1277, %1278) {name = "subtract.428"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
      %1280 = "mhlo.negate"(%1279) {name = "negate.429"} : (tensor<1xi32>) -> tensor<1xi32>
      %1281 = "mhlo.divide"(%1280, %1276) {name = "divide.430"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
      %1282 = "mhlo.divide"(%cst_427, %1271) {name = "divide.431"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
      %1283 = "mhlo.select"(%1274, %1281, %1282) {name = "select.432"} : (tensor<1xi1>, tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
      %cst_432 = "std.constant"() {name = "constant.433", value = dense<-5.000000e-01> : tensor<f32>} : () -> tensor<f32>
      %1284 = "mhlo.broadcast_in_dim"(%cst_432) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.436"} : (tensor<f32>) -> tensor<4xf32>
      %cst_433 = "std.constant"() {name = "constant.434", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1285 = "mhlo.broadcast_in_dim"(%cst_433) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.435"} : (tensor<f32>) -> tensor<4xf32>
      %1286 = "mhlo.multiply"(%1284, %1285) {name = "multiply.437"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %cst_434 = "std.constant"() {name = "constant.438", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1287 = "mhlo.broadcast_in_dim"(%cst_434) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.441"} : (tensor<f32>) -> tensor<4xf32>
      %cst_435 = "std.constant"() {name = "constant.439", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1288 = "mhlo.broadcast_in_dim"(%cst_435) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.440"} : (tensor<f32>) -> tensor<4xf32>
      %1289 = "mhlo.multiply"(%1287, %1288) {name = "multiply.442"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %cst_436 = "std.constant"() {name = "constant.503", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1290 = "mhlo.broadcast_in_dim"(%cst_436) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.504"} : (tensor<f32>) -> tensor<4xf32>
      %1291 = "mhlo.get_tuple_element"(%arg1) {index = 4 : i32, name = "get-tuple-element.388"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
      %1292 = "mhlo.get_tuple_element"(%arg1) {index = 8 : i32, name = "get-tuple-element.392"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
      %1293 = "mhlo.get_tuple_element"(%arg1) {index = 3 : i32, name = "get-tuple-element.387"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
      %1294 = "mhlo.multiply"(%1292, %1293) {name = "multiply.455"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1295 = "mhlo.add"(%1291, %1294) {name = "add.456"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1296 = "mhlo.exponential"(%1295) {name = "exponential.486"} : (tensor<4xf32>) -> tensor<4xf32>
      %1297 = "mhlo.log"(%1296) {name = "log.493"} : (tensor<4xf32>) -> tensor<4xf32>
      %1298 = "mhlo.get_tuple_element"(%arg1) {index = 9 : i32, name = "get-tuple-element.393"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<f32>
      %1299 = "mhlo.broadcast_in_dim"(%1298) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.499"} : (tensor<f32>) -> tensor<4xf32>
      %1300 = "mhlo.divide"(%1297, %1299) {name = "divide.500"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1301 = "mhlo.get_tuple_element"(%arg1) {index = 10 : i32, name = "get-tuple-element.394"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<f32>
      %1302 = "mhlo.divide"(%1301, %1298) {name = "divide.450"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1303 = "mhlo.broadcast_in_dim"(%1302) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.501"} : (tensor<f32>) -> tensor<4xf32>
      %1304 = "mhlo.subtract"(%1300, %1303) {name = "subtract.502"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1305 = "mhlo.multiply"(%1290, %1304) {name = "multiply.505"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1306 = "mhlo.convert"(%1305) {name = "convert.506"} : (tensor<4xf32>) -> tensor<4xf32>
      %cst_437 = "std.constant"() {name = "constant.507", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1307 = "mhlo.convert"(%cst_437) {name = "convert.508"} : (tensor<f32>) -> tensor<f32>
      %1308 = "mhlo.reduce"(%1306, %1307) ( {
      ^bb0(%arg2: tensor<f32>, %arg3: tensor<f32>):  // no predecessors
        %1423 = "mhlo.add"(%arg2, %arg3) {name = "add.361"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "mhlo.return"(%1423) : (tensor<f32>) -> ()
      }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
      %1309 = "mhlo.convert"(%1308) {name = "convert.510"} : (tensor<f32>) -> tensor<f32>
      %1310 = "mhlo.reshape"(%1309) {name = "reshape.511"} : (tensor<f32>) -> tensor<f32>
      %1311 = "mhlo.negate"(%1310) {name = "negate.512"} : (tensor<f32>) -> tensor<f32>
      %1312 = "mhlo.negate"(%1297) {name = "negate.494"} : (tensor<4xf32>) -> tensor<4xf32>
      %1313 = "mhlo.broadcast_in_dim"(%1298) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.495"} : (tensor<f32>) -> tensor<4xf32>
      %1314 = "mhlo.divide"(%1312, %1313) {name = "divide.496"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1315 = "mhlo.broadcast_in_dim"(%1298) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.497"} : (tensor<f32>) -> tensor<4xf32>
      %1316 = "mhlo.divide"(%1314, %1315) {name = "divide.498"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1317 = "mhlo.multiply"(%1305, %1316) {name = "multiply.527"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1318 = "mhlo.convert"(%1317) {name = "convert.528"} : (tensor<4xf32>) -> tensor<4xf32>
      %cst_438 = "std.constant"() {name = "constant.529", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1319 = "mhlo.convert"(%cst_438) {name = "convert.530"} : (tensor<f32>) -> tensor<f32>
      %1320 = "mhlo.reduce"(%1318, %1319) ( {
      ^bb0(%arg2: tensor<f32>, %arg3: tensor<f32>):  // no predecessors
        %1423 = "mhlo.add"(%arg2, %arg3) {name = "add.365"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "mhlo.return"(%1423) : (tensor<f32>) -> ()
      }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
      %1321 = "mhlo.convert"(%1320) {name = "convert.532"} : (tensor<f32>) -> tensor<f32>
      %1322 = "mhlo.reshape"(%1321) {name = "reshape.533"} : (tensor<f32>) -> tensor<f32>
      %cst_439 = "std.constant"() {name = "constant.537", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1323 = "mhlo.broadcast_in_dim"(%cst_439) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.538"} : (tensor<f32>) -> tensor<4xf32>
      %1324 = "mhlo.broadcast_in_dim"(%1302) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.534"} : (tensor<f32>) -> tensor<4xf32>
      %1325 = "mhlo.subtract"(%1300, %1324) {name = "subtract.535"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1326 = "mhlo.multiply"(%1325, %1325) {name = "multiply.536"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1327 = "mhlo.multiply"(%1323, %1326) {name = "multiply.539"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1328 = "mhlo.convert"(%1327) {name = "convert.540"} : (tensor<4xf32>) -> tensor<4xf32>
      %cst_440 = "std.constant"() {name = "constant.541", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1329 = "mhlo.convert"(%cst_440) {name = "convert.542"} : (tensor<f32>) -> tensor<f32>
      %1330 = "mhlo.reduce"(%1328, %1329) ( {
      ^bb0(%arg2: tensor<f32>, %arg3: tensor<f32>):  // no predecessors
        %1423 = "mhlo.add"(%arg2, %arg3) {name = "add.369"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "mhlo.return"(%1423) : (tensor<f32>) -> ()
      }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
      %1331 = "mhlo.convert"(%1330) {name = "convert.544"} : (tensor<f32>) -> tensor<f32>
      %1332 = "mhlo.reshape"(%1331) {name = "reshape.545"} : (tensor<f32>) -> tensor<f32>
      %cst_441 = "std.constant"() {name = "constant.552", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1333 = "mhlo.broadcast_in_dim"(%cst_441) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.553"} : (tensor<f32>) -> tensor<4xf32>
      %1334 = "mhlo.log"(%1296) {name = "log.551"} : (tensor<4xf32>) -> tensor<4xf32>
      %1335 = "mhlo.multiply"(%1333, %1334) {name = "multiply.554"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1336 = "mhlo.convert"(%1335) {name = "convert.555"} : (tensor<4xf32>) -> tensor<4xf32>
      %cst_442 = "std.constant"() {name = "constant.556", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1337 = "mhlo.convert"(%cst_442) {name = "convert.557"} : (tensor<f32>) -> tensor<f32>
      %1338 = "mhlo.reduce"(%1336, %1337) ( {
      ^bb0(%arg2: tensor<f32>, %arg3: tensor<f32>):  // no predecessors
        %1423 = "mhlo.add"(%arg2, %arg3) {name = "add.373"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "mhlo.return"(%1423) : (tensor<f32>) -> ()
      }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
      %1339 = "mhlo.convert"(%1338) {name = "convert.559"} : (tensor<f32>) -> tensor<f32>
      %1340 = "mhlo.reshape"(%1339) {name = "reshape.560"} : (tensor<f32>) -> tensor<f32>
      %cst_443 = "std.constant"() {name = "constant.564", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1341 = "mhlo.broadcast_in_dim"(%cst_443) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.565"} : (tensor<f32>) -> tensor<4xf32>
      %cst_444 = "std.constant"() {name = "constant.561", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1342 = "mhlo.broadcast_in_dim"(%cst_444) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.562"} : (tensor<f32>) -> tensor<4xf32>
      %1343 = "mhlo.multiply"(%1342, %1334) {name = "multiply.563"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1344 = "mhlo.multiply"(%1341, %1343) {name = "multiply.566"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1345 = "mhlo.convert"(%1344) {name = "convert.567"} : (tensor<4xf32>) -> tensor<4xf32>
      %cst_445 = "std.constant"() {name = "constant.568", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1346 = "mhlo.convert"(%cst_445) {name = "convert.569"} : (tensor<f32>) -> tensor<f32>
      %1347 = "mhlo.reduce"(%1345, %1346) ( {
      ^bb0(%arg2: tensor<f32>, %arg3: tensor<f32>):  // no predecessors
        %1423 = "mhlo.add"(%arg2, %arg3) {name = "add.377"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "mhlo.return"(%1423) : (tensor<f32>) -> ()
      }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
      %1348 = "mhlo.convert"(%1347) {name = "convert.571"} : (tensor<f32>) -> tensor<f32>
      %1349 = "mhlo.reshape"(%1348) {name = "reshape.572"} : (tensor<f32>) -> tensor<f32>
      %cst_446 = "std.constant"() {name = "constant.546", value = dense<-5.000000e-01> : tensor<f32>} : () -> tensor<f32>
      %1350 = "mhlo.broadcast_in_dim"(%cst_446) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.547"} : (tensor<f32>) -> tensor<4xf32>
      %1351 = "mhlo.multiply"(%1350, %1326) {name = "multiply.548"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %cst_447 = "std.constant"() {name = "constant.447", value = dense<0.918938517> : tensor<f32>} : () -> tensor<f32>
      %1352 = "mhlo.log"(%1298) {name = "log.446"} : (tensor<f32>) -> tensor<f32>
      %1353 = "mhlo.add"(%cst_447, %1352) {name = "add.448"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1354 = "mhlo.broadcast_in_dim"(%1353) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.549"} : (tensor<f32>) -> tensor<4xf32>
      %1355 = "mhlo.subtract"(%1351, %1354) {name = "subtract.550"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %cst_448 = "std.constant"() {name = "constant.573", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1356 = "mhlo.broadcast_in_dim"(%cst_448) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.574"} : (tensor<f32>) -> tensor<4xf32>
      %1357 = "mhlo.multiply"(%1356, %1343) {name = "multiply.575"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1358 = "mhlo.add"(%1355, %1357) {name = "add.576"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %cst_449 = "std.constant"() {name = "constant.582", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1359 = "mhlo.broadcast_in_dim"(%cst_449) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.583"} : (tensor<f32>) -> tensor<4xf32>
      %cst_450 = "std.constant"() {name = "constant.578", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1360 = "mhlo.broadcast_in_dim"(%cst_450) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.579"} : (tensor<f32>) -> tensor<4xf32>
      %1361 = "mhlo.negate"(%1295) {name = "negate.577"} : (tensor<4xf32>) -> tensor<4xf32>
      %1362 = "mhlo.multiply"(%1360, %1361) {name = "multiply.580"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1363 = "mhlo.negate"(%1362) {name = "negate.581"} : (tensor<4xf32>) -> tensor<4xf32>
      %1364 = "mhlo.add"(%1359, %1363) {name = "add.584"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1365 = "mhlo.add"(%1358, %1364) {name = "add.585"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %cst_451 = "std.constant"() {name = "constant.586", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1366 = "mhlo.broadcast_in_dim"(%cst_451) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.587"} : (tensor<f32>) -> tensor<4xf32>
      %1367 = "mhlo.multiply"(%1366, %1361) {name = "multiply.588"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1368 = "mhlo.convert"(%1367) {name = "convert.589"} : (tensor<4xf32>) -> tensor<4xf32>
      %cst_452 = "std.constant"() {name = "constant.590", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1369 = "mhlo.convert"(%cst_452) {name = "convert.591"} : (tensor<f32>) -> tensor<f32>
      %1370 = "mhlo.reduce"(%1368, %1369) ( {
      ^bb0(%arg2: tensor<f32>, %arg3: tensor<f32>):  // no predecessors
        %1423 = "mhlo.add"(%arg2, %arg3) {name = "add.381"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "mhlo.return"(%1423) : (tensor<f32>) -> ()
      }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
      %1371 = "mhlo.convert"(%1370) {name = "convert.593"} : (tensor<f32>) -> tensor<f32>
      %1372 = "mhlo.reshape"(%1371) {name = "reshape.594"} : (tensor<f32>) -> tensor<f32>
      %1373 = "mhlo.get_tuple_element"(%arg1) {index = 0 : i32, name = "get-tuple-element.384"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
      %cst_453 = "std.constant"() {name = "constant.451", value = dense<1> : tensor<i32>} : () -> tensor<i32>
      %1374 = "mhlo.add"(%1373, %cst_453) {name = "add.452"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
      %1375 = "mhlo.get_tuple_element"(%arg1) {index = 1 : i32, name = "get-tuple-element.385"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
      %1376 = "mhlo.get_tuple_element"(%arg1) {index = 2 : i32, name = "get-tuple-element.386"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
      %cst_454 = "std.constant"() {name = "constant.453", value = dense<1> : tensor<i32>} : () -> tensor<i32>
      %1377 = "mhlo.add"(%1376, %cst_454) {name = "add.454"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
      %cst_455 = "std.constant"() {name = "constant.522", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1378 = "mhlo.broadcast_in_dim"(%cst_455) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.523"} : (tensor<f32>) -> tensor<4xf32>
      %cst_456 = "std.constant"() {name = "constant.490", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1379 = "mhlo.broadcast_in_dim"(%cst_456) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.491"} : (tensor<f32>) -> tensor<4xf32>
      %cst_457 = "std.constant"() {name = "constant.487", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1380 = "mhlo.broadcast_in_dim"(%cst_457) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.488"} : (tensor<f32>) -> tensor<4xf32>
      %1381 = "mhlo.divide"(%1380, %1296) {name = "divide.489"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1382 = "mhlo.multiply"(%1379, %1381) {name = "multiply.492"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1383 = "mhlo.broadcast_in_dim"(%1298) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.513"} : (tensor<f32>) -> tensor<4xf32>
      %1384 = "mhlo.divide"(%1305, %1383) {name = "divide.514"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1385 = "mhlo.reshape"(%1384) {name = "reshape.515"} : (tensor<4xf32>) -> tensor<4xf32>
      %cst_458 = "std.constant"() {name = "constant.516", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1386 = "mhlo.broadcast_in_dim"(%cst_458) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.517"} : (tensor<f32>) -> tensor<4xf32>
      %1387 = "mhlo.divide"(%1386, %1296) {name = "divide.518"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1388 = "mhlo.multiply"(%1385, %1387) {name = "multiply.519"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1389 = "mhlo.add"(%1382, %1388) {name = "add.520"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1390 = "mhlo.multiply"(%1389, %1296) {name = "multiply.521"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1391 = "mhlo.add"(%1378, %1390) {name = "add.524"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1392 = "mhlo.multiply"(%1292, %1391) {name = "multiply.525"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1393 = "mhlo.add"(%1293, %1392) {name = "add.526"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %cst_459 = "std.constant"() {name = "constant.464", value = dense<-5.000000e-01> : tensor<f32>} : () -> tensor<f32>
      %1394 = "mhlo.broadcast_in_dim"(%cst_459) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.465"} : (tensor<f32>) -> tensor<4xf32>
      %1395 = "mhlo.exponential"(%1295) {name = "exponential.457"} : (tensor<4xf32>) -> tensor<4xf32>
      %1396 = "mhlo.log"(%1395) {name = "log.458"} : (tensor<4xf32>) -> tensor<4xf32>
      %1397 = "mhlo.broadcast_in_dim"(%1298) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.459"} : (tensor<f32>) -> tensor<4xf32>
      %1398 = "mhlo.divide"(%1396, %1397) {name = "divide.460"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1399 = "mhlo.divide"(%1301, %1298) {name = "divide.449"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1400 = "mhlo.broadcast_in_dim"(%1399) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.461"} : (tensor<f32>) -> tensor<4xf32>
      %1401 = "mhlo.subtract"(%1398, %1400) {name = "subtract.462"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1402 = "mhlo.multiply"(%1401, %1401) {name = "multiply.463"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1403 = "mhlo.multiply"(%1394, %1402) {name = "multiply.466"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %cst_460 = "std.constant"() {name = "constant.444", value = dense<0.918938517> : tensor<f32>} : () -> tensor<f32>
      %1404 = "mhlo.log"(%1298) {name = "log.443"} : (tensor<f32>) -> tensor<f32>
      %1405 = "mhlo.add"(%cst_460, %1404) {name = "add.445"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1406 = "mhlo.broadcast_in_dim"(%1405) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.467"} : (tensor<f32>) -> tensor<4xf32>
      %1407 = "mhlo.subtract"(%1403, %1406) {name = "subtract.468"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %cst_461 = "std.constant"() {name = "constant.473", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1408 = "mhlo.broadcast_in_dim"(%cst_461) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.474"} : (tensor<f32>) -> tensor<4xf32>
      %cst_462 = "std.constant"() {name = "constant.470", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1409 = "mhlo.broadcast_in_dim"(%cst_462) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.471"} : (tensor<f32>) -> tensor<4xf32>
      %1410 = "mhlo.log"(%1395) {name = "log.469"} : (tensor<4xf32>) -> tensor<4xf32>
      %1411 = "mhlo.multiply"(%1409, %1410) {name = "multiply.472"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1412 = "mhlo.multiply"(%1408, %1411) {name = "multiply.475"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1413 = "mhlo.add"(%1407, %1412) {name = "add.476"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %cst_463 = "std.constant"() {name = "constant.482", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1414 = "mhlo.broadcast_in_dim"(%cst_463) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.483"} : (tensor<f32>) -> tensor<4xf32>
      %cst_464 = "std.constant"() {name = "constant.478", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1415 = "mhlo.broadcast_in_dim"(%cst_464) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.479"} : (tensor<f32>) -> tensor<4xf32>
      %1416 = "mhlo.negate"(%1295) {name = "negate.477"} : (tensor<4xf32>) -> tensor<4xf32>
      %1417 = "mhlo.multiply"(%1415, %1416) {name = "multiply.480"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1418 = "mhlo.negate"(%1417) {name = "negate.481"} : (tensor<4xf32>) -> tensor<4xf32>
      %1419 = "mhlo.add"(%1414, %1418) {name = "add.484"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1420 = "mhlo.add"(%1413, %1419) {name = "add.485"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1421 = "mhlo.get_tuple_element"(%arg1) {index = 7 : i32, name = "get-tuple-element.391"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
      %1422 = "mhlo.tuple"(%1374, %1375, %1377, %1393, %1295, %1420, %1391, %1421, %1292, %1298, %1301) {name = "tuple.595"} : (tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>
      "mhlo.return"(%1422) : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> ()
    }) : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>
    %1099 = "mhlo.get_tuple_element"(%1098) {index = 0 : i32, name = "get-tuple-element.2187"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
    %1100 = "mhlo.get_tuple_element"(%1098) {index = 1 : i32, name = "get-tuple-element.2188"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
    %1101 = "mhlo.get_tuple_element"(%1098) {index = 2 : i32, name = "get-tuple-element.2189"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
    %1102 = "mhlo.get_tuple_element"(%1098) {index = 3 : i32, name = "get-tuple-element.2190"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
    %1103 = "mhlo.get_tuple_element"(%1098) {index = 4 : i32, name = "get-tuple-element.2191"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
    %1104 = "mhlo.get_tuple_element"(%1098) {index = 5 : i32, name = "get-tuple-element.2192"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
    %1105 = "mhlo.get_tuple_element"(%1098) {index = 6 : i32, name = "get-tuple-element.2193"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
    %1106 = "mhlo.get_tuple_element"(%1098) {index = 7 : i32, name = "get-tuple-element.2194"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
    %1107 = "mhlo.get_tuple_element"(%1098) {index = 8 : i32, name = "get-tuple-element.2195"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
    %1108 = "mhlo.get_tuple_element"(%1098) {index = 9 : i32, name = "get-tuple-element.2196"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<f32>
    %1109 = "mhlo.get_tuple_element"(%1098) {index = 10 : i32, name = "get-tuple-element.2197"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<f32>
    %1110 = "mhlo.tuple"(%1099, %1100, %1101, %1102, %1103, %1104, %1105, %1106, %1107, %1108, %1109) {name = "tuple.2198"} : (tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>
    %1111 = "mhlo.get_tuple_element"(%1110) {index = 0 : i32, name = "get-tuple-element.2199"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
    %1112 = "mhlo.get_tuple_element"(%1110) {index = 1 : i32, name = "get-tuple-element.2200"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
    %1113 = "mhlo.get_tuple_element"(%1110) {index = 2 : i32, name = "get-tuple-element.2201"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
    %1114 = "mhlo.get_tuple_element"(%1110) {index = 7 : i32, name = "get-tuple-element.2206"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
    %1115 = "mhlo.get_tuple_element"(%1110) {index = 8 : i32, name = "get-tuple-element.2207"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
    %1116 = "mhlo.get_tuple_element"(%1110) {index = 9 : i32, name = "get-tuple-element.2208"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<f32>
    %1117 = "mhlo.get_tuple_element"(%1110) {index = 10 : i32, name = "get-tuple-element.2209"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<f32>
    %1118 = "mhlo.get_tuple_element"(%arg0) {index = 0 : i32, name = "get-tuple-element.617"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %cst_400 = "std.constant"() {name = "constant.721", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %1119 = "mhlo.add"(%1118, %cst_400) {name = "add.722"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
    %1120 = "mhlo.get_tuple_element"(%arg0) {index = 1 : i32, name = "get-tuple-element.618"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %1121 = "mhlo.get_tuple_element"(%arg0) {index = 2 : i32, name = "get-tuple-element.619"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %cst_401 = "std.constant"() {name = "constant.723", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %1122 = "mhlo.add"(%1121, %cst_401) {name = "add.724"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
    %1123 = "mhlo.slice"(%270) {limit_indices = dense<2> : tensor<2xi64>, start_indices = dense<[1, 0]> : tensor<2xi64>, strides = dense<1> : tensor<2xi64>} : (tensor<2x2xi32>) -> tensor<1x2xi32>
    %1124 = "mhlo.reshape"(%1123) {name = "reshape.999"} : (tensor<1x2xi32>) -> tensor<2xi32>
    %1125 = "mhlo.get_tuple_element"(%1053) {index = 1 : i32, name = "get-tuple-element.2130"} : (tuple<tensor<3xui64>, tensor<4xui32>>) -> tensor<4xui32>
    %cst_402 = "std.constant"() {name = "constant.2132", value = dense<9> : tensor<ui32>} : () -> tensor<ui32>
    %1126 = "mhlo.broadcast_in_dim"(%cst_402) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2133"} : (tensor<ui32>) -> tensor<4xui32>
    %1127 = "mhlo.shift_right_logical"(%1125, %1126) {name = "shift-right-logical.2134"} : (tensor<4xui32>, tensor<4xui32>) -> tensor<4xui32>
    %1128 = "mhlo.convert"(%1127) {name = "convert.2135"} : (tensor<4xui32>) -> tensor<4xf32>
    %cst_403 = "std.constant"() {name = "constant.2136", value = dense<1.1920929E-7> : tensor<f32>} : () -> tensor<f32>
    %1129 = "mhlo.broadcast_in_dim"(%cst_403) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2137"} : (tensor<f32>) -> tensor<4xf32>
    %1130 = "mhlo.multiply"(%1128, %1129) {name = "multiply.2138"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_404 = "std.constant"() {name = "constant.1861", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %cst_405 = "std.constant"() {name = "constant.1860", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %1131 = "mhlo.subtract"(%cst_404, %cst_405) {name = "subtract.2139"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    %1132 = "mhlo.broadcast_in_dim"(%1131) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2140"} : (tensor<f32>) -> tensor<4xf32>
    %1133 = "mhlo.multiply"(%1130, %1132) {name = "multiply.2141"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1134 = "mhlo.broadcast_in_dim"(%cst_405) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2142"} : (tensor<f32>) -> tensor<4xf32>
    %1135 = "mhlo.add"(%1133, %1134) {name = "add.2143"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_406 = "std.constant"() {name = "constant.2144", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %1136 = "mhlo.broadcast_in_dim"(%cst_406) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2145"} : (tensor<f32>) -> tensor<4xf32>
    %1137 = "mhlo.multiply"(%1135, %1136) {name = "multiply.2146"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_407 = "std.constant"() {name = "constant.2147", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %1138 = "mhlo.broadcast_in_dim"(%cst_407) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2148"} : (tensor<f32>) -> tensor<4xf32>
    %1139 = "mhlo.add"(%1137, %1138) {name = "add.2149"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1140 = "mhlo.log"(%1139) {name = "log.2150"} : (tensor<4xf32>) -> tensor<4xf32>
    %1141 = "mhlo.get_tuple_element"(%1110) {index = 5 : i32, name = "get-tuple-element.2204"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
    %1142 = "mhlo.negate"(%1093) {name = "negate.2176"} : (tensor<4xf32>) -> tensor<4xf32>
    %1143 = "mhlo.add"(%1141, %1142) {name = "add.2224"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_408 = "std.constant"() {name = "constant.2221", value = dense<5.000000e-01> : tensor<f32>} : () -> tensor<f32>
    %1144 = "mhlo.broadcast_in_dim"(%cst_408) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2222"} : (tensor<f32>) -> tensor<4xf32>
    %cst_409 = "std.constant"() {name = "constant.1857", value = dense<2.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %1145 = "mhlo.broadcast_in_dim"(%cst_409) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1858"} : (tensor<f32>) -> tensor<4xf32>
    %1146 = "mhlo.power"(%1085, %1145) {name = "power.1859"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1147 = "mhlo.get_tuple_element"(%1110) {index = 3 : i32, name = "get-tuple-element.2202"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
    %cst_410 = "std.constant"() {name = "constant.2173", value = dense<5.000000e-01> : tensor<f32>} : () -> tensor<f32>
    %1148 = "mhlo.broadcast_in_dim"(%cst_410) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2174"} : (tensor<f32>) -> tensor<4xf32>
    %1149 = "mhlo.multiply"(%1148, %1087) {name = "multiply.2175"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1150 = "mhlo.get_tuple_element"(%1110) {index = 6 : i32, name = "get-tuple-element.2205"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
    %1151 = "mhlo.multiply"(%1149, %1150) {name = "multiply.2210"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1152 = "mhlo.subtract"(%1147, %1151) {name = "subtract.2211"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_411 = "std.constant"() {name = "constant.2212", value = dense<2.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %1153 = "mhlo.broadcast_in_dim"(%cst_411) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2213"} : (tensor<f32>) -> tensor<4xf32>
    %1154 = "mhlo.power"(%1152, %1153) {name = "power.2214"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1155 = "mhlo.negate"(%1154) {name = "negate.2215"} : (tensor<4xf32>) -> tensor<4xf32>
    %1156 = "mhlo.add"(%1146, %1155) {name = "add.2216"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1157 = "mhlo.is_finite"(%1156) {name = "is-finite.2217"} : (tensor<4xf32>) -> tensor<4xi1>
    %cst_412 = "std.constant"() {name = "constant.2218", value = dense<0xFF800000> : tensor<f32>} : () -> tensor<f32>
    %1158 = "mhlo.broadcast_in_dim"(%cst_412) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2219"} : (tensor<f32>) -> tensor<4xf32>
    %1159 = "mhlo.select"(%1157, %1156, %1158) {name = "select.2220"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1160 = "mhlo.multiply"(%1144, %1159) {name = "multiply.2223"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1161 = "mhlo.add"(%1143, %1160) {name = "add.2225"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1162 = "mhlo.is_finite"(%1161) {name = "is-finite.2226"} : (tensor<4xf32>) -> tensor<4xi1>
    %cst_413 = "std.constant"() {name = "constant.2227", value = dense<0xFF800000> : tensor<f32>} : () -> tensor<f32>
    %1163 = "mhlo.broadcast_in_dim"(%cst_413) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2228"} : (tensor<f32>) -> tensor<4xf32>
    %1164 = "mhlo.select"(%1162, %1161, %1163) {name = "select.2229"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1165 = "mhlo.compare"(%1140, %1164) {comparison_direction = "LT", name = "compare.2279"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xi1>
    %1166 = "mhlo.reshape"(%1165) {name = "reshape.2288"} : (tensor<4xi1>) -> tensor<4xi1>
    %1167 = "mhlo.get_tuple_element"(%1110) {index = 4 : i32, name = "get-tuple-element.2203"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
    %1168 = "mhlo.select"(%1166, %1167, %1092) {name = "select.2289"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1169 = "mhlo.exponential"(%1168) {name = "exponential.2290"} : (tensor<4xf32>) -> tensor<4xf32>
    %1170 = "mhlo.reshape"(%1165) {name = "reshape.2280"} : (tensor<4xi1>) -> tensor<4xi1>
    %1171 = "mhlo.get_tuple_element"(%arg0) {index = 6 : i32, name = "get-tuple-element.623"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %1172 = "mhlo.select"(%1170, %1160, %1171) {name = "select.2281"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1173 = "mhlo.reshape"(%1165) {name = "reshape.2282"} : (tensor<4xi1>) -> tensor<4xi1>
    %1174 = "mhlo.select"(%1173, %1141, %1093) {name = "select.2283"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1175 = "mhlo.reshape"(%1165) {name = "reshape.2284"} : (tensor<4xi1>) -> tensor<4xi1>
    %1176 = "mhlo.select"(%1175, %1150, %1089) {name = "select.2285"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1177 = "mhlo.reshape"(%1165) {name = "reshape.2286"} : (tensor<4xi1>) -> tensor<4xi1>
    %1178 = "mhlo.get_tuple_element"(%arg0) {index = 9 : i32, name = "get-tuple-element.626"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %1179 = "mhlo.select"(%1177, %1085, %1178) {name = "select.2291"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1180 = "mhlo.reshape"(%1165) {name = "reshape.2287"} : (tensor<4xi1>) -> tensor<4xi1>
    %1181 = "mhlo.get_tuple_element"(%arg0) {index = 10 : i32, name = "get-tuple-element.627"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %1182 = "mhlo.select"(%1180, %1152, %1181) {name = "select.2292"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1183 = "mhlo.get_tuple_element"(%arg0) {index = 25 : i32, name = "get-tuple-element.642"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %1184 = "mhlo.get_tuple_element"(%arg0) {index = 26 : i32, name = "get-tuple-element.643"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %1185 = "mhlo.get_tuple_element"(%arg0) {index = 27 : i32, name = "get-tuple-element.644"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %1186 = "mhlo.get_tuple_element"(%arg0) {index = 28 : i32, name = "get-tuple-element.645"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %1187 = "mhlo.get_tuple_element"(%arg0) {index = 29 : i32, name = "get-tuple-element.646"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %1188 = "mhlo.get_tuple_element"(%arg0) {index = 30 : i32, name = "get-tuple-element.647"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %1189 = "mhlo.broadcast_in_dim"(%1183) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2152"} : (tensor<f32>) -> tensor<4xf32>
    %1190 = "mhlo.add"(%1188, %1189) {name = "add.2153"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1191 = "mhlo.is_finite"(%1164) {name = "is-finite.2230"} : (tensor<4xf32>) -> tensor<4xi1>
    %cst_414 = "std.constant"() {name = "constant.2231", value = dense<0xFF800000> : tensor<f32>} : () -> tensor<f32>
    %1192 = "mhlo.broadcast_in_dim"(%cst_414) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2232"} : (tensor<f32>) -> tensor<4xf32>
    %1193 = "mhlo.select"(%1191, %1164, %1192) {name = "select.2233"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_415 = "std.constant"() {name = "constant.2234", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %1194 = "mhlo.broadcast_in_dim"(%cst_415) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2235"} : (tensor<f32>) -> tensor<4xf32>
    %1195 = "mhlo.minimum"(%1193, %1194) {name = "minimum.2236"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1196 = "mhlo.is_finite"(%1195) {name = "is-finite.2237"} : (tensor<4xf32>) -> tensor<4xi1>
    %cst_416 = "std.constant"() {name = "constant.2238", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %1197 = "mhlo.broadcast_in_dim"(%cst_416) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2239"} : (tensor<f32>) -> tensor<4xf32>
    %1198 = "mhlo.select"(%1196, %1195, %1197) {name = "select.2240"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1199 = "mhlo.subtract"(%1195, %1198) {name = "subtract.2241"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1200 = "mhlo.exponential"(%1199) {name = "exponential.2242"} : (tensor<4xf32>) -> tensor<4xf32>
    %1201 = "mhlo.log"(%1200) {name = "log.2243"} : (tensor<4xf32>) -> tensor<4xf32>
    %1202 = "mhlo.reshape"(%1198) {name = "reshape.2244"} : (tensor<4xf32>) -> tensor<4xf32>
    %1203 = "mhlo.add"(%1201, %1202) {name = "add.2245"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_417 = "std.constant"() {name = "constant.2246", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %1204 = "mhlo.broadcast_in_dim"(%cst_417) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2247"} : (tensor<f32>) -> tensor<4xf32>
    %1205 = "mhlo.subtract"(%1203, %1204) {name = "subtract.2248"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1206 = "mhlo.is_finite"(%1205) {name = "is-finite.2249"} : (tensor<4xf32>) -> tensor<4xi1>
    %cst_418 = "std.constant"() {name = "constant.2250", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %1207 = "mhlo.broadcast_in_dim"(%cst_418) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2251"} : (tensor<f32>) -> tensor<4xf32>
    %1208 = "mhlo.select"(%1206, %1205, %1207) {name = "select.2252"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1209 = "mhlo.subtract"(%1205, %1208) {name = "subtract.2253"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1210 = "mhlo.exponential"(%1209) {name = "exponential.2254"} : (tensor<4xf32>) -> tensor<4xf32>
    %1211 = "mhlo.log"(%1210) {name = "log.2255"} : (tensor<4xf32>) -> tensor<4xf32>
    %1212 = "mhlo.add"(%1211, %1208) {name = "add.2256"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_419 = "std.constant"() {name = "constant.2257", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %1213 = "mhlo.broadcast_in_dim"(%cst_419) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2258"} : (tensor<f32>) -> tensor<4xf32>
    %1214 = "mhlo.subtract"(%1212, %1213) {name = "subtract.2259"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1215 = "mhlo.exponential"(%1214) {name = "exponential.2260"} : (tensor<4xf32>) -> tensor<4xf32>
    %1216 = "mhlo.subtract"(%1190, %1215) {name = "subtract.2261"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1217 = "mhlo.get_tuple_element"(%arg0) {index = 37 : i32, name = "get-tuple-element.654"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %1218 = "mhlo.get_tuple_element"(%arg0) {index = 32 : i32, name = "get-tuple-element.649"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %1219 = "mhlo.compare"(%1217, %1218) {comparison_direction = "LT", name = "compare.2167"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
    %1220 = "mhlo.broadcast_in_dim"(%1219) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2277"} : (tensor<i1>) -> tensor<4xi1>
    %1221 = "mhlo.get_tuple_element"(%arg0) {index = 31 : i32, name = "get-tuple-element.648"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %1222 = "mhlo.convert"(%1218) {name = "convert.2154"} : (tensor<i32>) -> tensor<f32>
    %cst_420 = "std.constant"() {name = "constant.2155", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %1223 = "mhlo.add"(%1222, %cst_420) {name = "add.2156"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    %1224 = "mhlo.negate"(%1187) {name = "negate.2151"} : (tensor<f32>) -> tensor<f32>
    %1225 = "mhlo.power"(%1223, %1224) {name = "power.2160"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    %1226 = "mhlo.broadcast_in_dim"(%1225) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2269"} : (tensor<f32>) -> tensor<4xf32>
    %1227 = "mhlo.reshape"(%1216) {name = "reshape.2262"} : (tensor<4xf32>) -> tensor<4xf32>
    %1228 = "mhlo.sqrt"(%1223) {name = "sqrt.2157"} : (tensor<f32>) -> tensor<f32>
    %1229 = "mhlo.broadcast_in_dim"(%1228) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2263"} : (tensor<f32>) -> tensor<4xf32>
    %1230 = "mhlo.multiply"(%1227, %1229) {name = "multiply.2264"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1231 = "mhlo.add"(%1186, %1223) {name = "add.2158"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    %1232 = "mhlo.multiply"(%1231, %1185) {name = "multiply.2159"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    %1233 = "mhlo.broadcast_in_dim"(%1232) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2265"} : (tensor<f32>) -> tensor<4xf32>
    %1234 = "mhlo.divide"(%1230, %1233) {name = "divide.2266"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1235 = "mhlo.subtract"(%1184, %1234) {name = "subtract.2267"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1236 = "mhlo.multiply"(%1226, %1235) {name = "multiply.2270"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_421 = "std.constant"() {name = "constant.2161", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %1237 = "mhlo.subtract"(%cst_421, %1225) {name = "subtract.2162"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    %1238 = "mhlo.broadcast_in_dim"(%1237) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2163"} : (tensor<f32>) -> tensor<4xf32>
    %1239 = "mhlo.multiply"(%1238, %1221) {name = "multiply.2164"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1240 = "mhlo.add"(%1236, %1239) {name = "add.2271"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1241 = "mhlo.select"(%1220, %1221, %1240) {name = "select.2278"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_422 = "std.constant"() {name = "constant.2168", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %1242 = "mhlo.add"(%1218, %cst_422) {name = "add.2169"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
    %1243 = "mhlo.compare"(%1217, %1218) {comparison_direction = "GT", name = "compare.2165"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
    %1244 = "mhlo.broadcast_in_dim"(%1243) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2275"} : (tensor<i1>) -> tensor<4xi1>
    %1245 = "mhlo.exponential"(%1235) {name = "exponential.2268"} : (tensor<4xf32>) -> tensor<4xf32>
    %1246 = "mhlo.compare"(%1217, %1218) {comparison_direction = "LT", name = "compare.2166"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
    %1247 = "mhlo.broadcast_in_dim"(%1246) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2273"} : (tensor<i1>) -> tensor<4xi1>
    %1248 = "mhlo.exponential"(%1240) {name = "exponential.2272"} : (tensor<4xf32>) -> tensor<4xf32>
    %1249 = "mhlo.select"(%1247, %1087, %1248) {name = "select.2274"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1250 = "mhlo.select"(%1244, %1245, %1249) {name = "select.2276"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %1251 = "mhlo.get_tuple_element"(%arg0) {index = 34 : i32, name = "get-tuple-element.651"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %1252 = "mhlo.tuple"(%1119, %1120, %1122, %1124, %1169, %1168, %1172, %1174, %1176, %1179, %1182, %1087, %1094, %1165, %1164, %1167, %1160, %1141, %1150, %1085, %1152, %1087, %1094, %474, %272, %1183, %1184, %1185, %1186, %1187, %1216, %1241, %1242, %1250, %1251, %1095, %1096, %1217) {name = "tuple.2293"} : (tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>
    "std.return"(%1252) : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> ()
  }) {sym_name = "mcmc_sample_chain_trace_scan_while_smart_for_loop_while_body_413__.615", sym_visibility = "private", type = (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>} : () -> ()
  "func"() ( {
  ^bb0(%arg0: tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>):  // no predecessors
    %0 = "mhlo.get_tuple_element"(%arg0) {index = 0 : i32, name = "get-tuple-element.2296"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %1 = "mhlo.get_tuple_element"(%arg0) {index = 1 : i32, name = "get-tuple-element.2297"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %2 = "mhlo.get_tuple_element"(%arg0) {index = 3 : i32, name = "get-tuple-element.2299"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
    %3 = "mhlo.get_tuple_element"(%arg0) {index = 4 : i32, name = "get-tuple-element.2300"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %4 = "mhlo.get_tuple_element"(%arg0) {index = 5 : i32, name = "get-tuple-element.2301"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %5 = "mhlo.get_tuple_element"(%arg0) {index = 6 : i32, name = "get-tuple-element.2302"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %6 = "mhlo.get_tuple_element"(%arg0) {index = 7 : i32, name = "get-tuple-element.2303"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %7 = "mhlo.get_tuple_element"(%arg0) {index = 8 : i32, name = "get-tuple-element.2304"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %8 = "mhlo.get_tuple_element"(%arg0) {index = 9 : i32, name = "get-tuple-element.2305"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %9 = "mhlo.get_tuple_element"(%arg0) {index = 10 : i32, name = "get-tuple-element.2306"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %10 = "mhlo.get_tuple_element"(%arg0) {index = 11 : i32, name = "get-tuple-element.2307"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %11 = "mhlo.get_tuple_element"(%arg0) {index = 12 : i32, name = "get-tuple-element.2308"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %12 = "mhlo.get_tuple_element"(%arg0) {index = 13 : i32, name = "get-tuple-element.2309"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xi1>
    %13 = "mhlo.get_tuple_element"(%arg0) {index = 14 : i32, name = "get-tuple-element.2310"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %14 = "mhlo.get_tuple_element"(%arg0) {index = 15 : i32, name = "get-tuple-element.2311"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %15 = "mhlo.get_tuple_element"(%arg0) {index = 16 : i32, name = "get-tuple-element.2312"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %16 = "mhlo.get_tuple_element"(%arg0) {index = 17 : i32, name = "get-tuple-element.2313"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %17 = "mhlo.get_tuple_element"(%arg0) {index = 18 : i32, name = "get-tuple-element.2314"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %18 = "mhlo.get_tuple_element"(%arg0) {index = 19 : i32, name = "get-tuple-element.2315"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %19 = "mhlo.get_tuple_element"(%arg0) {index = 20 : i32, name = "get-tuple-element.2316"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %20 = "mhlo.get_tuple_element"(%arg0) {index = 21 : i32, name = "get-tuple-element.2317"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %21 = "mhlo.get_tuple_element"(%arg0) {index = 22 : i32, name = "get-tuple-element.2318"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %22 = "mhlo.get_tuple_element"(%arg0) {index = 23 : i32, name = "get-tuple-element.2319"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
    %23 = "mhlo.get_tuple_element"(%arg0) {index = 24 : i32, name = "get-tuple-element.2320"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
    %24 = "mhlo.get_tuple_element"(%arg0) {index = 25 : i32, name = "get-tuple-element.2321"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %25 = "mhlo.get_tuple_element"(%arg0) {index = 26 : i32, name = "get-tuple-element.2322"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %26 = "mhlo.get_tuple_element"(%arg0) {index = 27 : i32, name = "get-tuple-element.2323"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %27 = "mhlo.get_tuple_element"(%arg0) {index = 28 : i32, name = "get-tuple-element.2324"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %28 = "mhlo.get_tuple_element"(%arg0) {index = 29 : i32, name = "get-tuple-element.2325"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %29 = "mhlo.get_tuple_element"(%arg0) {index = 30 : i32, name = "get-tuple-element.2326"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %30 = "mhlo.get_tuple_element"(%arg0) {index = 31 : i32, name = "get-tuple-element.2327"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %31 = "mhlo.get_tuple_element"(%arg0) {index = 32 : i32, name = "get-tuple-element.2328"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %32 = "mhlo.get_tuple_element"(%arg0) {index = 33 : i32, name = "get-tuple-element.2329"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %33 = "mhlo.get_tuple_element"(%arg0) {index = 35 : i32, name = "get-tuple-element.2331"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %34 = "mhlo.get_tuple_element"(%arg0) {index = 36 : i32, name = "get-tuple-element.2332"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %35 = "mhlo.get_tuple_element"(%arg0) {index = 37 : i32, name = "get-tuple-element.2333"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %36 = "mhlo.get_tuple_element"(%arg0) {index = 2 : i32, name = "get-tuple-element.2298"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %37 = "mhlo.get_tuple_element"(%arg0) {index = 34 : i32, name = "get-tuple-element.2330"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %38 = "mhlo.compare"(%36, %37) {comparison_direction = "LT", name = "compare.2334"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
    %39 = "mhlo.tuple"(%38) {name = "tuple.2335"} : (tensor<i1>) -> tuple<tensor<i1>>
    "std.return"(%39) : (tuple<tensor<i1>>) -> ()
  }) {sym_name = "mcmc_sample_chain_trace_scan_while_smart_for_loop_while_cond_412__.2294", sym_visibility = "private", type = (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tuple<tensor<i1>>} : () -> ()
  "func"() ( {
  ^bb0(%arg0: tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>):  // no predecessors
    %0 = "std.call"(%arg0) {callee = @mcmc_sample_chain_trace_scan_while_smart_for_loop_while_cond_412__.2294} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tuple<tensor<i1>>
    %1 = "mhlo.get_tuple_element"(%0) {index = 0 : i32, name = "get-tuple-element.2339"} : (tuple<tensor<i1>>) -> tensor<i1>
    "std.return"(%1) : (tensor<i1>) -> ()
  }) {sym_name = "cond_wrapper.2336", sym_visibility = "private", type = (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i1>} : () -> ()
  "func"() ( {
  ^bb0(%arg0: tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>):  // no predecessors
    %cst = "std.constant"() {name = "constant.2389", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %cst_0 = "std.constant"() {name = "constant.2393", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %cst_1 = "std.constant"() {name = "constant.2394", value = dense<-1> : tensor<i32>} : () -> tensor<i32>
    %cst_2 = "std.constant"() {name = "constant.2395", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %cst_3 = "std.constant"() {name = "constant.2396", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %cst_4 = "std.constant"() {name = "constant.2397", value = dense<-1> : tensor<i32>} : () -> tensor<i32>
    %cst_5 = "std.constant"() {name = "constant.2398", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %0 = "mhlo.get_tuple_element"(%arg0) {index = 3 : i32, name = "get-tuple-element.2345"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
    %1 = "mhlo.get_tuple_element"(%arg0) {index = 4 : i32, name = "get-tuple-element.2346"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %2 = "mhlo.get_tuple_element"(%arg0) {index = 5 : i32, name = "get-tuple-element.2347"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %3 = "mhlo.get_tuple_element"(%arg0) {index = 6 : i32, name = "get-tuple-element.2348"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %4 = "mhlo.get_tuple_element"(%arg0) {index = 7 : i32, name = "get-tuple-element.2349"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %5 = "mhlo.get_tuple_element"(%arg0) {index = 8 : i32, name = "get-tuple-element.2350"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %6 = "mhlo.get_tuple_element"(%arg0) {index = 9 : i32, name = "get-tuple-element.2351"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %7 = "mhlo.get_tuple_element"(%arg0) {index = 10 : i32, name = "get-tuple-element.2352"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %8 = "mhlo.get_tuple_element"(%arg0) {index = 11 : i32, name = "get-tuple-element.2353"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %9 = "mhlo.get_tuple_element"(%arg0) {index = 12 : i32, name = "get-tuple-element.2354"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %10 = "mhlo.get_tuple_element"(%arg0) {index = 13 : i32, name = "get-tuple-element.2355"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xi1>
    %11 = "mhlo.get_tuple_element"(%arg0) {index = 14 : i32, name = "get-tuple-element.2356"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %12 = "mhlo.get_tuple_element"(%arg0) {index = 15 : i32, name = "get-tuple-element.2357"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %13 = "mhlo.get_tuple_element"(%arg0) {index = 16 : i32, name = "get-tuple-element.2358"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %14 = "mhlo.get_tuple_element"(%arg0) {index = 17 : i32, name = "get-tuple-element.2359"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %15 = "mhlo.get_tuple_element"(%arg0) {index = 18 : i32, name = "get-tuple-element.2360"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %16 = "mhlo.get_tuple_element"(%arg0) {index = 19 : i32, name = "get-tuple-element.2361"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %17 = "mhlo.get_tuple_element"(%arg0) {index = 20 : i32, name = "get-tuple-element.2362"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %18 = "mhlo.get_tuple_element"(%arg0) {index = 21 : i32, name = "get-tuple-element.2363"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %19 = "mhlo.get_tuple_element"(%arg0) {index = 22 : i32, name = "get-tuple-element.2364"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %20 = "mhlo.get_tuple_element"(%arg0) {index = 23 : i32, name = "get-tuple-element.2365"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
    %21 = "mhlo.get_tuple_element"(%arg0) {index = 24 : i32, name = "get-tuple-element.2366"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
    %22 = "mhlo.get_tuple_element"(%arg0) {index = 25 : i32, name = "get-tuple-element.2367"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %23 = "mhlo.get_tuple_element"(%arg0) {index = 26 : i32, name = "get-tuple-element.2368"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %24 = "mhlo.get_tuple_element"(%arg0) {index = 27 : i32, name = "get-tuple-element.2369"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %25 = "mhlo.get_tuple_element"(%arg0) {index = 28 : i32, name = "get-tuple-element.2370"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %26 = "mhlo.get_tuple_element"(%arg0) {index = 29 : i32, name = "get-tuple-element.2371"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %27 = "mhlo.get_tuple_element"(%arg0) {index = 30 : i32, name = "get-tuple-element.2372"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %28 = "mhlo.get_tuple_element"(%arg0) {index = 31 : i32, name = "get-tuple-element.2373"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %29 = "mhlo.get_tuple_element"(%arg0) {index = 32 : i32, name = "get-tuple-element.2374"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %30 = "mhlo.get_tuple_element"(%arg0) {index = 33 : i32, name = "get-tuple-element.2375"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %31 = "mhlo.get_tuple_element"(%arg0) {index = 37 : i32, name = "get-tuple-element.2379"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tuple<tensor<1000xi32>, tensor<i32>>
    %32 = "mhlo.get_tuple_element"(%31) {index = 0 : i32, name = "get-tuple-element.2390"} : (tuple<tensor<1000xi32>, tensor<i32>>) -> tensor<1000xi32>
    %33 = "mhlo.get_tuple_element"(%arg0) {index = 2 : i32, name = "get-tuple-element.2344"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %34 = "mhlo.dynamic-slice"(%32, %33) {slice_sizes = dense<1> : tensor<1xi64>} : (tensor<1000xi32>, tensor<i32>) -> tensor<1xi32>
    %35 = "mhlo.reshape"(%34) {name = "reshape.2392"} : (tensor<1xi32>) -> tensor<i32>
    %36 = "mhlo.get_tuple_element"(%arg0) {index = 38 : i32, name = "get-tuple-element.2380"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %37 = "mhlo.get_tuple_element"(%arg0) {index = 39 : i32, name = "get-tuple-element.2381"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %38 = "mhlo.get_tuple_element"(%arg0) {index = 40 : i32, name = "get-tuple-element.2382"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %39 = "mhlo.tuple"(%cst_3, %cst_4, %cst_5, %0, %1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12, %13, %14, %15, %16, %17, %18, %19, %20, %21, %22, %23, %24, %25, %26, %27, %28, %29, %30, %35, %36, %37, %38) {name = "tuple.2399"} : (tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>
    %40 = "mhlo.while"(%39) ( {
    ^bb0(%arg1: tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>):  // no predecessors
      %137 = "std.call"(%arg1) {callee = @mcmc_sample_chain_trace_scan_while_smart_for_loop_while_cond_412__.2294} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tuple<tensor<i1>>
      %138 = "mhlo.get_tuple_element"(%137) {index = 0 : i32, name = "get-tuple-element.2339"} : (tuple<tensor<i1>>) -> tensor<i1>
      "mhlo.return"(%138) : (tensor<i1>) -> ()
    },  {
    ^bb0(%arg1: tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>):  // no predecessors
      %137 = "mhlo.get_tuple_element"(%arg1) {index = 4 : i32, name = "get-tuple-element.621"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %138 = "mhlo.get_tuple_element"(%arg1) {index = 11 : i32, name = "get-tuple-element.628"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %139 = "mhlo.get_tuple_element"(%arg1) {index = 13 : i32, name = "get-tuple-element.630"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xi1>
      %140 = "mhlo.get_tuple_element"(%arg1) {index = 14 : i32, name = "get-tuple-element.631"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %141 = "mhlo.get_tuple_element"(%arg1) {index = 15 : i32, name = "get-tuple-element.632"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %142 = "mhlo.get_tuple_element"(%arg1) {index = 16 : i32, name = "get-tuple-element.633"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %143 = "mhlo.get_tuple_element"(%arg1) {index = 17 : i32, name = "get-tuple-element.634"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %144 = "mhlo.get_tuple_element"(%arg1) {index = 18 : i32, name = "get-tuple-element.635"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %145 = "mhlo.get_tuple_element"(%arg1) {index = 19 : i32, name = "get-tuple-element.636"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %146 = "mhlo.get_tuple_element"(%arg1) {index = 20 : i32, name = "get-tuple-element.637"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %147 = "mhlo.get_tuple_element"(%arg1) {index = 21 : i32, name = "get-tuple-element.638"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %148 = "mhlo.get_tuple_element"(%arg1) {index = 22 : i32, name = "get-tuple-element.639"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %149 = "mhlo.get_tuple_element"(%arg1) {index = 23 : i32, name = "get-tuple-element.640"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
      %150 = "mhlo.get_tuple_element"(%arg1) {index = 24 : i32, name = "get-tuple-element.641"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
      %cst_11 = "std.constant"() {name = "constant.655", value = dense<1> : tensor<i32>} : () -> tensor<i32>
      %cst_12 = "std.constant"() {name = "constant.656", value = dense<1> : tensor<i32>} : () -> tensor<i32>
      %151 = "mhlo.subtract"(%cst_11, %cst_12) {name = "subtract.657"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
      %cst_13 = "std.constant"() {name = "constant.658", value = dense<0> : tensor<i32>} : () -> tensor<i32>
      %152 = "mhlo.maximum"(%151, %cst_13) {name = "maximum.659"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
      %cst_14 = "std.constant"() {name = "constant.660", value = dense<1000> : tensor<i32>} : () -> tensor<i32>
      %153 = "mhlo.compare"(%152, %cst_14) {comparison_direction = "LT", name = "compare.661"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
      %154 = "mhlo.reshape"(%152) {name = "reshape.662"} : (tensor<i32>) -> tensor<1xi32>
      %155 = "mhlo.concatenate"(%154) {dimension = 0 : i64} : (tensor<1xi32>) -> tensor<1xi32>
      %cst_15 = "std.constant"() {name = "constant.664", value = dense<1> : tensor<i32>} : () -> tensor<i32>
      %156 = "mhlo.broadcast_in_dim"(%cst_15) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.665"} : (tensor<i32>) -> tensor<0xi32>
      %cst_16 = "std.constant"() {name = "constant.666", value = dense<1> : tensor<i32>} : () -> tensor<i32>
      %cst_17 = "std.constant"() {name = "constant.667", value = dense<1> : tensor<i32>} : () -> tensor<i32>
      %157 = "mhlo.subtract"(%cst_16, %cst_17) {name = "subtract.668"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
      %cst_18 = "std.constant"() {name = "constant.669", value = dense<0> : tensor<i32>} : () -> tensor<i32>
      %158 = "mhlo.maximum"(%157, %cst_18) {name = "maximum.670"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
      %cst_19 = "std.constant"() {name = "constant.671", value = dense<1000> : tensor<i32>} : () -> tensor<i32>
      %159 = "mhlo.compare"(%158, %cst_19) {comparison_direction = "LT", name = "compare.672"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
      %160 = "mhlo.reshape"(%158) {name = "reshape.673"} : (tensor<i32>) -> tensor<1xi32>
      %161 = "mhlo.concatenate"(%160) {dimension = 0 : i64} : (tensor<1xi32>) -> tensor<1xi32>
      %cst_20 = "std.constant"() {name = "constant.675", value = dense<1> : tensor<i32>} : () -> tensor<i32>
      %162 = "mhlo.broadcast_in_dim"(%cst_20) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.676"} : (tensor<i32>) -> tensor<0xi32>
      %cst_21 = "std.constant"() {name = "constant.677", value = dense<1> : tensor<i32>} : () -> tensor<i32>
      %cst_22 = "std.constant"() {name = "constant.678", value = dense<1> : tensor<i32>} : () -> tensor<i32>
      %163 = "mhlo.subtract"(%cst_21, %cst_22) {name = "subtract.679"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
      %cst_23 = "std.constant"() {name = "constant.680", value = dense<0> : tensor<i32>} : () -> tensor<i32>
      %164 = "mhlo.maximum"(%163, %cst_23) {name = "maximum.681"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
      %cst_24 = "std.constant"() {name = "constant.682", value = dense<1000> : tensor<i32>} : () -> tensor<i32>
      %165 = "mhlo.compare"(%164, %cst_24) {comparison_direction = "LT", name = "compare.683"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
      %166 = "mhlo.reshape"(%164) {name = "reshape.684"} : (tensor<i32>) -> tensor<1xi32>
      %167 = "mhlo.concatenate"(%166) {dimension = 0 : i64} : (tensor<1xi32>) -> tensor<1xi32>
      %cst_25 = "std.constant"() {name = "constant.686", value = dense<1> : tensor<i32>} : () -> tensor<i32>
      %168 = "mhlo.broadcast_in_dim"(%cst_25) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.687"} : (tensor<i32>) -> tensor<0xi32>
      %cst_26 = "std.constant"() {name = "constant.688", value = dense<1> : tensor<i32>} : () -> tensor<i32>
      %cst_27 = "std.constant"() {name = "constant.689", value = dense<1> : tensor<i32>} : () -> tensor<i32>
      %169 = "mhlo.subtract"(%cst_26, %cst_27) {name = "subtract.690"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
      %cst_28 = "std.constant"() {name = "constant.691", value = dense<0> : tensor<i32>} : () -> tensor<i32>
      %170 = "mhlo.maximum"(%169, %cst_28) {name = "maximum.692"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
      %cst_29 = "std.constant"() {name = "constant.693", value = dense<1000> : tensor<i32>} : () -> tensor<i32>
      %171 = "mhlo.compare"(%170, %cst_29) {comparison_direction = "LT", name = "compare.694"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
      %172 = "mhlo.reshape"(%170) {name = "reshape.695"} : (tensor<i32>) -> tensor<1xi32>
      %173 = "mhlo.concatenate"(%172) {dimension = 0 : i64} : (tensor<1xi32>) -> tensor<1xi32>
      %cst_30 = "std.constant"() {name = "constant.697", value = dense<1> : tensor<i32>} : () -> tensor<i32>
      %174 = "mhlo.broadcast_in_dim"(%cst_30) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.698"} : (tensor<i32>) -> tensor<0xi32>
      %cst_31 = "std.constant"() {name = "constant.699", value = dense<1> : tensor<i32>} : () -> tensor<i32>
      %cst_32 = "std.constant"() {name = "constant.700", value = dense<1> : tensor<i32>} : () -> tensor<i32>
      %175 = "mhlo.subtract"(%cst_31, %cst_32) {name = "subtract.701"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
      %cst_33 = "std.constant"() {name = "constant.702", value = dense<0> : tensor<i32>} : () -> tensor<i32>
      %176 = "mhlo.maximum"(%175, %cst_33) {name = "maximum.703"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
      %cst_34 = "std.constant"() {name = "constant.704", value = dense<1000> : tensor<i32>} : () -> tensor<i32>
      %177 = "mhlo.compare"(%176, %cst_34) {comparison_direction = "LT", name = "compare.705"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
      %178 = "mhlo.reshape"(%176) {name = "reshape.706"} : (tensor<i32>) -> tensor<1xi32>
      %179 = "mhlo.concatenate"(%178) {dimension = 0 : i64} : (tensor<1xi32>) -> tensor<1xi32>
      %cst_35 = "std.constant"() {name = "constant.708", value = dense<1> : tensor<i32>} : () -> tensor<i32>
      %180 = "mhlo.broadcast_in_dim"(%cst_35) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.709"} : (tensor<i32>) -> tensor<0xi32>
      %cst_36 = "std.constant"() {name = "constant.710", value = dense<1> : tensor<i32>} : () -> tensor<i32>
      %cst_37 = "std.constant"() {name = "constant.711", value = dense<1> : tensor<i32>} : () -> tensor<i32>
      %181 = "mhlo.subtract"(%cst_36, %cst_37) {name = "subtract.712"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
      %cst_38 = "std.constant"() {name = "constant.713", value = dense<0> : tensor<i32>} : () -> tensor<i32>
      %182 = "mhlo.maximum"(%181, %cst_38) {name = "maximum.714"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
      %cst_39 = "std.constant"() {name = "constant.715", value = dense<1000> : tensor<i32>} : () -> tensor<i32>
      %183 = "mhlo.compare"(%182, %cst_39) {comparison_direction = "LT", name = "compare.716"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
      %184 = "mhlo.reshape"(%182) {name = "reshape.717"} : (tensor<i32>) -> tensor<1xi32>
      %185 = "mhlo.concatenate"(%184) {dimension = 0 : i64} : (tensor<1xi32>) -> tensor<1xi32>
      %cst_40 = "std.constant"() {name = "constant.719", value = dense<1> : tensor<i32>} : () -> tensor<i32>
      %186 = "mhlo.broadcast_in_dim"(%cst_40) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.720"} : (tensor<i32>) -> tensor<0xi32>
      %cst_41 = "std.constant"() {name = "constant.734", value = dense<0> : tensor<ui64>} : () -> tensor<ui64>
      %cst_42 = "std.constant"() {name = "constant.749", value = dense<1053357856> : tensor<ui32>} : () -> tensor<ui32>
      %cst_43 = "std.constant"() {name = "constant.769", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %187 = "mhlo.add"(%cst_42, %cst_43) {name = "add.770"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_44 = "std.constant"() {name = "constant.791", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %188 = "mhlo.add"(%187, %cst_44) {name = "add.792"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_45 = "std.constant"() {name = "constant.813", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %189 = "mhlo.add"(%188, %cst_45) {name = "add.814"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_46 = "std.constant"() {name = "constant.835", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %190 = "mhlo.add"(%189, %cst_46) {name = "add.836"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_47 = "std.constant"() {name = "constant.857", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %191 = "mhlo.add"(%190, %cst_47) {name = "add.858"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_48 = "std.constant"() {name = "constant.879", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %192 = "mhlo.add"(%191, %cst_48) {name = "add.880"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_49 = "std.constant"() {name = "constant.901", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %193 = "mhlo.add"(%192, %cst_49) {name = "add.902"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_50 = "std.constant"() {name = "constant.923", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %194 = "mhlo.add"(%193, %cst_50) {name = "add.924"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_51 = "std.constant"() {name = "constant.945", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %195 = "mhlo.add"(%194, %cst_51) {name = "add.946"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_52 = "std.constant"() {name = "constant.967", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %196 = "mhlo.add"(%195, %cst_52) {name = "add.968"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_53 = "std.constant"() {name = "constant.750", value = dense<38149673> : tensor<ui32>} : () -> tensor<ui32>
      %cst_54 = "std.constant"() {name = "constant.771", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %197 = "mhlo.add"(%cst_53, %cst_54) {name = "add.772"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_55 = "std.constant"() {name = "constant.793", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %198 = "mhlo.add"(%197, %cst_55) {name = "add.794"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_56 = "std.constant"() {name = "constant.815", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %199 = "mhlo.add"(%198, %cst_56) {name = "add.816"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_57 = "std.constant"() {name = "constant.837", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %200 = "mhlo.add"(%199, %cst_57) {name = "add.838"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_58 = "std.constant"() {name = "constant.859", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %201 = "mhlo.add"(%200, %cst_58) {name = "add.860"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_59 = "std.constant"() {name = "constant.881", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %202 = "mhlo.add"(%201, %cst_59) {name = "add.882"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_60 = "std.constant"() {name = "constant.903", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %203 = "mhlo.add"(%202, %cst_60) {name = "add.904"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_61 = "std.constant"() {name = "constant.925", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %204 = "mhlo.add"(%203, %cst_61) {name = "add.926"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_62 = "std.constant"() {name = "constant.947", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %205 = "mhlo.add"(%204, %cst_62) {name = "add.948"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_63 = "std.constant"() {name = "constant.969", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %206 = "mhlo.add"(%205, %cst_63) {name = "add.970"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %207 = "mhlo.get_tuple_element"(%arg1) {index = 3 : i32, name = "get-tuple-element.620"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
      %208 = "mhlo.slice"(%207) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
      %209 = "mhlo.reshape"(%208) {name = "reshape.726"} : (tensor<1xi32>) -> tensor<i32>
      %210 = "mhlo.convert"(%209) {name = "convert.729"} : (tensor<i32>) -> tensor<ui64>
      %211 = "mhlo.slice"(%207) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
      %212 = "mhlo.reshape"(%211) {name = "reshape.728"} : (tensor<1xi32>) -> tensor<i32>
      %213 = "mhlo.convert"(%212) {name = "convert.730"} : (tensor<i32>) -> tensor<ui64>
      %cst_64 = "std.constant"() {name = "constant.731", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %214 = "mhlo.shift_left"(%213, %cst_64) {name = "shift-left.732"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %215 = "mhlo.or"(%210, %214) {name = "or.733"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %216 = "mhlo.convert"(%215) {name = "convert.736"} : (tensor<ui64>) -> tensor<ui32>
      %217 = "mhlo.convert"(%216) {name = "convert.739"} : (tensor<ui32>) -> tensor<ui64>
      %218 = "mhlo.convert"(%217) {name = "convert.741"} : (tensor<ui64>) -> tensor<ui32>
      %219 = "mhlo.convert"(%218) {name = "convert.751"} : (tensor<ui32>) -> tensor<ui64>
      %cst_65 = "std.constant"() {name = "constant.752", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %220 = "mhlo.multiply"(%219, %cst_65) {name = "multiply.753"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_66 = "std.constant"() {name = "constant.755", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %221 = "mhlo.shift_right_logical"(%220, %cst_66) {name = "shift-right-logical.756"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %222 = "mhlo.convert"(%221) {name = "convert.757"} : (tensor<ui64>) -> tensor<ui32>
      %cst_67 = "std.constant"() {name = "constant.735", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %223 = "mhlo.shift_right_logical"(%215, %cst_67) {name = "shift-right-logical.737"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %224 = "mhlo.convert"(%223) {name = "convert.738"} : (tensor<ui64>) -> tensor<ui32>
      %225 = "mhlo.convert"(%224) {name = "convert.740"} : (tensor<ui32>) -> tensor<ui64>
      %cst_68 = "std.constant"() {name = "constant.746", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %226 = "mhlo.shift_right_logical"(%225, %cst_68) {name = "shift-right-logical.747"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %227 = "mhlo.convert"(%226) {name = "convert.748"} : (tensor<ui64>) -> tensor<ui32>
      %228 = "mhlo.xor"(%222, %227) {name = "xor.767"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %229 = "mhlo.xor"(%228, %cst_53) {name = "xor.768"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %230 = "mhlo.convert"(%229) {name = "convert.780"} : (tensor<ui32>) -> tensor<ui64>
      %cst_69 = "std.constant"() {name = "constant.781", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %231 = "mhlo.multiply"(%230, %cst_69) {name = "multiply.782"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_70 = "std.constant"() {name = "constant.784", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %232 = "mhlo.shift_right_logical"(%231, %cst_70) {name = "shift-right-logical.785"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %233 = "mhlo.convert"(%232) {name = "convert.786"} : (tensor<ui64>) -> tensor<ui32>
      %234 = "mhlo.convert"(%225) {name = "convert.745"} : (tensor<ui64>) -> tensor<ui32>
      %235 = "mhlo.convert"(%234) {name = "convert.758"} : (tensor<ui32>) -> tensor<ui64>
      %cst_71 = "std.constant"() {name = "constant.759", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %236 = "mhlo.multiply"(%235, %cst_71) {name = "multiply.760"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %237 = "mhlo.convert"(%236) {name = "convert.761"} : (tensor<ui64>) -> tensor<ui32>
      %238 = "mhlo.xor"(%233, %237) {name = "xor.787"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %239 = "mhlo.xor"(%238, %187) {name = "xor.788"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %240 = "mhlo.convert"(%239) {name = "convert.795"} : (tensor<ui32>) -> tensor<ui64>
      %cst_72 = "std.constant"() {name = "constant.796", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %241 = "mhlo.multiply"(%240, %cst_72) {name = "multiply.797"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_73 = "std.constant"() {name = "constant.799", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %242 = "mhlo.shift_right_logical"(%241, %cst_73) {name = "shift-right-logical.800"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %243 = "mhlo.convert"(%242) {name = "convert.801"} : (tensor<ui64>) -> tensor<ui32>
      %cst_74 = "std.constant"() {name = "constant.762", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %244 = "mhlo.shift_right_logical"(%236, %cst_74) {name = "shift-right-logical.763"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %245 = "mhlo.convert"(%244) {name = "convert.764"} : (tensor<ui64>) -> tensor<ui32>
      %cst_75 = "std.constant"() {name = "constant.742", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %246 = "mhlo.shift_right_logical"(%217, %cst_75) {name = "shift-right-logical.743"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %247 = "mhlo.convert"(%246) {name = "convert.744"} : (tensor<ui64>) -> tensor<ui32>
      %248 = "mhlo.xor"(%245, %247) {name = "xor.765"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %249 = "mhlo.xor"(%248, %cst_42) {name = "xor.766"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %250 = "mhlo.convert"(%249) {name = "convert.773"} : (tensor<ui32>) -> tensor<ui64>
      %cst_76 = "std.constant"() {name = "constant.774", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %251 = "mhlo.multiply"(%250, %cst_76) {name = "multiply.775"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %252 = "mhlo.convert"(%251) {name = "convert.776"} : (tensor<ui64>) -> tensor<ui32>
      %253 = "mhlo.xor"(%243, %252) {name = "xor.811"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %254 = "mhlo.xor"(%253, %198) {name = "xor.812"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %255 = "mhlo.convert"(%254) {name = "convert.824"} : (tensor<ui32>) -> tensor<ui64>
      %cst_77 = "std.constant"() {name = "constant.825", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %256 = "mhlo.multiply"(%255, %cst_77) {name = "multiply.826"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_78 = "std.constant"() {name = "constant.828", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %257 = "mhlo.shift_right_logical"(%256, %cst_78) {name = "shift-right-logical.829"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %258 = "mhlo.convert"(%257) {name = "convert.830"} : (tensor<ui64>) -> tensor<ui32>
      %cst_79 = "std.constant"() {name = "constant.777", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %259 = "mhlo.shift_right_logical"(%251, %cst_79) {name = "shift-right-logical.778"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %260 = "mhlo.convert"(%259) {name = "convert.779"} : (tensor<ui64>) -> tensor<ui32>
      %261 = "mhlo.convert"(%220) {name = "convert.754"} : (tensor<ui64>) -> tensor<ui32>
      %262 = "mhlo.xor"(%260, %261) {name = "xor.789"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %263 = "mhlo.xor"(%262, %197) {name = "xor.790"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %264 = "mhlo.convert"(%263) {name = "convert.802"} : (tensor<ui32>) -> tensor<ui64>
      %cst_80 = "std.constant"() {name = "constant.803", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %265 = "mhlo.multiply"(%264, %cst_80) {name = "multiply.804"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %266 = "mhlo.convert"(%265) {name = "convert.805"} : (tensor<ui64>) -> tensor<ui32>
      %267 = "mhlo.xor"(%258, %266) {name = "xor.831"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %268 = "mhlo.xor"(%267, %189) {name = "xor.832"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %269 = "mhlo.convert"(%268) {name = "convert.839"} : (tensor<ui32>) -> tensor<ui64>
      %cst_81 = "std.constant"() {name = "constant.840", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %270 = "mhlo.multiply"(%269, %cst_81) {name = "multiply.841"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_82 = "std.constant"() {name = "constant.843", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %271 = "mhlo.shift_right_logical"(%270, %cst_82) {name = "shift-right-logical.844"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %272 = "mhlo.convert"(%271) {name = "convert.845"} : (tensor<ui64>) -> tensor<ui32>
      %cst_83 = "std.constant"() {name = "constant.806", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %273 = "mhlo.shift_right_logical"(%265, %cst_83) {name = "shift-right-logical.807"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %274 = "mhlo.convert"(%273) {name = "convert.808"} : (tensor<ui64>) -> tensor<ui32>
      %275 = "mhlo.convert"(%231) {name = "convert.783"} : (tensor<ui64>) -> tensor<ui32>
      %276 = "mhlo.xor"(%274, %275) {name = "xor.809"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %277 = "mhlo.xor"(%276, %188) {name = "xor.810"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %278 = "mhlo.convert"(%277) {name = "convert.817"} : (tensor<ui32>) -> tensor<ui64>
      %cst_84 = "std.constant"() {name = "constant.818", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %279 = "mhlo.multiply"(%278, %cst_84) {name = "multiply.819"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %280 = "mhlo.convert"(%279) {name = "convert.820"} : (tensor<ui64>) -> tensor<ui32>
      %281 = "mhlo.xor"(%272, %280) {name = "xor.855"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %282 = "mhlo.xor"(%281, %200) {name = "xor.856"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %283 = "mhlo.convert"(%282) {name = "convert.868"} : (tensor<ui32>) -> tensor<ui64>
      %cst_85 = "std.constant"() {name = "constant.869", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %284 = "mhlo.multiply"(%283, %cst_85) {name = "multiply.870"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_86 = "std.constant"() {name = "constant.872", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %285 = "mhlo.shift_right_logical"(%284, %cst_86) {name = "shift-right-logical.873"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %286 = "mhlo.convert"(%285) {name = "convert.874"} : (tensor<ui64>) -> tensor<ui32>
      %cst_87 = "std.constant"() {name = "constant.821", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %287 = "mhlo.shift_right_logical"(%279, %cst_87) {name = "shift-right-logical.822"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %288 = "mhlo.convert"(%287) {name = "convert.823"} : (tensor<ui64>) -> tensor<ui32>
      %289 = "mhlo.convert"(%241) {name = "convert.798"} : (tensor<ui64>) -> tensor<ui32>
      %290 = "mhlo.xor"(%288, %289) {name = "xor.833"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %291 = "mhlo.xor"(%290, %199) {name = "xor.834"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %292 = "mhlo.convert"(%291) {name = "convert.846"} : (tensor<ui32>) -> tensor<ui64>
      %cst_88 = "std.constant"() {name = "constant.847", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %293 = "mhlo.multiply"(%292, %cst_88) {name = "multiply.848"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %294 = "mhlo.convert"(%293) {name = "convert.849"} : (tensor<ui64>) -> tensor<ui32>
      %295 = "mhlo.xor"(%286, %294) {name = "xor.875"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %296 = "mhlo.xor"(%295, %191) {name = "xor.876"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %297 = "mhlo.convert"(%296) {name = "convert.883"} : (tensor<ui32>) -> tensor<ui64>
      %cst_89 = "std.constant"() {name = "constant.884", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %298 = "mhlo.multiply"(%297, %cst_89) {name = "multiply.885"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_90 = "std.constant"() {name = "constant.887", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %299 = "mhlo.shift_right_logical"(%298, %cst_90) {name = "shift-right-logical.888"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %300 = "mhlo.convert"(%299) {name = "convert.889"} : (tensor<ui64>) -> tensor<ui32>
      %cst_91 = "std.constant"() {name = "constant.850", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %301 = "mhlo.shift_right_logical"(%293, %cst_91) {name = "shift-right-logical.851"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %302 = "mhlo.convert"(%301) {name = "convert.852"} : (tensor<ui64>) -> tensor<ui32>
      %303 = "mhlo.convert"(%256) {name = "convert.827"} : (tensor<ui64>) -> tensor<ui32>
      %304 = "mhlo.xor"(%302, %303) {name = "xor.853"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %305 = "mhlo.xor"(%304, %190) {name = "xor.854"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %306 = "mhlo.convert"(%305) {name = "convert.861"} : (tensor<ui32>) -> tensor<ui64>
      %cst_92 = "std.constant"() {name = "constant.862", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %307 = "mhlo.multiply"(%306, %cst_92) {name = "multiply.863"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %308 = "mhlo.convert"(%307) {name = "convert.864"} : (tensor<ui64>) -> tensor<ui32>
      %309 = "mhlo.xor"(%300, %308) {name = "xor.899"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %310 = "mhlo.xor"(%309, %202) {name = "xor.900"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %311 = "mhlo.convert"(%310) {name = "convert.912"} : (tensor<ui32>) -> tensor<ui64>
      %cst_93 = "std.constant"() {name = "constant.913", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %312 = "mhlo.multiply"(%311, %cst_93) {name = "multiply.914"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_94 = "std.constant"() {name = "constant.916", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %313 = "mhlo.shift_right_logical"(%312, %cst_94) {name = "shift-right-logical.917"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %314 = "mhlo.convert"(%313) {name = "convert.918"} : (tensor<ui64>) -> tensor<ui32>
      %cst_95 = "std.constant"() {name = "constant.865", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %315 = "mhlo.shift_right_logical"(%307, %cst_95) {name = "shift-right-logical.866"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %316 = "mhlo.convert"(%315) {name = "convert.867"} : (tensor<ui64>) -> tensor<ui32>
      %317 = "mhlo.convert"(%270) {name = "convert.842"} : (tensor<ui64>) -> tensor<ui32>
      %318 = "mhlo.xor"(%316, %317) {name = "xor.877"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %319 = "mhlo.xor"(%318, %201) {name = "xor.878"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %320 = "mhlo.convert"(%319) {name = "convert.890"} : (tensor<ui32>) -> tensor<ui64>
      %cst_96 = "std.constant"() {name = "constant.891", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %321 = "mhlo.multiply"(%320, %cst_96) {name = "multiply.892"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %322 = "mhlo.convert"(%321) {name = "convert.893"} : (tensor<ui64>) -> tensor<ui32>
      %323 = "mhlo.xor"(%314, %322) {name = "xor.919"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %324 = "mhlo.xor"(%323, %193) {name = "xor.920"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %325 = "mhlo.convert"(%324) {name = "convert.927"} : (tensor<ui32>) -> tensor<ui64>
      %cst_97 = "std.constant"() {name = "constant.928", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %326 = "mhlo.multiply"(%325, %cst_97) {name = "multiply.929"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_98 = "std.constant"() {name = "constant.931", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %327 = "mhlo.shift_right_logical"(%326, %cst_98) {name = "shift-right-logical.932"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %328 = "mhlo.convert"(%327) {name = "convert.933"} : (tensor<ui64>) -> tensor<ui32>
      %cst_99 = "std.constant"() {name = "constant.894", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %329 = "mhlo.shift_right_logical"(%321, %cst_99) {name = "shift-right-logical.895"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %330 = "mhlo.convert"(%329) {name = "convert.896"} : (tensor<ui64>) -> tensor<ui32>
      %331 = "mhlo.convert"(%284) {name = "convert.871"} : (tensor<ui64>) -> tensor<ui32>
      %332 = "mhlo.xor"(%330, %331) {name = "xor.897"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %333 = "mhlo.xor"(%332, %192) {name = "xor.898"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %334 = "mhlo.convert"(%333) {name = "convert.905"} : (tensor<ui32>) -> tensor<ui64>
      %cst_100 = "std.constant"() {name = "constant.906", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %335 = "mhlo.multiply"(%334, %cst_100) {name = "multiply.907"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %336 = "mhlo.convert"(%335) {name = "convert.908"} : (tensor<ui64>) -> tensor<ui32>
      %337 = "mhlo.xor"(%328, %336) {name = "xor.943"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %338 = "mhlo.xor"(%337, %204) {name = "xor.944"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %339 = "mhlo.convert"(%338) {name = "convert.956"} : (tensor<ui32>) -> tensor<ui64>
      %cst_101 = "std.constant"() {name = "constant.957", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %340 = "mhlo.multiply"(%339, %cst_101) {name = "multiply.958"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_102 = "std.constant"() {name = "constant.960", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %341 = "mhlo.shift_right_logical"(%340, %cst_102) {name = "shift-right-logical.961"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %342 = "mhlo.convert"(%341) {name = "convert.962"} : (tensor<ui64>) -> tensor<ui32>
      %cst_103 = "std.constant"() {name = "constant.909", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %343 = "mhlo.shift_right_logical"(%335, %cst_103) {name = "shift-right-logical.910"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %344 = "mhlo.convert"(%343) {name = "convert.911"} : (tensor<ui64>) -> tensor<ui32>
      %345 = "mhlo.convert"(%298) {name = "convert.886"} : (tensor<ui64>) -> tensor<ui32>
      %346 = "mhlo.xor"(%344, %345) {name = "xor.921"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %347 = "mhlo.xor"(%346, %203) {name = "xor.922"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %348 = "mhlo.convert"(%347) {name = "convert.934"} : (tensor<ui32>) -> tensor<ui64>
      %cst_104 = "std.constant"() {name = "constant.935", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %349 = "mhlo.multiply"(%348, %cst_104) {name = "multiply.936"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %350 = "mhlo.convert"(%349) {name = "convert.937"} : (tensor<ui64>) -> tensor<ui32>
      %351 = "mhlo.xor"(%342, %350) {name = "xor.963"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %352 = "mhlo.xor"(%351, %195) {name = "xor.964"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %353 = "mhlo.convert"(%352) {name = "convert.985"} : (tensor<ui32>) -> tensor<ui64>
      %354 = "mhlo.convert"(%340) {name = "convert.959"} : (tensor<ui64>) -> tensor<ui32>
      %355 = "mhlo.convert"(%354) {name = "convert.986"} : (tensor<ui32>) -> tensor<ui64>
      %cst_105 = "std.constant"() {name = "constant.987", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %356 = "mhlo.shift_left"(%355, %cst_105) {name = "shift-left.988"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %357 = "mhlo.or"(%353, %356) {name = "or.989"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %358 = "mhlo.reshape"(%357) {name = "reshape.990"} : (tensor<ui64>) -> tensor<1xui64>
      %cst_106 = "std.constant"() {name = "constant.971", value = dense<0> : tensor<ui32>} : () -> tensor<ui32>
      %359 = "mhlo.convert"(%cst_106) {name = "convert.972"} : (tensor<ui32>) -> tensor<ui64>
      %360 = "mhlo.convert"(%cst_106) {name = "convert.973"} : (tensor<ui32>) -> tensor<ui64>
      %cst_107 = "std.constant"() {name = "constant.974", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %361 = "mhlo.shift_left"(%360, %cst_107) {name = "shift-left.975"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %362 = "mhlo.or"(%359, %361) {name = "or.976"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %363 = "mhlo.reshape"(%362) {name = "reshape.982"} : (tensor<ui64>) -> tensor<1xui64>
      %cst_108 = "std.constant"() {name = "constant.938", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %364 = "mhlo.shift_right_logical"(%349, %cst_108) {name = "shift-right-logical.939"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %365 = "mhlo.convert"(%364) {name = "convert.940"} : (tensor<ui64>) -> tensor<ui32>
      %366 = "mhlo.convert"(%312) {name = "convert.915"} : (tensor<ui64>) -> tensor<ui32>
      %367 = "mhlo.xor"(%365, %366) {name = "xor.941"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %368 = "mhlo.xor"(%367, %194) {name = "xor.942"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %369 = "mhlo.convert"(%368) {name = "convert.949"} : (tensor<ui32>) -> tensor<ui64>
      %cst_109 = "std.constant"() {name = "constant.950", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %370 = "mhlo.multiply"(%369, %cst_109) {name = "multiply.951"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_110 = "std.constant"() {name = "constant.953", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %371 = "mhlo.shift_right_logical"(%370, %cst_110) {name = "shift-right-logical.954"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %372 = "mhlo.convert"(%371) {name = "convert.955"} : (tensor<ui64>) -> tensor<ui32>
      %373 = "mhlo.convert"(%326) {name = "convert.930"} : (tensor<ui64>) -> tensor<ui32>
      %374 = "mhlo.xor"(%372, %373) {name = "xor.965"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %375 = "mhlo.xor"(%374, %205) {name = "xor.966"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %376 = "mhlo.convert"(%375) {name = "convert.977"} : (tensor<ui32>) -> tensor<ui64>
      %377 = "mhlo.convert"(%370) {name = "convert.952"} : (tensor<ui64>) -> tensor<ui32>
      %378 = "mhlo.convert"(%377) {name = "convert.978"} : (tensor<ui32>) -> tensor<ui64>
      %cst_111 = "std.constant"() {name = "constant.979", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %379 = "mhlo.shift_left"(%378, %cst_111) {name = "shift-left.980"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %380 = "mhlo.or"(%376, %379) {name = "or.981"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %381 = "mhlo.reshape"(%380) {name = "reshape.983"} : (tensor<ui64>) -> tensor<1xui64>
      %382 = "mhlo.concatenate"(%363, %381) {dimension = 0 : i64} : (tensor<1xui64>, tensor<1xui64>) -> tensor<2xui64>
      %383 = "mhlo.concatenate"(%358, %382) {dimension = 0 : i64} : (tensor<1xui64>, tensor<2xui64>) -> tensor<3xui64>
      %384 = "mhlo.rng_bit_generator"(%383) {rng_algorithm = 2 : i32} : (tensor<3xui64>) -> tuple<tensor<3xui64>, tensor<2x2xui32>>
      %385 = "mhlo.get_tuple_element"(%384) {index = 0 : i32, name = "get-tuple-element.994"} : (tuple<tensor<3xui64>, tensor<2x2xui32>>) -> tensor<3xui64>
      %cst_112 = "std.constant"() {name = "constant.1009", value = dense<0> : tensor<ui64>} : () -> tensor<ui64>
      %cst_113 = "std.constant"() {name = "constant.1024", value = dense<1053357856> : tensor<ui32>} : () -> tensor<ui32>
      %cst_114 = "std.constant"() {name = "constant.1044", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %386 = "mhlo.add"(%cst_113, %cst_114) {name = "add.1045"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_115 = "std.constant"() {name = "constant.1066", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %387 = "mhlo.add"(%386, %cst_115) {name = "add.1067"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_116 = "std.constant"() {name = "constant.1088", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %388 = "mhlo.add"(%387, %cst_116) {name = "add.1089"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_117 = "std.constant"() {name = "constant.1110", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %389 = "mhlo.add"(%388, %cst_117) {name = "add.1111"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_118 = "std.constant"() {name = "constant.1132", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %390 = "mhlo.add"(%389, %cst_118) {name = "add.1133"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_119 = "std.constant"() {name = "constant.1154", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %391 = "mhlo.add"(%390, %cst_119) {name = "add.1155"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_120 = "std.constant"() {name = "constant.1176", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %392 = "mhlo.add"(%391, %cst_120) {name = "add.1177"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_121 = "std.constant"() {name = "constant.1198", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %393 = "mhlo.add"(%392, %cst_121) {name = "add.1199"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_122 = "std.constant"() {name = "constant.1220", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %394 = "mhlo.add"(%393, %cst_122) {name = "add.1221"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_123 = "std.constant"() {name = "constant.1242", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %395 = "mhlo.add"(%394, %cst_123) {name = "add.1243"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_124 = "std.constant"() {name = "constant.1025", value = dense<38149673> : tensor<ui32>} : () -> tensor<ui32>
      %cst_125 = "std.constant"() {name = "constant.1046", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %396 = "mhlo.add"(%cst_124, %cst_125) {name = "add.1047"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_126 = "std.constant"() {name = "constant.1068", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %397 = "mhlo.add"(%396, %cst_126) {name = "add.1069"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_127 = "std.constant"() {name = "constant.1090", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %398 = "mhlo.add"(%397, %cst_127) {name = "add.1091"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_128 = "std.constant"() {name = "constant.1112", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %399 = "mhlo.add"(%398, %cst_128) {name = "add.1113"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_129 = "std.constant"() {name = "constant.1134", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %400 = "mhlo.add"(%399, %cst_129) {name = "add.1135"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_130 = "std.constant"() {name = "constant.1156", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %401 = "mhlo.add"(%400, %cst_130) {name = "add.1157"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_131 = "std.constant"() {name = "constant.1178", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %402 = "mhlo.add"(%401, %cst_131) {name = "add.1179"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_132 = "std.constant"() {name = "constant.1200", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %403 = "mhlo.add"(%402, %cst_132) {name = "add.1201"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_133 = "std.constant"() {name = "constant.1222", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %404 = "mhlo.add"(%403, %cst_133) {name = "add.1223"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_134 = "std.constant"() {name = "constant.1244", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %405 = "mhlo.add"(%404, %cst_134) {name = "add.1245"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %406 = "mhlo.get_tuple_element"(%384) {index = 1 : i32, name = "get-tuple-element.993"} : (tuple<tensor<3xui64>, tensor<2x2xui32>>) -> tensor<2x2xui32>
      %407 = "mhlo.bitcast_convert"(%406) {name = "bitcast-convert.995"} : (tensor<2x2xui32>) -> tensor<2x2xi32>
      %408 = "mhlo.slice"(%407) {limit_indices = dense<[1, 2]> : tensor<2xi64>, start_indices = dense<0> : tensor<2xi64>, strides = dense<1> : tensor<2xi64>} : (tensor<2x2xi32>) -> tensor<1x2xi32>
      %409 = "mhlo.reshape"(%408) {name = "reshape.997"} : (tensor<1x2xi32>) -> tensor<2xi32>
      %410 = "mhlo.slice"(%409) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
      %411 = "mhlo.reshape"(%410) {name = "reshape.1001"} : (tensor<1xi32>) -> tensor<i32>
      %412 = "mhlo.convert"(%411) {name = "convert.1004"} : (tensor<i32>) -> tensor<ui64>
      %413 = "mhlo.slice"(%409) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
      %414 = "mhlo.reshape"(%413) {name = "reshape.1003"} : (tensor<1xi32>) -> tensor<i32>
      %415 = "mhlo.convert"(%414) {name = "convert.1005"} : (tensor<i32>) -> tensor<ui64>
      %cst_135 = "std.constant"() {name = "constant.1006", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %416 = "mhlo.shift_left"(%415, %cst_135) {name = "shift-left.1007"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %417 = "mhlo.or"(%412, %416) {name = "or.1008"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %418 = "mhlo.convert"(%417) {name = "convert.1011"} : (tensor<ui64>) -> tensor<ui32>
      %419 = "mhlo.convert"(%418) {name = "convert.1014"} : (tensor<ui32>) -> tensor<ui64>
      %420 = "mhlo.convert"(%419) {name = "convert.1016"} : (tensor<ui64>) -> tensor<ui32>
      %421 = "mhlo.convert"(%420) {name = "convert.1026"} : (tensor<ui32>) -> tensor<ui64>
      %cst_136 = "std.constant"() {name = "constant.1027", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %422 = "mhlo.multiply"(%421, %cst_136) {name = "multiply.1028"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_137 = "std.constant"() {name = "constant.1030", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %423 = "mhlo.shift_right_logical"(%422, %cst_137) {name = "shift-right-logical.1031"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %424 = "mhlo.convert"(%423) {name = "convert.1032"} : (tensor<ui64>) -> tensor<ui32>
      %cst_138 = "std.constant"() {name = "constant.1010", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %425 = "mhlo.shift_right_logical"(%417, %cst_138) {name = "shift-right-logical.1012"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %426 = "mhlo.convert"(%425) {name = "convert.1013"} : (tensor<ui64>) -> tensor<ui32>
      %427 = "mhlo.convert"(%426) {name = "convert.1015"} : (tensor<ui32>) -> tensor<ui64>
      %cst_139 = "std.constant"() {name = "constant.1021", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %428 = "mhlo.shift_right_logical"(%427, %cst_139) {name = "shift-right-logical.1022"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %429 = "mhlo.convert"(%428) {name = "convert.1023"} : (tensor<ui64>) -> tensor<ui32>
      %430 = "mhlo.xor"(%424, %429) {name = "xor.1042"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %431 = "mhlo.xor"(%430, %cst_124) {name = "xor.1043"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %432 = "mhlo.convert"(%431) {name = "convert.1055"} : (tensor<ui32>) -> tensor<ui64>
      %cst_140 = "std.constant"() {name = "constant.1056", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %433 = "mhlo.multiply"(%432, %cst_140) {name = "multiply.1057"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_141 = "std.constant"() {name = "constant.1059", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %434 = "mhlo.shift_right_logical"(%433, %cst_141) {name = "shift-right-logical.1060"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %435 = "mhlo.convert"(%434) {name = "convert.1061"} : (tensor<ui64>) -> tensor<ui32>
      %436 = "mhlo.convert"(%427) {name = "convert.1020"} : (tensor<ui64>) -> tensor<ui32>
      %437 = "mhlo.convert"(%436) {name = "convert.1033"} : (tensor<ui32>) -> tensor<ui64>
      %cst_142 = "std.constant"() {name = "constant.1034", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %438 = "mhlo.multiply"(%437, %cst_142) {name = "multiply.1035"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %439 = "mhlo.convert"(%438) {name = "convert.1036"} : (tensor<ui64>) -> tensor<ui32>
      %440 = "mhlo.xor"(%435, %439) {name = "xor.1062"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %441 = "mhlo.xor"(%440, %386) {name = "xor.1063"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %442 = "mhlo.convert"(%441) {name = "convert.1070"} : (tensor<ui32>) -> tensor<ui64>
      %cst_143 = "std.constant"() {name = "constant.1071", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %443 = "mhlo.multiply"(%442, %cst_143) {name = "multiply.1072"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_144 = "std.constant"() {name = "constant.1074", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %444 = "mhlo.shift_right_logical"(%443, %cst_144) {name = "shift-right-logical.1075"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %445 = "mhlo.convert"(%444) {name = "convert.1076"} : (tensor<ui64>) -> tensor<ui32>
      %cst_145 = "std.constant"() {name = "constant.1037", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %446 = "mhlo.shift_right_logical"(%438, %cst_145) {name = "shift-right-logical.1038"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %447 = "mhlo.convert"(%446) {name = "convert.1039"} : (tensor<ui64>) -> tensor<ui32>
      %cst_146 = "std.constant"() {name = "constant.1017", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %448 = "mhlo.shift_right_logical"(%419, %cst_146) {name = "shift-right-logical.1018"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %449 = "mhlo.convert"(%448) {name = "convert.1019"} : (tensor<ui64>) -> tensor<ui32>
      %450 = "mhlo.xor"(%447, %449) {name = "xor.1040"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %451 = "mhlo.xor"(%450, %cst_113) {name = "xor.1041"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %452 = "mhlo.convert"(%451) {name = "convert.1048"} : (tensor<ui32>) -> tensor<ui64>
      %cst_147 = "std.constant"() {name = "constant.1049", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %453 = "mhlo.multiply"(%452, %cst_147) {name = "multiply.1050"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %454 = "mhlo.convert"(%453) {name = "convert.1051"} : (tensor<ui64>) -> tensor<ui32>
      %455 = "mhlo.xor"(%445, %454) {name = "xor.1086"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %456 = "mhlo.xor"(%455, %397) {name = "xor.1087"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %457 = "mhlo.convert"(%456) {name = "convert.1099"} : (tensor<ui32>) -> tensor<ui64>
      %cst_148 = "std.constant"() {name = "constant.1100", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %458 = "mhlo.multiply"(%457, %cst_148) {name = "multiply.1101"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_149 = "std.constant"() {name = "constant.1103", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %459 = "mhlo.shift_right_logical"(%458, %cst_149) {name = "shift-right-logical.1104"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %460 = "mhlo.convert"(%459) {name = "convert.1105"} : (tensor<ui64>) -> tensor<ui32>
      %cst_150 = "std.constant"() {name = "constant.1052", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %461 = "mhlo.shift_right_logical"(%453, %cst_150) {name = "shift-right-logical.1053"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %462 = "mhlo.convert"(%461) {name = "convert.1054"} : (tensor<ui64>) -> tensor<ui32>
      %463 = "mhlo.convert"(%422) {name = "convert.1029"} : (tensor<ui64>) -> tensor<ui32>
      %464 = "mhlo.xor"(%462, %463) {name = "xor.1064"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %465 = "mhlo.xor"(%464, %396) {name = "xor.1065"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %466 = "mhlo.convert"(%465) {name = "convert.1077"} : (tensor<ui32>) -> tensor<ui64>
      %cst_151 = "std.constant"() {name = "constant.1078", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %467 = "mhlo.multiply"(%466, %cst_151) {name = "multiply.1079"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %468 = "mhlo.convert"(%467) {name = "convert.1080"} : (tensor<ui64>) -> tensor<ui32>
      %469 = "mhlo.xor"(%460, %468) {name = "xor.1106"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %470 = "mhlo.xor"(%469, %388) {name = "xor.1107"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %471 = "mhlo.convert"(%470) {name = "convert.1114"} : (tensor<ui32>) -> tensor<ui64>
      %cst_152 = "std.constant"() {name = "constant.1115", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %472 = "mhlo.multiply"(%471, %cst_152) {name = "multiply.1116"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_153 = "std.constant"() {name = "constant.1118", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %473 = "mhlo.shift_right_logical"(%472, %cst_153) {name = "shift-right-logical.1119"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %474 = "mhlo.convert"(%473) {name = "convert.1120"} : (tensor<ui64>) -> tensor<ui32>
      %cst_154 = "std.constant"() {name = "constant.1081", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %475 = "mhlo.shift_right_logical"(%467, %cst_154) {name = "shift-right-logical.1082"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %476 = "mhlo.convert"(%475) {name = "convert.1083"} : (tensor<ui64>) -> tensor<ui32>
      %477 = "mhlo.convert"(%433) {name = "convert.1058"} : (tensor<ui64>) -> tensor<ui32>
      %478 = "mhlo.xor"(%476, %477) {name = "xor.1084"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %479 = "mhlo.xor"(%478, %387) {name = "xor.1085"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %480 = "mhlo.convert"(%479) {name = "convert.1092"} : (tensor<ui32>) -> tensor<ui64>
      %cst_155 = "std.constant"() {name = "constant.1093", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %481 = "mhlo.multiply"(%480, %cst_155) {name = "multiply.1094"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %482 = "mhlo.convert"(%481) {name = "convert.1095"} : (tensor<ui64>) -> tensor<ui32>
      %483 = "mhlo.xor"(%474, %482) {name = "xor.1130"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %484 = "mhlo.xor"(%483, %399) {name = "xor.1131"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %485 = "mhlo.convert"(%484) {name = "convert.1143"} : (tensor<ui32>) -> tensor<ui64>
      %cst_156 = "std.constant"() {name = "constant.1144", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %486 = "mhlo.multiply"(%485, %cst_156) {name = "multiply.1145"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_157 = "std.constant"() {name = "constant.1147", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %487 = "mhlo.shift_right_logical"(%486, %cst_157) {name = "shift-right-logical.1148"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %488 = "mhlo.convert"(%487) {name = "convert.1149"} : (tensor<ui64>) -> tensor<ui32>
      %cst_158 = "std.constant"() {name = "constant.1096", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %489 = "mhlo.shift_right_logical"(%481, %cst_158) {name = "shift-right-logical.1097"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %490 = "mhlo.convert"(%489) {name = "convert.1098"} : (tensor<ui64>) -> tensor<ui32>
      %491 = "mhlo.convert"(%443) {name = "convert.1073"} : (tensor<ui64>) -> tensor<ui32>
      %492 = "mhlo.xor"(%490, %491) {name = "xor.1108"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %493 = "mhlo.xor"(%492, %398) {name = "xor.1109"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %494 = "mhlo.convert"(%493) {name = "convert.1121"} : (tensor<ui32>) -> tensor<ui64>
      %cst_159 = "std.constant"() {name = "constant.1122", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %495 = "mhlo.multiply"(%494, %cst_159) {name = "multiply.1123"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %496 = "mhlo.convert"(%495) {name = "convert.1124"} : (tensor<ui64>) -> tensor<ui32>
      %497 = "mhlo.xor"(%488, %496) {name = "xor.1150"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %498 = "mhlo.xor"(%497, %390) {name = "xor.1151"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %499 = "mhlo.convert"(%498) {name = "convert.1158"} : (tensor<ui32>) -> tensor<ui64>
      %cst_160 = "std.constant"() {name = "constant.1159", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %500 = "mhlo.multiply"(%499, %cst_160) {name = "multiply.1160"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_161 = "std.constant"() {name = "constant.1162", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %501 = "mhlo.shift_right_logical"(%500, %cst_161) {name = "shift-right-logical.1163"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %502 = "mhlo.convert"(%501) {name = "convert.1164"} : (tensor<ui64>) -> tensor<ui32>
      %cst_162 = "std.constant"() {name = "constant.1125", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %503 = "mhlo.shift_right_logical"(%495, %cst_162) {name = "shift-right-logical.1126"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %504 = "mhlo.convert"(%503) {name = "convert.1127"} : (tensor<ui64>) -> tensor<ui32>
      %505 = "mhlo.convert"(%458) {name = "convert.1102"} : (tensor<ui64>) -> tensor<ui32>
      %506 = "mhlo.xor"(%504, %505) {name = "xor.1128"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %507 = "mhlo.xor"(%506, %389) {name = "xor.1129"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %508 = "mhlo.convert"(%507) {name = "convert.1136"} : (tensor<ui32>) -> tensor<ui64>
      %cst_163 = "std.constant"() {name = "constant.1137", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %509 = "mhlo.multiply"(%508, %cst_163) {name = "multiply.1138"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %510 = "mhlo.convert"(%509) {name = "convert.1139"} : (tensor<ui64>) -> tensor<ui32>
      %511 = "mhlo.xor"(%502, %510) {name = "xor.1174"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %512 = "mhlo.xor"(%511, %401) {name = "xor.1175"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %513 = "mhlo.convert"(%512) {name = "convert.1187"} : (tensor<ui32>) -> tensor<ui64>
      %cst_164 = "std.constant"() {name = "constant.1188", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %514 = "mhlo.multiply"(%513, %cst_164) {name = "multiply.1189"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_165 = "std.constant"() {name = "constant.1191", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %515 = "mhlo.shift_right_logical"(%514, %cst_165) {name = "shift-right-logical.1192"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %516 = "mhlo.convert"(%515) {name = "convert.1193"} : (tensor<ui64>) -> tensor<ui32>
      %cst_166 = "std.constant"() {name = "constant.1140", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %517 = "mhlo.shift_right_logical"(%509, %cst_166) {name = "shift-right-logical.1141"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %518 = "mhlo.convert"(%517) {name = "convert.1142"} : (tensor<ui64>) -> tensor<ui32>
      %519 = "mhlo.convert"(%472) {name = "convert.1117"} : (tensor<ui64>) -> tensor<ui32>
      %520 = "mhlo.xor"(%518, %519) {name = "xor.1152"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %521 = "mhlo.xor"(%520, %400) {name = "xor.1153"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %522 = "mhlo.convert"(%521) {name = "convert.1165"} : (tensor<ui32>) -> tensor<ui64>
      %cst_167 = "std.constant"() {name = "constant.1166", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %523 = "mhlo.multiply"(%522, %cst_167) {name = "multiply.1167"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %524 = "mhlo.convert"(%523) {name = "convert.1168"} : (tensor<ui64>) -> tensor<ui32>
      %525 = "mhlo.xor"(%516, %524) {name = "xor.1194"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %526 = "mhlo.xor"(%525, %392) {name = "xor.1195"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %527 = "mhlo.convert"(%526) {name = "convert.1202"} : (tensor<ui32>) -> tensor<ui64>
      %cst_168 = "std.constant"() {name = "constant.1203", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %528 = "mhlo.multiply"(%527, %cst_168) {name = "multiply.1204"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_169 = "std.constant"() {name = "constant.1206", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %529 = "mhlo.shift_right_logical"(%528, %cst_169) {name = "shift-right-logical.1207"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %530 = "mhlo.convert"(%529) {name = "convert.1208"} : (tensor<ui64>) -> tensor<ui32>
      %cst_170 = "std.constant"() {name = "constant.1169", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %531 = "mhlo.shift_right_logical"(%523, %cst_170) {name = "shift-right-logical.1170"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %532 = "mhlo.convert"(%531) {name = "convert.1171"} : (tensor<ui64>) -> tensor<ui32>
      %533 = "mhlo.convert"(%486) {name = "convert.1146"} : (tensor<ui64>) -> tensor<ui32>
      %534 = "mhlo.xor"(%532, %533) {name = "xor.1172"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %535 = "mhlo.xor"(%534, %391) {name = "xor.1173"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %536 = "mhlo.convert"(%535) {name = "convert.1180"} : (tensor<ui32>) -> tensor<ui64>
      %cst_171 = "std.constant"() {name = "constant.1181", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %537 = "mhlo.multiply"(%536, %cst_171) {name = "multiply.1182"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %538 = "mhlo.convert"(%537) {name = "convert.1183"} : (tensor<ui64>) -> tensor<ui32>
      %539 = "mhlo.xor"(%530, %538) {name = "xor.1218"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %540 = "mhlo.xor"(%539, %403) {name = "xor.1219"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %541 = "mhlo.convert"(%540) {name = "convert.1231"} : (tensor<ui32>) -> tensor<ui64>
      %cst_172 = "std.constant"() {name = "constant.1232", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %542 = "mhlo.multiply"(%541, %cst_172) {name = "multiply.1233"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_173 = "std.constant"() {name = "constant.1235", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %543 = "mhlo.shift_right_logical"(%542, %cst_173) {name = "shift-right-logical.1236"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %544 = "mhlo.convert"(%543) {name = "convert.1237"} : (tensor<ui64>) -> tensor<ui32>
      %cst_174 = "std.constant"() {name = "constant.1184", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %545 = "mhlo.shift_right_logical"(%537, %cst_174) {name = "shift-right-logical.1185"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %546 = "mhlo.convert"(%545) {name = "convert.1186"} : (tensor<ui64>) -> tensor<ui32>
      %547 = "mhlo.convert"(%500) {name = "convert.1161"} : (tensor<ui64>) -> tensor<ui32>
      %548 = "mhlo.xor"(%546, %547) {name = "xor.1196"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %549 = "mhlo.xor"(%548, %402) {name = "xor.1197"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %550 = "mhlo.convert"(%549) {name = "convert.1209"} : (tensor<ui32>) -> tensor<ui64>
      %cst_175 = "std.constant"() {name = "constant.1210", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %551 = "mhlo.multiply"(%550, %cst_175) {name = "multiply.1211"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %552 = "mhlo.convert"(%551) {name = "convert.1212"} : (tensor<ui64>) -> tensor<ui32>
      %553 = "mhlo.xor"(%544, %552) {name = "xor.1238"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %554 = "mhlo.xor"(%553, %394) {name = "xor.1239"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %555 = "mhlo.convert"(%554) {name = "convert.1260"} : (tensor<ui32>) -> tensor<ui64>
      %556 = "mhlo.convert"(%542) {name = "convert.1234"} : (tensor<ui64>) -> tensor<ui32>
      %557 = "mhlo.convert"(%556) {name = "convert.1261"} : (tensor<ui32>) -> tensor<ui64>
      %cst_176 = "std.constant"() {name = "constant.1262", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %558 = "mhlo.shift_left"(%557, %cst_176) {name = "shift-left.1263"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %559 = "mhlo.or"(%555, %558) {name = "or.1264"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %560 = "mhlo.reshape"(%559) {name = "reshape.1265"} : (tensor<ui64>) -> tensor<1xui64>
      %cst_177 = "std.constant"() {name = "constant.1246", value = dense<0> : tensor<ui32>} : () -> tensor<ui32>
      %561 = "mhlo.convert"(%cst_177) {name = "convert.1247"} : (tensor<ui32>) -> tensor<ui64>
      %562 = "mhlo.convert"(%cst_177) {name = "convert.1248"} : (tensor<ui32>) -> tensor<ui64>
      %cst_178 = "std.constant"() {name = "constant.1249", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %563 = "mhlo.shift_left"(%562, %cst_178) {name = "shift-left.1250"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %564 = "mhlo.or"(%561, %563) {name = "or.1251"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %565 = "mhlo.reshape"(%564) {name = "reshape.1257"} : (tensor<ui64>) -> tensor<1xui64>
      %cst_179 = "std.constant"() {name = "constant.1213", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %566 = "mhlo.shift_right_logical"(%551, %cst_179) {name = "shift-right-logical.1214"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %567 = "mhlo.convert"(%566) {name = "convert.1215"} : (tensor<ui64>) -> tensor<ui32>
      %568 = "mhlo.convert"(%514) {name = "convert.1190"} : (tensor<ui64>) -> tensor<ui32>
      %569 = "mhlo.xor"(%567, %568) {name = "xor.1216"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %570 = "mhlo.xor"(%569, %393) {name = "xor.1217"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %571 = "mhlo.convert"(%570) {name = "convert.1224"} : (tensor<ui32>) -> tensor<ui64>
      %cst_180 = "std.constant"() {name = "constant.1225", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %572 = "mhlo.multiply"(%571, %cst_180) {name = "multiply.1226"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_181 = "std.constant"() {name = "constant.1228", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %573 = "mhlo.shift_right_logical"(%572, %cst_181) {name = "shift-right-logical.1229"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %574 = "mhlo.convert"(%573) {name = "convert.1230"} : (tensor<ui64>) -> tensor<ui32>
      %575 = "mhlo.convert"(%528) {name = "convert.1205"} : (tensor<ui64>) -> tensor<ui32>
      %576 = "mhlo.xor"(%574, %575) {name = "xor.1240"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %577 = "mhlo.xor"(%576, %404) {name = "xor.1241"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %578 = "mhlo.convert"(%577) {name = "convert.1252"} : (tensor<ui32>) -> tensor<ui64>
      %579 = "mhlo.convert"(%572) {name = "convert.1227"} : (tensor<ui64>) -> tensor<ui32>
      %580 = "mhlo.convert"(%579) {name = "convert.1253"} : (tensor<ui32>) -> tensor<ui64>
      %cst_182 = "std.constant"() {name = "constant.1254", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %581 = "mhlo.shift_left"(%580, %cst_182) {name = "shift-left.1255"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %582 = "mhlo.or"(%578, %581) {name = "or.1256"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %583 = "mhlo.reshape"(%582) {name = "reshape.1258"} : (tensor<ui64>) -> tensor<1xui64>
      %584 = "mhlo.concatenate"(%565, %583) {dimension = 0 : i64} : (tensor<1xui64>, tensor<1xui64>) -> tensor<2xui64>
      %585 = "mhlo.concatenate"(%560, %584) {dimension = 0 : i64} : (tensor<1xui64>, tensor<2xui64>) -> tensor<3xui64>
      %586 = "mhlo.rng_bit_generator"(%585) {rng_algorithm = 2 : i32} : (tensor<3xui64>) -> tuple<tensor<3xui64>, tensor<2x2xui32>>
      %587 = "mhlo.get_tuple_element"(%586) {index = 0 : i32, name = "get-tuple-element.1269"} : (tuple<tensor<3xui64>, tensor<2x2xui32>>) -> tensor<3xui64>
      %cst_183 = "std.constant"() {name = "constant.1284", value = dense<0> : tensor<ui64>} : () -> tensor<ui64>
      %cst_184 = "std.constant"() {name = "constant.1299", value = dense<1053357856> : tensor<ui32>} : () -> tensor<ui32>
      %cst_185 = "std.constant"() {name = "constant.1319", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %588 = "mhlo.add"(%cst_184, %cst_185) {name = "add.1320"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_186 = "std.constant"() {name = "constant.1341", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %589 = "mhlo.add"(%588, %cst_186) {name = "add.1342"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_187 = "std.constant"() {name = "constant.1363", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %590 = "mhlo.add"(%589, %cst_187) {name = "add.1364"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_188 = "std.constant"() {name = "constant.1385", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %591 = "mhlo.add"(%590, %cst_188) {name = "add.1386"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_189 = "std.constant"() {name = "constant.1407", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %592 = "mhlo.add"(%591, %cst_189) {name = "add.1408"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_190 = "std.constant"() {name = "constant.1429", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %593 = "mhlo.add"(%592, %cst_190) {name = "add.1430"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_191 = "std.constant"() {name = "constant.1451", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %594 = "mhlo.add"(%593, %cst_191) {name = "add.1452"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_192 = "std.constant"() {name = "constant.1473", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %595 = "mhlo.add"(%594, %cst_192) {name = "add.1474"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_193 = "std.constant"() {name = "constant.1495", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %596 = "mhlo.add"(%595, %cst_193) {name = "add.1496"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_194 = "std.constant"() {name = "constant.1517", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %597 = "mhlo.add"(%596, %cst_194) {name = "add.1518"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_195 = "std.constant"() {name = "constant.1300", value = dense<38149673> : tensor<ui32>} : () -> tensor<ui32>
      %cst_196 = "std.constant"() {name = "constant.1321", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %598 = "mhlo.add"(%cst_195, %cst_196) {name = "add.1322"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_197 = "std.constant"() {name = "constant.1343", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %599 = "mhlo.add"(%598, %cst_197) {name = "add.1344"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_198 = "std.constant"() {name = "constant.1365", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %600 = "mhlo.add"(%599, %cst_198) {name = "add.1366"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_199 = "std.constant"() {name = "constant.1387", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %601 = "mhlo.add"(%600, %cst_199) {name = "add.1388"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_200 = "std.constant"() {name = "constant.1409", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %602 = "mhlo.add"(%601, %cst_200) {name = "add.1410"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_201 = "std.constant"() {name = "constant.1431", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %603 = "mhlo.add"(%602, %cst_201) {name = "add.1432"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_202 = "std.constant"() {name = "constant.1453", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %604 = "mhlo.add"(%603, %cst_202) {name = "add.1454"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_203 = "std.constant"() {name = "constant.1475", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %605 = "mhlo.add"(%604, %cst_203) {name = "add.1476"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_204 = "std.constant"() {name = "constant.1497", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %606 = "mhlo.add"(%605, %cst_204) {name = "add.1498"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_205 = "std.constant"() {name = "constant.1519", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %607 = "mhlo.add"(%606, %cst_205) {name = "add.1520"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %608 = "mhlo.get_tuple_element"(%586) {index = 1 : i32, name = "get-tuple-element.1268"} : (tuple<tensor<3xui64>, tensor<2x2xui32>>) -> tensor<2x2xui32>
      %609 = "mhlo.bitcast_convert"(%608) {name = "bitcast-convert.1270"} : (tensor<2x2xui32>) -> tensor<2x2xi32>
      %610 = "mhlo.slice"(%609) {limit_indices = dense<[1, 2]> : tensor<2xi64>, start_indices = dense<0> : tensor<2xi64>, strides = dense<1> : tensor<2xi64>} : (tensor<2x2xi32>) -> tensor<1x2xi32>
      %611 = "mhlo.reshape"(%610) {name = "reshape.1272"} : (tensor<1x2xi32>) -> tensor<2xi32>
      %612 = "mhlo.slice"(%611) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
      %613 = "mhlo.reshape"(%612) {name = "reshape.1276"} : (tensor<1xi32>) -> tensor<i32>
      %614 = "mhlo.convert"(%613) {name = "convert.1279"} : (tensor<i32>) -> tensor<ui64>
      %615 = "mhlo.slice"(%611) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
      %616 = "mhlo.reshape"(%615) {name = "reshape.1278"} : (tensor<1xi32>) -> tensor<i32>
      %617 = "mhlo.convert"(%616) {name = "convert.1280"} : (tensor<i32>) -> tensor<ui64>
      %cst_206 = "std.constant"() {name = "constant.1281", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %618 = "mhlo.shift_left"(%617, %cst_206) {name = "shift-left.1282"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %619 = "mhlo.or"(%614, %618) {name = "or.1283"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %620 = "mhlo.convert"(%619) {name = "convert.1286"} : (tensor<ui64>) -> tensor<ui32>
      %621 = "mhlo.convert"(%620) {name = "convert.1289"} : (tensor<ui32>) -> tensor<ui64>
      %622 = "mhlo.convert"(%621) {name = "convert.1291"} : (tensor<ui64>) -> tensor<ui32>
      %623 = "mhlo.convert"(%622) {name = "convert.1301"} : (tensor<ui32>) -> tensor<ui64>
      %cst_207 = "std.constant"() {name = "constant.1302", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %624 = "mhlo.multiply"(%623, %cst_207) {name = "multiply.1303"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_208 = "std.constant"() {name = "constant.1305", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %625 = "mhlo.shift_right_logical"(%624, %cst_208) {name = "shift-right-logical.1306"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %626 = "mhlo.convert"(%625) {name = "convert.1307"} : (tensor<ui64>) -> tensor<ui32>
      %cst_209 = "std.constant"() {name = "constant.1285", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %627 = "mhlo.shift_right_logical"(%619, %cst_209) {name = "shift-right-logical.1287"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %628 = "mhlo.convert"(%627) {name = "convert.1288"} : (tensor<ui64>) -> tensor<ui32>
      %629 = "mhlo.convert"(%628) {name = "convert.1290"} : (tensor<ui32>) -> tensor<ui64>
      %cst_210 = "std.constant"() {name = "constant.1296", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %630 = "mhlo.shift_right_logical"(%629, %cst_210) {name = "shift-right-logical.1297"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %631 = "mhlo.convert"(%630) {name = "convert.1298"} : (tensor<ui64>) -> tensor<ui32>
      %632 = "mhlo.xor"(%626, %631) {name = "xor.1317"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %633 = "mhlo.xor"(%632, %cst_195) {name = "xor.1318"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %634 = "mhlo.convert"(%633) {name = "convert.1330"} : (tensor<ui32>) -> tensor<ui64>
      %cst_211 = "std.constant"() {name = "constant.1331", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %635 = "mhlo.multiply"(%634, %cst_211) {name = "multiply.1332"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_212 = "std.constant"() {name = "constant.1334", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %636 = "mhlo.shift_right_logical"(%635, %cst_212) {name = "shift-right-logical.1335"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %637 = "mhlo.convert"(%636) {name = "convert.1336"} : (tensor<ui64>) -> tensor<ui32>
      %638 = "mhlo.convert"(%629) {name = "convert.1295"} : (tensor<ui64>) -> tensor<ui32>
      %639 = "mhlo.convert"(%638) {name = "convert.1308"} : (tensor<ui32>) -> tensor<ui64>
      %cst_213 = "std.constant"() {name = "constant.1309", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %640 = "mhlo.multiply"(%639, %cst_213) {name = "multiply.1310"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %641 = "mhlo.convert"(%640) {name = "convert.1311"} : (tensor<ui64>) -> tensor<ui32>
      %642 = "mhlo.xor"(%637, %641) {name = "xor.1337"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %643 = "mhlo.xor"(%642, %588) {name = "xor.1338"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %644 = "mhlo.convert"(%643) {name = "convert.1345"} : (tensor<ui32>) -> tensor<ui64>
      %cst_214 = "std.constant"() {name = "constant.1346", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %645 = "mhlo.multiply"(%644, %cst_214) {name = "multiply.1347"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_215 = "std.constant"() {name = "constant.1349", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %646 = "mhlo.shift_right_logical"(%645, %cst_215) {name = "shift-right-logical.1350"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %647 = "mhlo.convert"(%646) {name = "convert.1351"} : (tensor<ui64>) -> tensor<ui32>
      %cst_216 = "std.constant"() {name = "constant.1312", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %648 = "mhlo.shift_right_logical"(%640, %cst_216) {name = "shift-right-logical.1313"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %649 = "mhlo.convert"(%648) {name = "convert.1314"} : (tensor<ui64>) -> tensor<ui32>
      %cst_217 = "std.constant"() {name = "constant.1292", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %650 = "mhlo.shift_right_logical"(%621, %cst_217) {name = "shift-right-logical.1293"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %651 = "mhlo.convert"(%650) {name = "convert.1294"} : (tensor<ui64>) -> tensor<ui32>
      %652 = "mhlo.xor"(%649, %651) {name = "xor.1315"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %653 = "mhlo.xor"(%652, %cst_184) {name = "xor.1316"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %654 = "mhlo.convert"(%653) {name = "convert.1323"} : (tensor<ui32>) -> tensor<ui64>
      %cst_218 = "std.constant"() {name = "constant.1324", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %655 = "mhlo.multiply"(%654, %cst_218) {name = "multiply.1325"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %656 = "mhlo.convert"(%655) {name = "convert.1326"} : (tensor<ui64>) -> tensor<ui32>
      %657 = "mhlo.xor"(%647, %656) {name = "xor.1361"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %658 = "mhlo.xor"(%657, %599) {name = "xor.1362"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %659 = "mhlo.convert"(%658) {name = "convert.1374"} : (tensor<ui32>) -> tensor<ui64>
      %cst_219 = "std.constant"() {name = "constant.1375", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %660 = "mhlo.multiply"(%659, %cst_219) {name = "multiply.1376"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_220 = "std.constant"() {name = "constant.1378", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %661 = "mhlo.shift_right_logical"(%660, %cst_220) {name = "shift-right-logical.1379"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %662 = "mhlo.convert"(%661) {name = "convert.1380"} : (tensor<ui64>) -> tensor<ui32>
      %cst_221 = "std.constant"() {name = "constant.1327", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %663 = "mhlo.shift_right_logical"(%655, %cst_221) {name = "shift-right-logical.1328"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %664 = "mhlo.convert"(%663) {name = "convert.1329"} : (tensor<ui64>) -> tensor<ui32>
      %665 = "mhlo.convert"(%624) {name = "convert.1304"} : (tensor<ui64>) -> tensor<ui32>
      %666 = "mhlo.xor"(%664, %665) {name = "xor.1339"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %667 = "mhlo.xor"(%666, %598) {name = "xor.1340"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %668 = "mhlo.convert"(%667) {name = "convert.1352"} : (tensor<ui32>) -> tensor<ui64>
      %cst_222 = "std.constant"() {name = "constant.1353", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %669 = "mhlo.multiply"(%668, %cst_222) {name = "multiply.1354"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %670 = "mhlo.convert"(%669) {name = "convert.1355"} : (tensor<ui64>) -> tensor<ui32>
      %671 = "mhlo.xor"(%662, %670) {name = "xor.1381"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %672 = "mhlo.xor"(%671, %590) {name = "xor.1382"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %673 = "mhlo.convert"(%672) {name = "convert.1389"} : (tensor<ui32>) -> tensor<ui64>
      %cst_223 = "std.constant"() {name = "constant.1390", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %674 = "mhlo.multiply"(%673, %cst_223) {name = "multiply.1391"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_224 = "std.constant"() {name = "constant.1393", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %675 = "mhlo.shift_right_logical"(%674, %cst_224) {name = "shift-right-logical.1394"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %676 = "mhlo.convert"(%675) {name = "convert.1395"} : (tensor<ui64>) -> tensor<ui32>
      %cst_225 = "std.constant"() {name = "constant.1356", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %677 = "mhlo.shift_right_logical"(%669, %cst_225) {name = "shift-right-logical.1357"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %678 = "mhlo.convert"(%677) {name = "convert.1358"} : (tensor<ui64>) -> tensor<ui32>
      %679 = "mhlo.convert"(%635) {name = "convert.1333"} : (tensor<ui64>) -> tensor<ui32>
      %680 = "mhlo.xor"(%678, %679) {name = "xor.1359"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %681 = "mhlo.xor"(%680, %589) {name = "xor.1360"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %682 = "mhlo.convert"(%681) {name = "convert.1367"} : (tensor<ui32>) -> tensor<ui64>
      %cst_226 = "std.constant"() {name = "constant.1368", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %683 = "mhlo.multiply"(%682, %cst_226) {name = "multiply.1369"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %684 = "mhlo.convert"(%683) {name = "convert.1370"} : (tensor<ui64>) -> tensor<ui32>
      %685 = "mhlo.xor"(%676, %684) {name = "xor.1405"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %686 = "mhlo.xor"(%685, %601) {name = "xor.1406"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %687 = "mhlo.convert"(%686) {name = "convert.1418"} : (tensor<ui32>) -> tensor<ui64>
      %cst_227 = "std.constant"() {name = "constant.1419", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %688 = "mhlo.multiply"(%687, %cst_227) {name = "multiply.1420"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_228 = "std.constant"() {name = "constant.1422", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %689 = "mhlo.shift_right_logical"(%688, %cst_228) {name = "shift-right-logical.1423"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %690 = "mhlo.convert"(%689) {name = "convert.1424"} : (tensor<ui64>) -> tensor<ui32>
      %cst_229 = "std.constant"() {name = "constant.1371", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %691 = "mhlo.shift_right_logical"(%683, %cst_229) {name = "shift-right-logical.1372"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %692 = "mhlo.convert"(%691) {name = "convert.1373"} : (tensor<ui64>) -> tensor<ui32>
      %693 = "mhlo.convert"(%645) {name = "convert.1348"} : (tensor<ui64>) -> tensor<ui32>
      %694 = "mhlo.xor"(%692, %693) {name = "xor.1383"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %695 = "mhlo.xor"(%694, %600) {name = "xor.1384"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %696 = "mhlo.convert"(%695) {name = "convert.1396"} : (tensor<ui32>) -> tensor<ui64>
      %cst_230 = "std.constant"() {name = "constant.1397", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %697 = "mhlo.multiply"(%696, %cst_230) {name = "multiply.1398"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %698 = "mhlo.convert"(%697) {name = "convert.1399"} : (tensor<ui64>) -> tensor<ui32>
      %699 = "mhlo.xor"(%690, %698) {name = "xor.1425"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %700 = "mhlo.xor"(%699, %592) {name = "xor.1426"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %701 = "mhlo.convert"(%700) {name = "convert.1433"} : (tensor<ui32>) -> tensor<ui64>
      %cst_231 = "std.constant"() {name = "constant.1434", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %702 = "mhlo.multiply"(%701, %cst_231) {name = "multiply.1435"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_232 = "std.constant"() {name = "constant.1437", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %703 = "mhlo.shift_right_logical"(%702, %cst_232) {name = "shift-right-logical.1438"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %704 = "mhlo.convert"(%703) {name = "convert.1439"} : (tensor<ui64>) -> tensor<ui32>
      %cst_233 = "std.constant"() {name = "constant.1400", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %705 = "mhlo.shift_right_logical"(%697, %cst_233) {name = "shift-right-logical.1401"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %706 = "mhlo.convert"(%705) {name = "convert.1402"} : (tensor<ui64>) -> tensor<ui32>
      %707 = "mhlo.convert"(%660) {name = "convert.1377"} : (tensor<ui64>) -> tensor<ui32>
      %708 = "mhlo.xor"(%706, %707) {name = "xor.1403"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %709 = "mhlo.xor"(%708, %591) {name = "xor.1404"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %710 = "mhlo.convert"(%709) {name = "convert.1411"} : (tensor<ui32>) -> tensor<ui64>
      %cst_234 = "std.constant"() {name = "constant.1412", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %711 = "mhlo.multiply"(%710, %cst_234) {name = "multiply.1413"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %712 = "mhlo.convert"(%711) {name = "convert.1414"} : (tensor<ui64>) -> tensor<ui32>
      %713 = "mhlo.xor"(%704, %712) {name = "xor.1449"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %714 = "mhlo.xor"(%713, %603) {name = "xor.1450"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %715 = "mhlo.convert"(%714) {name = "convert.1462"} : (tensor<ui32>) -> tensor<ui64>
      %cst_235 = "std.constant"() {name = "constant.1463", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %716 = "mhlo.multiply"(%715, %cst_235) {name = "multiply.1464"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_236 = "std.constant"() {name = "constant.1466", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %717 = "mhlo.shift_right_logical"(%716, %cst_236) {name = "shift-right-logical.1467"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %718 = "mhlo.convert"(%717) {name = "convert.1468"} : (tensor<ui64>) -> tensor<ui32>
      %cst_237 = "std.constant"() {name = "constant.1415", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %719 = "mhlo.shift_right_logical"(%711, %cst_237) {name = "shift-right-logical.1416"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %720 = "mhlo.convert"(%719) {name = "convert.1417"} : (tensor<ui64>) -> tensor<ui32>
      %721 = "mhlo.convert"(%674) {name = "convert.1392"} : (tensor<ui64>) -> tensor<ui32>
      %722 = "mhlo.xor"(%720, %721) {name = "xor.1427"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %723 = "mhlo.xor"(%722, %602) {name = "xor.1428"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %724 = "mhlo.convert"(%723) {name = "convert.1440"} : (tensor<ui32>) -> tensor<ui64>
      %cst_238 = "std.constant"() {name = "constant.1441", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %725 = "mhlo.multiply"(%724, %cst_238) {name = "multiply.1442"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %726 = "mhlo.convert"(%725) {name = "convert.1443"} : (tensor<ui64>) -> tensor<ui32>
      %727 = "mhlo.xor"(%718, %726) {name = "xor.1469"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %728 = "mhlo.xor"(%727, %594) {name = "xor.1470"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %729 = "mhlo.convert"(%728) {name = "convert.1477"} : (tensor<ui32>) -> tensor<ui64>
      %cst_239 = "std.constant"() {name = "constant.1478", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %730 = "mhlo.multiply"(%729, %cst_239) {name = "multiply.1479"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_240 = "std.constant"() {name = "constant.1481", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %731 = "mhlo.shift_right_logical"(%730, %cst_240) {name = "shift-right-logical.1482"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %732 = "mhlo.convert"(%731) {name = "convert.1483"} : (tensor<ui64>) -> tensor<ui32>
      %cst_241 = "std.constant"() {name = "constant.1444", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %733 = "mhlo.shift_right_logical"(%725, %cst_241) {name = "shift-right-logical.1445"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %734 = "mhlo.convert"(%733) {name = "convert.1446"} : (tensor<ui64>) -> tensor<ui32>
      %735 = "mhlo.convert"(%688) {name = "convert.1421"} : (tensor<ui64>) -> tensor<ui32>
      %736 = "mhlo.xor"(%734, %735) {name = "xor.1447"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %737 = "mhlo.xor"(%736, %593) {name = "xor.1448"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %738 = "mhlo.convert"(%737) {name = "convert.1455"} : (tensor<ui32>) -> tensor<ui64>
      %cst_242 = "std.constant"() {name = "constant.1456", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %739 = "mhlo.multiply"(%738, %cst_242) {name = "multiply.1457"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %740 = "mhlo.convert"(%739) {name = "convert.1458"} : (tensor<ui64>) -> tensor<ui32>
      %741 = "mhlo.xor"(%732, %740) {name = "xor.1493"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %742 = "mhlo.xor"(%741, %605) {name = "xor.1494"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %743 = "mhlo.convert"(%742) {name = "convert.1506"} : (tensor<ui32>) -> tensor<ui64>
      %cst_243 = "std.constant"() {name = "constant.1507", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %744 = "mhlo.multiply"(%743, %cst_243) {name = "multiply.1508"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_244 = "std.constant"() {name = "constant.1510", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %745 = "mhlo.shift_right_logical"(%744, %cst_244) {name = "shift-right-logical.1511"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %746 = "mhlo.convert"(%745) {name = "convert.1512"} : (tensor<ui64>) -> tensor<ui32>
      %cst_245 = "std.constant"() {name = "constant.1459", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %747 = "mhlo.shift_right_logical"(%739, %cst_245) {name = "shift-right-logical.1460"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %748 = "mhlo.convert"(%747) {name = "convert.1461"} : (tensor<ui64>) -> tensor<ui32>
      %749 = "mhlo.convert"(%702) {name = "convert.1436"} : (tensor<ui64>) -> tensor<ui32>
      %750 = "mhlo.xor"(%748, %749) {name = "xor.1471"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %751 = "mhlo.xor"(%750, %604) {name = "xor.1472"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %752 = "mhlo.convert"(%751) {name = "convert.1484"} : (tensor<ui32>) -> tensor<ui64>
      %cst_246 = "std.constant"() {name = "constant.1485", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %753 = "mhlo.multiply"(%752, %cst_246) {name = "multiply.1486"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %754 = "mhlo.convert"(%753) {name = "convert.1487"} : (tensor<ui64>) -> tensor<ui32>
      %755 = "mhlo.xor"(%746, %754) {name = "xor.1513"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %756 = "mhlo.xor"(%755, %596) {name = "xor.1514"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %757 = "mhlo.convert"(%756) {name = "convert.1535"} : (tensor<ui32>) -> tensor<ui64>
      %758 = "mhlo.convert"(%744) {name = "convert.1509"} : (tensor<ui64>) -> tensor<ui32>
      %759 = "mhlo.convert"(%758) {name = "convert.1536"} : (tensor<ui32>) -> tensor<ui64>
      %cst_247 = "std.constant"() {name = "constant.1537", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %760 = "mhlo.shift_left"(%759, %cst_247) {name = "shift-left.1538"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %761 = "mhlo.or"(%757, %760) {name = "or.1539"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %762 = "mhlo.reshape"(%761) {name = "reshape.1540"} : (tensor<ui64>) -> tensor<1xui64>
      %cst_248 = "std.constant"() {name = "constant.1521", value = dense<0> : tensor<ui32>} : () -> tensor<ui32>
      %763 = "mhlo.convert"(%cst_248) {name = "convert.1522"} : (tensor<ui32>) -> tensor<ui64>
      %764 = "mhlo.convert"(%cst_248) {name = "convert.1523"} : (tensor<ui32>) -> tensor<ui64>
      %cst_249 = "std.constant"() {name = "constant.1524", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %765 = "mhlo.shift_left"(%764, %cst_249) {name = "shift-left.1525"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %766 = "mhlo.or"(%763, %765) {name = "or.1526"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %767 = "mhlo.reshape"(%766) {name = "reshape.1532"} : (tensor<ui64>) -> tensor<1xui64>
      %cst_250 = "std.constant"() {name = "constant.1488", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %768 = "mhlo.shift_right_logical"(%753, %cst_250) {name = "shift-right-logical.1489"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %769 = "mhlo.convert"(%768) {name = "convert.1490"} : (tensor<ui64>) -> tensor<ui32>
      %770 = "mhlo.convert"(%716) {name = "convert.1465"} : (tensor<ui64>) -> tensor<ui32>
      %771 = "mhlo.xor"(%769, %770) {name = "xor.1491"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %772 = "mhlo.xor"(%771, %595) {name = "xor.1492"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %773 = "mhlo.convert"(%772) {name = "convert.1499"} : (tensor<ui32>) -> tensor<ui64>
      %cst_251 = "std.constant"() {name = "constant.1500", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %774 = "mhlo.multiply"(%773, %cst_251) {name = "multiply.1501"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_252 = "std.constant"() {name = "constant.1503", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %775 = "mhlo.shift_right_logical"(%774, %cst_252) {name = "shift-right-logical.1504"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %776 = "mhlo.convert"(%775) {name = "convert.1505"} : (tensor<ui64>) -> tensor<ui32>
      %777 = "mhlo.convert"(%730) {name = "convert.1480"} : (tensor<ui64>) -> tensor<ui32>
      %778 = "mhlo.xor"(%776, %777) {name = "xor.1515"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %779 = "mhlo.xor"(%778, %606) {name = "xor.1516"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %780 = "mhlo.convert"(%779) {name = "convert.1527"} : (tensor<ui32>) -> tensor<ui64>
      %781 = "mhlo.convert"(%774) {name = "convert.1502"} : (tensor<ui64>) -> tensor<ui32>
      %782 = "mhlo.convert"(%781) {name = "convert.1528"} : (tensor<ui32>) -> tensor<ui64>
      %cst_253 = "std.constant"() {name = "constant.1529", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %783 = "mhlo.shift_left"(%782, %cst_253) {name = "shift-left.1530"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %784 = "mhlo.or"(%780, %783) {name = "or.1531"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %785 = "mhlo.reshape"(%784) {name = "reshape.1533"} : (tensor<ui64>) -> tensor<1xui64>
      %786 = "mhlo.concatenate"(%767, %785) {dimension = 0 : i64} : (tensor<1xui64>, tensor<1xui64>) -> tensor<2xui64>
      %787 = "mhlo.concatenate"(%762, %786) {dimension = 0 : i64} : (tensor<1xui64>, tensor<2xui64>) -> tensor<3xui64>
      %788 = "mhlo.rng_bit_generator"(%787) {rng_algorithm = 2 : i32} : (tensor<3xui64>) -> tuple<tensor<3xui64>, tensor<1x2xui32>>
      %789 = "mhlo.get_tuple_element"(%788) {index = 0 : i32, name = "get-tuple-element.1544"} : (tuple<tensor<3xui64>, tensor<1x2xui32>>) -> tensor<3xui64>
      %cst_254 = "std.constant"() {name = "constant.1552", value = dense<0> : tensor<ui64>} : () -> tensor<ui64>
      %cst_255 = "std.constant"() {name = "constant.1574", value = dense<1053357856> : tensor<ui32>} : () -> tensor<ui32>
      %cst_256 = "std.constant"() {name = "constant.1594", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %790 = "mhlo.add"(%cst_255, %cst_256) {name = "add.1595"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_257 = "std.constant"() {name = "constant.1616", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %791 = "mhlo.add"(%790, %cst_257) {name = "add.1617"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_258 = "std.constant"() {name = "constant.1638", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %792 = "mhlo.add"(%791, %cst_258) {name = "add.1639"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_259 = "std.constant"() {name = "constant.1660", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %793 = "mhlo.add"(%792, %cst_259) {name = "add.1661"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_260 = "std.constant"() {name = "constant.1682", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %794 = "mhlo.add"(%793, %cst_260) {name = "add.1683"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_261 = "std.constant"() {name = "constant.1704", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %795 = "mhlo.add"(%794, %cst_261) {name = "add.1705"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_262 = "std.constant"() {name = "constant.1726", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %796 = "mhlo.add"(%795, %cst_262) {name = "add.1727"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_263 = "std.constant"() {name = "constant.1748", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %797 = "mhlo.add"(%796, %cst_263) {name = "add.1749"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_264 = "std.constant"() {name = "constant.1770", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %798 = "mhlo.add"(%797, %cst_264) {name = "add.1771"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_265 = "std.constant"() {name = "constant.1792", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %799 = "mhlo.add"(%798, %cst_265) {name = "add.1793"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_266 = "std.constant"() {name = "constant.1575", value = dense<38149673> : tensor<ui32>} : () -> tensor<ui32>
      %cst_267 = "std.constant"() {name = "constant.1596", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %800 = "mhlo.add"(%cst_266, %cst_267) {name = "add.1597"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_268 = "std.constant"() {name = "constant.1618", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %801 = "mhlo.add"(%800, %cst_268) {name = "add.1619"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_269 = "std.constant"() {name = "constant.1640", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %802 = "mhlo.add"(%801, %cst_269) {name = "add.1641"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_270 = "std.constant"() {name = "constant.1662", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %803 = "mhlo.add"(%802, %cst_270) {name = "add.1663"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_271 = "std.constant"() {name = "constant.1684", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %804 = "mhlo.add"(%803, %cst_271) {name = "add.1685"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_272 = "std.constant"() {name = "constant.1706", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %805 = "mhlo.add"(%804, %cst_272) {name = "add.1707"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_273 = "std.constant"() {name = "constant.1728", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %806 = "mhlo.add"(%805, %cst_273) {name = "add.1729"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_274 = "std.constant"() {name = "constant.1750", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %807 = "mhlo.add"(%806, %cst_274) {name = "add.1751"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_275 = "std.constant"() {name = "constant.1772", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %808 = "mhlo.add"(%807, %cst_275) {name = "add.1773"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_276 = "std.constant"() {name = "constant.1794", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %809 = "mhlo.add"(%808, %cst_276) {name = "add.1795"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %810 = "mhlo.get_tuple_element"(%788) {index = 1 : i32, name = "get-tuple-element.1543"} : (tuple<tensor<3xui64>, tensor<1x2xui32>>) -> tensor<1x2xui32>
      %811 = "mhlo.bitcast_convert"(%810) {name = "bitcast-convert.1545"} : (tensor<1x2xui32>) -> tensor<1x2xi32>
      %812 = "mhlo.slice"(%811) {limit_indices = dense<[1, 2]> : tensor<2xi64>, start_indices = dense<0> : tensor<2xi64>, strides = dense<1> : tensor<2xi64>} : (tensor<1x2xi32>) -> tensor<1x2xi32>
      %813 = "mhlo.reshape"(%812) {name = "reshape.1547"} : (tensor<1x2xi32>) -> tensor<2xi32>
      %814 = "mhlo.slice"(%813) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
      %815 = "mhlo.reshape"(%814) {name = "reshape.1549"} : (tensor<1xi32>) -> tensor<i32>
      %816 = "mhlo.convert"(%815) {name = "convert.1553"} : (tensor<i32>) -> tensor<ui64>
      %817 = "mhlo.slice"(%813) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
      %818 = "mhlo.reshape"(%817) {name = "reshape.1551"} : (tensor<1xi32>) -> tensor<i32>
      %819 = "mhlo.convert"(%818) {name = "convert.1554"} : (tensor<i32>) -> tensor<ui64>
      %cst_277 = "std.constant"() {name = "constant.1555", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %820 = "mhlo.shift_left"(%819, %cst_277) {name = "shift-left.1556"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %821 = "mhlo.or"(%816, %820) {name = "or.1557"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %822 = "mhlo.convert"(%821) {name = "convert.1561"} : (tensor<ui64>) -> tensor<ui32>
      %823 = "mhlo.convert"(%822) {name = "convert.1564"} : (tensor<ui32>) -> tensor<ui64>
      %824 = "mhlo.convert"(%823) {name = "convert.1566"} : (tensor<ui64>) -> tensor<ui32>
      %825 = "mhlo.convert"(%824) {name = "convert.1576"} : (tensor<ui32>) -> tensor<ui64>
      %cst_278 = "std.constant"() {name = "constant.1577", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %826 = "mhlo.multiply"(%825, %cst_278) {name = "multiply.1578"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_279 = "std.constant"() {name = "constant.1580", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %827 = "mhlo.shift_right_logical"(%826, %cst_279) {name = "shift-right-logical.1581"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %828 = "mhlo.convert"(%827) {name = "convert.1582"} : (tensor<ui64>) -> tensor<ui32>
      %cst_280 = "std.constant"() {name = "constant.1560", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %829 = "mhlo.shift_right_logical"(%821, %cst_280) {name = "shift-right-logical.1562"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %830 = "mhlo.convert"(%829) {name = "convert.1563"} : (tensor<ui64>) -> tensor<ui32>
      %831 = "mhlo.convert"(%830) {name = "convert.1565"} : (tensor<ui32>) -> tensor<ui64>
      %cst_281 = "std.constant"() {name = "constant.1571", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %832 = "mhlo.shift_right_logical"(%831, %cst_281) {name = "shift-right-logical.1572"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %833 = "mhlo.convert"(%832) {name = "convert.1573"} : (tensor<ui64>) -> tensor<ui32>
      %834 = "mhlo.xor"(%828, %833) {name = "xor.1592"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %835 = "mhlo.xor"(%834, %cst_266) {name = "xor.1593"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %836 = "mhlo.convert"(%835) {name = "convert.1605"} : (tensor<ui32>) -> tensor<ui64>
      %cst_282 = "std.constant"() {name = "constant.1606", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %837 = "mhlo.multiply"(%836, %cst_282) {name = "multiply.1607"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_283 = "std.constant"() {name = "constant.1609", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %838 = "mhlo.shift_right_logical"(%837, %cst_283) {name = "shift-right-logical.1610"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %839 = "mhlo.convert"(%838) {name = "convert.1611"} : (tensor<ui64>) -> tensor<ui32>
      %840 = "mhlo.convert"(%831) {name = "convert.1570"} : (tensor<ui64>) -> tensor<ui32>
      %841 = "mhlo.convert"(%840) {name = "convert.1583"} : (tensor<ui32>) -> tensor<ui64>
      %cst_284 = "std.constant"() {name = "constant.1584", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %842 = "mhlo.multiply"(%841, %cst_284) {name = "multiply.1585"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %843 = "mhlo.convert"(%842) {name = "convert.1586"} : (tensor<ui64>) -> tensor<ui32>
      %844 = "mhlo.xor"(%839, %843) {name = "xor.1612"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %845 = "mhlo.xor"(%844, %790) {name = "xor.1613"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %846 = "mhlo.convert"(%845) {name = "convert.1620"} : (tensor<ui32>) -> tensor<ui64>
      %cst_285 = "std.constant"() {name = "constant.1621", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %847 = "mhlo.multiply"(%846, %cst_285) {name = "multiply.1622"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_286 = "std.constant"() {name = "constant.1624", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %848 = "mhlo.shift_right_logical"(%847, %cst_286) {name = "shift-right-logical.1625"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %849 = "mhlo.convert"(%848) {name = "convert.1626"} : (tensor<ui64>) -> tensor<ui32>
      %cst_287 = "std.constant"() {name = "constant.1587", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %850 = "mhlo.shift_right_logical"(%842, %cst_287) {name = "shift-right-logical.1588"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %851 = "mhlo.convert"(%850) {name = "convert.1589"} : (tensor<ui64>) -> tensor<ui32>
      %cst_288 = "std.constant"() {name = "constant.1567", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %852 = "mhlo.shift_right_logical"(%823, %cst_288) {name = "shift-right-logical.1568"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %853 = "mhlo.convert"(%852) {name = "convert.1569"} : (tensor<ui64>) -> tensor<ui32>
      %854 = "mhlo.xor"(%851, %853) {name = "xor.1590"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %855 = "mhlo.xor"(%854, %cst_255) {name = "xor.1591"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %856 = "mhlo.convert"(%855) {name = "convert.1598"} : (tensor<ui32>) -> tensor<ui64>
      %cst_289 = "std.constant"() {name = "constant.1599", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %857 = "mhlo.multiply"(%856, %cst_289) {name = "multiply.1600"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %858 = "mhlo.convert"(%857) {name = "convert.1601"} : (tensor<ui64>) -> tensor<ui32>
      %859 = "mhlo.xor"(%849, %858) {name = "xor.1636"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %860 = "mhlo.xor"(%859, %801) {name = "xor.1637"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %861 = "mhlo.convert"(%860) {name = "convert.1649"} : (tensor<ui32>) -> tensor<ui64>
      %cst_290 = "std.constant"() {name = "constant.1650", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %862 = "mhlo.multiply"(%861, %cst_290) {name = "multiply.1651"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_291 = "std.constant"() {name = "constant.1653", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %863 = "mhlo.shift_right_logical"(%862, %cst_291) {name = "shift-right-logical.1654"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %864 = "mhlo.convert"(%863) {name = "convert.1655"} : (tensor<ui64>) -> tensor<ui32>
      %cst_292 = "std.constant"() {name = "constant.1602", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %865 = "mhlo.shift_right_logical"(%857, %cst_292) {name = "shift-right-logical.1603"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %866 = "mhlo.convert"(%865) {name = "convert.1604"} : (tensor<ui64>) -> tensor<ui32>
      %867 = "mhlo.convert"(%826) {name = "convert.1579"} : (tensor<ui64>) -> tensor<ui32>
      %868 = "mhlo.xor"(%866, %867) {name = "xor.1614"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %869 = "mhlo.xor"(%868, %800) {name = "xor.1615"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %870 = "mhlo.convert"(%869) {name = "convert.1627"} : (tensor<ui32>) -> tensor<ui64>
      %cst_293 = "std.constant"() {name = "constant.1628", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %871 = "mhlo.multiply"(%870, %cst_293) {name = "multiply.1629"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %872 = "mhlo.convert"(%871) {name = "convert.1630"} : (tensor<ui64>) -> tensor<ui32>
      %873 = "mhlo.xor"(%864, %872) {name = "xor.1656"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %874 = "mhlo.xor"(%873, %792) {name = "xor.1657"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %875 = "mhlo.convert"(%874) {name = "convert.1664"} : (tensor<ui32>) -> tensor<ui64>
      %cst_294 = "std.constant"() {name = "constant.1665", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %876 = "mhlo.multiply"(%875, %cst_294) {name = "multiply.1666"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_295 = "std.constant"() {name = "constant.1668", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %877 = "mhlo.shift_right_logical"(%876, %cst_295) {name = "shift-right-logical.1669"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %878 = "mhlo.convert"(%877) {name = "convert.1670"} : (tensor<ui64>) -> tensor<ui32>
      %cst_296 = "std.constant"() {name = "constant.1631", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %879 = "mhlo.shift_right_logical"(%871, %cst_296) {name = "shift-right-logical.1632"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %880 = "mhlo.convert"(%879) {name = "convert.1633"} : (tensor<ui64>) -> tensor<ui32>
      %881 = "mhlo.convert"(%837) {name = "convert.1608"} : (tensor<ui64>) -> tensor<ui32>
      %882 = "mhlo.xor"(%880, %881) {name = "xor.1634"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %883 = "mhlo.xor"(%882, %791) {name = "xor.1635"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %884 = "mhlo.convert"(%883) {name = "convert.1642"} : (tensor<ui32>) -> tensor<ui64>
      %cst_297 = "std.constant"() {name = "constant.1643", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %885 = "mhlo.multiply"(%884, %cst_297) {name = "multiply.1644"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %886 = "mhlo.convert"(%885) {name = "convert.1645"} : (tensor<ui64>) -> tensor<ui32>
      %887 = "mhlo.xor"(%878, %886) {name = "xor.1680"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %888 = "mhlo.xor"(%887, %803) {name = "xor.1681"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %889 = "mhlo.convert"(%888) {name = "convert.1693"} : (tensor<ui32>) -> tensor<ui64>
      %cst_298 = "std.constant"() {name = "constant.1694", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %890 = "mhlo.multiply"(%889, %cst_298) {name = "multiply.1695"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_299 = "std.constant"() {name = "constant.1697", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %891 = "mhlo.shift_right_logical"(%890, %cst_299) {name = "shift-right-logical.1698"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %892 = "mhlo.convert"(%891) {name = "convert.1699"} : (tensor<ui64>) -> tensor<ui32>
      %cst_300 = "std.constant"() {name = "constant.1646", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %893 = "mhlo.shift_right_logical"(%885, %cst_300) {name = "shift-right-logical.1647"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %894 = "mhlo.convert"(%893) {name = "convert.1648"} : (tensor<ui64>) -> tensor<ui32>
      %895 = "mhlo.convert"(%847) {name = "convert.1623"} : (tensor<ui64>) -> tensor<ui32>
      %896 = "mhlo.xor"(%894, %895) {name = "xor.1658"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %897 = "mhlo.xor"(%896, %802) {name = "xor.1659"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %898 = "mhlo.convert"(%897) {name = "convert.1671"} : (tensor<ui32>) -> tensor<ui64>
      %cst_301 = "std.constant"() {name = "constant.1672", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %899 = "mhlo.multiply"(%898, %cst_301) {name = "multiply.1673"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %900 = "mhlo.convert"(%899) {name = "convert.1674"} : (tensor<ui64>) -> tensor<ui32>
      %901 = "mhlo.xor"(%892, %900) {name = "xor.1700"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %902 = "mhlo.xor"(%901, %794) {name = "xor.1701"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %903 = "mhlo.convert"(%902) {name = "convert.1708"} : (tensor<ui32>) -> tensor<ui64>
      %cst_302 = "std.constant"() {name = "constant.1709", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %904 = "mhlo.multiply"(%903, %cst_302) {name = "multiply.1710"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_303 = "std.constant"() {name = "constant.1712", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %905 = "mhlo.shift_right_logical"(%904, %cst_303) {name = "shift-right-logical.1713"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %906 = "mhlo.convert"(%905) {name = "convert.1714"} : (tensor<ui64>) -> tensor<ui32>
      %cst_304 = "std.constant"() {name = "constant.1675", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %907 = "mhlo.shift_right_logical"(%899, %cst_304) {name = "shift-right-logical.1676"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %908 = "mhlo.convert"(%907) {name = "convert.1677"} : (tensor<ui64>) -> tensor<ui32>
      %909 = "mhlo.convert"(%862) {name = "convert.1652"} : (tensor<ui64>) -> tensor<ui32>
      %910 = "mhlo.xor"(%908, %909) {name = "xor.1678"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %911 = "mhlo.xor"(%910, %793) {name = "xor.1679"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %912 = "mhlo.convert"(%911) {name = "convert.1686"} : (tensor<ui32>) -> tensor<ui64>
      %cst_305 = "std.constant"() {name = "constant.1687", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %913 = "mhlo.multiply"(%912, %cst_305) {name = "multiply.1688"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %914 = "mhlo.convert"(%913) {name = "convert.1689"} : (tensor<ui64>) -> tensor<ui32>
      %915 = "mhlo.xor"(%906, %914) {name = "xor.1724"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %916 = "mhlo.xor"(%915, %805) {name = "xor.1725"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %917 = "mhlo.convert"(%916) {name = "convert.1737"} : (tensor<ui32>) -> tensor<ui64>
      %cst_306 = "std.constant"() {name = "constant.1738", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %918 = "mhlo.multiply"(%917, %cst_306) {name = "multiply.1739"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_307 = "std.constant"() {name = "constant.1741", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %919 = "mhlo.shift_right_logical"(%918, %cst_307) {name = "shift-right-logical.1742"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %920 = "mhlo.convert"(%919) {name = "convert.1743"} : (tensor<ui64>) -> tensor<ui32>
      %cst_308 = "std.constant"() {name = "constant.1690", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %921 = "mhlo.shift_right_logical"(%913, %cst_308) {name = "shift-right-logical.1691"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %922 = "mhlo.convert"(%921) {name = "convert.1692"} : (tensor<ui64>) -> tensor<ui32>
      %923 = "mhlo.convert"(%876) {name = "convert.1667"} : (tensor<ui64>) -> tensor<ui32>
      %924 = "mhlo.xor"(%922, %923) {name = "xor.1702"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %925 = "mhlo.xor"(%924, %804) {name = "xor.1703"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %926 = "mhlo.convert"(%925) {name = "convert.1715"} : (tensor<ui32>) -> tensor<ui64>
      %cst_309 = "std.constant"() {name = "constant.1716", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %927 = "mhlo.multiply"(%926, %cst_309) {name = "multiply.1717"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %928 = "mhlo.convert"(%927) {name = "convert.1718"} : (tensor<ui64>) -> tensor<ui32>
      %929 = "mhlo.xor"(%920, %928) {name = "xor.1744"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %930 = "mhlo.xor"(%929, %796) {name = "xor.1745"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %931 = "mhlo.convert"(%930) {name = "convert.1752"} : (tensor<ui32>) -> tensor<ui64>
      %cst_310 = "std.constant"() {name = "constant.1753", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %932 = "mhlo.multiply"(%931, %cst_310) {name = "multiply.1754"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_311 = "std.constant"() {name = "constant.1756", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %933 = "mhlo.shift_right_logical"(%932, %cst_311) {name = "shift-right-logical.1757"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %934 = "mhlo.convert"(%933) {name = "convert.1758"} : (tensor<ui64>) -> tensor<ui32>
      %cst_312 = "std.constant"() {name = "constant.1719", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %935 = "mhlo.shift_right_logical"(%927, %cst_312) {name = "shift-right-logical.1720"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %936 = "mhlo.convert"(%935) {name = "convert.1721"} : (tensor<ui64>) -> tensor<ui32>
      %937 = "mhlo.convert"(%890) {name = "convert.1696"} : (tensor<ui64>) -> tensor<ui32>
      %938 = "mhlo.xor"(%936, %937) {name = "xor.1722"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %939 = "mhlo.xor"(%938, %795) {name = "xor.1723"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %940 = "mhlo.convert"(%939) {name = "convert.1730"} : (tensor<ui32>) -> tensor<ui64>
      %cst_313 = "std.constant"() {name = "constant.1731", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %941 = "mhlo.multiply"(%940, %cst_313) {name = "multiply.1732"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %942 = "mhlo.convert"(%941) {name = "convert.1733"} : (tensor<ui64>) -> tensor<ui32>
      %943 = "mhlo.xor"(%934, %942) {name = "xor.1768"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %944 = "mhlo.xor"(%943, %807) {name = "xor.1769"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %945 = "mhlo.convert"(%944) {name = "convert.1781"} : (tensor<ui32>) -> tensor<ui64>
      %cst_314 = "std.constant"() {name = "constant.1782", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %946 = "mhlo.multiply"(%945, %cst_314) {name = "multiply.1783"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_315 = "std.constant"() {name = "constant.1785", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %947 = "mhlo.shift_right_logical"(%946, %cst_315) {name = "shift-right-logical.1786"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %948 = "mhlo.convert"(%947) {name = "convert.1787"} : (tensor<ui64>) -> tensor<ui32>
      %cst_316 = "std.constant"() {name = "constant.1734", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %949 = "mhlo.shift_right_logical"(%941, %cst_316) {name = "shift-right-logical.1735"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %950 = "mhlo.convert"(%949) {name = "convert.1736"} : (tensor<ui64>) -> tensor<ui32>
      %951 = "mhlo.convert"(%904) {name = "convert.1711"} : (tensor<ui64>) -> tensor<ui32>
      %952 = "mhlo.xor"(%950, %951) {name = "xor.1746"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %953 = "mhlo.xor"(%952, %806) {name = "xor.1747"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %954 = "mhlo.convert"(%953) {name = "convert.1759"} : (tensor<ui32>) -> tensor<ui64>
      %cst_317 = "std.constant"() {name = "constant.1760", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %955 = "mhlo.multiply"(%954, %cst_317) {name = "multiply.1761"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %956 = "mhlo.convert"(%955) {name = "convert.1762"} : (tensor<ui64>) -> tensor<ui32>
      %957 = "mhlo.xor"(%948, %956) {name = "xor.1788"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %958 = "mhlo.xor"(%957, %798) {name = "xor.1789"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %959 = "mhlo.convert"(%958) {name = "convert.1810"} : (tensor<ui32>) -> tensor<ui64>
      %960 = "mhlo.convert"(%946) {name = "convert.1784"} : (tensor<ui64>) -> tensor<ui32>
      %961 = "mhlo.convert"(%960) {name = "convert.1811"} : (tensor<ui32>) -> tensor<ui64>
      %cst_318 = "std.constant"() {name = "constant.1812", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %962 = "mhlo.shift_left"(%961, %cst_318) {name = "shift-left.1813"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %963 = "mhlo.or"(%959, %962) {name = "or.1814"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %964 = "mhlo.reshape"(%963) {name = "reshape.1815"} : (tensor<ui64>) -> tensor<1xui64>
      %cst_319 = "std.constant"() {name = "constant.1796", value = dense<0> : tensor<ui32>} : () -> tensor<ui32>
      %965 = "mhlo.convert"(%cst_319) {name = "convert.1797"} : (tensor<ui32>) -> tensor<ui64>
      %966 = "mhlo.convert"(%cst_319) {name = "convert.1798"} : (tensor<ui32>) -> tensor<ui64>
      %cst_320 = "std.constant"() {name = "constant.1799", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %967 = "mhlo.shift_left"(%966, %cst_320) {name = "shift-left.1800"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %968 = "mhlo.or"(%965, %967) {name = "or.1801"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %969 = "mhlo.reshape"(%968) {name = "reshape.1807"} : (tensor<ui64>) -> tensor<1xui64>
      %cst_321 = "std.constant"() {name = "constant.1763", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %970 = "mhlo.shift_right_logical"(%955, %cst_321) {name = "shift-right-logical.1764"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %971 = "mhlo.convert"(%970) {name = "convert.1765"} : (tensor<ui64>) -> tensor<ui32>
      %972 = "mhlo.convert"(%918) {name = "convert.1740"} : (tensor<ui64>) -> tensor<ui32>
      %973 = "mhlo.xor"(%971, %972) {name = "xor.1766"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %974 = "mhlo.xor"(%973, %797) {name = "xor.1767"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %975 = "mhlo.convert"(%974) {name = "convert.1774"} : (tensor<ui32>) -> tensor<ui64>
      %cst_322 = "std.constant"() {name = "constant.1775", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %976 = "mhlo.multiply"(%975, %cst_322) {name = "multiply.1776"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_323 = "std.constant"() {name = "constant.1778", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %977 = "mhlo.shift_right_logical"(%976, %cst_323) {name = "shift-right-logical.1779"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %978 = "mhlo.convert"(%977) {name = "convert.1780"} : (tensor<ui64>) -> tensor<ui32>
      %979 = "mhlo.convert"(%932) {name = "convert.1755"} : (tensor<ui64>) -> tensor<ui32>
      %980 = "mhlo.xor"(%978, %979) {name = "xor.1790"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %981 = "mhlo.xor"(%980, %808) {name = "xor.1791"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %982 = "mhlo.convert"(%981) {name = "convert.1802"} : (tensor<ui32>) -> tensor<ui64>
      %983 = "mhlo.convert"(%976) {name = "convert.1777"} : (tensor<ui64>) -> tensor<ui32>
      %984 = "mhlo.convert"(%983) {name = "convert.1803"} : (tensor<ui32>) -> tensor<ui64>
      %cst_324 = "std.constant"() {name = "constant.1804", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %985 = "mhlo.shift_left"(%984, %cst_324) {name = "shift-left.1805"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %986 = "mhlo.or"(%982, %985) {name = "or.1806"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %987 = "mhlo.reshape"(%986) {name = "reshape.1808"} : (tensor<ui64>) -> tensor<1xui64>
      %988 = "mhlo.concatenate"(%969, %987) {dimension = 0 : i64} : (tensor<1xui64>, tensor<1xui64>) -> tensor<2xui64>
      %989 = "mhlo.concatenate"(%964, %988) {dimension = 0 : i64} : (tensor<1xui64>, tensor<2xui64>) -> tensor<3xui64>
      %990 = "mhlo.rng_bit_generator"(%989) {rng_algorithm = 2 : i32} : (tensor<3xui64>) -> tuple<tensor<3xui64>, tensor<4xui32>>
      %991 = "mhlo.get_tuple_element"(%990) {index = 0 : i32, name = "get-tuple-element.1819"} : (tuple<tensor<3xui64>, tensor<4xui32>>) -> tensor<3xui64>
      %cst_325 = "std.constant"() {name = "constant.1871", value = dense<0> : tensor<ui64>} : () -> tensor<ui64>
      %cst_326 = "std.constant"() {name = "constant.1886", value = dense<1053357856> : tensor<ui32>} : () -> tensor<ui32>
      %cst_327 = "std.constant"() {name = "constant.1906", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %992 = "mhlo.add"(%cst_326, %cst_327) {name = "add.1907"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_328 = "std.constant"() {name = "constant.1928", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %993 = "mhlo.add"(%992, %cst_328) {name = "add.1929"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_329 = "std.constant"() {name = "constant.1950", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %994 = "mhlo.add"(%993, %cst_329) {name = "add.1951"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_330 = "std.constant"() {name = "constant.1972", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %995 = "mhlo.add"(%994, %cst_330) {name = "add.1973"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_331 = "std.constant"() {name = "constant.1994", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %996 = "mhlo.add"(%995, %cst_331) {name = "add.1995"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_332 = "std.constant"() {name = "constant.2016", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %997 = "mhlo.add"(%996, %cst_332) {name = "add.2017"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_333 = "std.constant"() {name = "constant.2038", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %998 = "mhlo.add"(%997, %cst_333) {name = "add.2039"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_334 = "std.constant"() {name = "constant.2060", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %999 = "mhlo.add"(%998, %cst_334) {name = "add.2061"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_335 = "std.constant"() {name = "constant.2082", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %1000 = "mhlo.add"(%999, %cst_335) {name = "add.2083"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_336 = "std.constant"() {name = "constant.2104", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
      %1001 = "mhlo.add"(%1000, %cst_336) {name = "add.2105"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_337 = "std.constant"() {name = "constant.1887", value = dense<38149673> : tensor<ui32>} : () -> tensor<ui32>
      %cst_338 = "std.constant"() {name = "constant.1908", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %1002 = "mhlo.add"(%cst_337, %cst_338) {name = "add.1909"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_339 = "std.constant"() {name = "constant.1930", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %1003 = "mhlo.add"(%1002, %cst_339) {name = "add.1931"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_340 = "std.constant"() {name = "constant.1952", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %1004 = "mhlo.add"(%1003, %cst_340) {name = "add.1953"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_341 = "std.constant"() {name = "constant.1974", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %1005 = "mhlo.add"(%1004, %cst_341) {name = "add.1975"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_342 = "std.constant"() {name = "constant.1996", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %1006 = "mhlo.add"(%1005, %cst_342) {name = "add.1997"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_343 = "std.constant"() {name = "constant.2018", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %1007 = "mhlo.add"(%1006, %cst_343) {name = "add.2019"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_344 = "std.constant"() {name = "constant.2040", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %1008 = "mhlo.add"(%1007, %cst_344) {name = "add.2041"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_345 = "std.constant"() {name = "constant.2062", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %1009 = "mhlo.add"(%1008, %cst_345) {name = "add.2063"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_346 = "std.constant"() {name = "constant.2084", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %1010 = "mhlo.add"(%1009, %cst_346) {name = "add.2085"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %cst_347 = "std.constant"() {name = "constant.2106", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
      %1011 = "mhlo.add"(%1010, %cst_347) {name = "add.2107"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1012 = "mhlo.slice"(%609) {limit_indices = dense<2> : tensor<2xi64>, start_indices = dense<[1, 0]> : tensor<2xi64>, strides = dense<1> : tensor<2xi64>} : (tensor<2x2xi32>) -> tensor<1x2xi32>
      %1013 = "mhlo.reshape"(%1012) {name = "reshape.1274"} : (tensor<1x2xi32>) -> tensor<2xi32>
      %1014 = "mhlo.slice"(%1013) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
      %1015 = "mhlo.reshape"(%1014) {name = "reshape.1863"} : (tensor<1xi32>) -> tensor<i32>
      %1016 = "mhlo.convert"(%1015) {name = "convert.1866"} : (tensor<i32>) -> tensor<ui64>
      %1017 = "mhlo.slice"(%1013) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
      %1018 = "mhlo.reshape"(%1017) {name = "reshape.1865"} : (tensor<1xi32>) -> tensor<i32>
      %1019 = "mhlo.convert"(%1018) {name = "convert.1867"} : (tensor<i32>) -> tensor<ui64>
      %cst_348 = "std.constant"() {name = "constant.1868", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %1020 = "mhlo.shift_left"(%1019, %cst_348) {name = "shift-left.1869"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1021 = "mhlo.or"(%1016, %1020) {name = "or.1870"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1022 = "mhlo.convert"(%1021) {name = "convert.1873"} : (tensor<ui64>) -> tensor<ui32>
      %1023 = "mhlo.convert"(%1022) {name = "convert.1876"} : (tensor<ui32>) -> tensor<ui64>
      %1024 = "mhlo.convert"(%1023) {name = "convert.1878"} : (tensor<ui64>) -> tensor<ui32>
      %1025 = "mhlo.convert"(%1024) {name = "convert.1888"} : (tensor<ui32>) -> tensor<ui64>
      %cst_349 = "std.constant"() {name = "constant.1889", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %1026 = "mhlo.multiply"(%1025, %cst_349) {name = "multiply.1890"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_350 = "std.constant"() {name = "constant.1892", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %1027 = "mhlo.shift_right_logical"(%1026, %cst_350) {name = "shift-right-logical.1893"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1028 = "mhlo.convert"(%1027) {name = "convert.1894"} : (tensor<ui64>) -> tensor<ui32>
      %cst_351 = "std.constant"() {name = "constant.1872", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %1029 = "mhlo.shift_right_logical"(%1021, %cst_351) {name = "shift-right-logical.1874"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1030 = "mhlo.convert"(%1029) {name = "convert.1875"} : (tensor<ui64>) -> tensor<ui32>
      %1031 = "mhlo.convert"(%1030) {name = "convert.1877"} : (tensor<ui32>) -> tensor<ui64>
      %cst_352 = "std.constant"() {name = "constant.1883", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %1032 = "mhlo.shift_right_logical"(%1031, %cst_352) {name = "shift-right-logical.1884"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1033 = "mhlo.convert"(%1032) {name = "convert.1885"} : (tensor<ui64>) -> tensor<ui32>
      %1034 = "mhlo.xor"(%1028, %1033) {name = "xor.1904"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1035 = "mhlo.xor"(%1034, %cst_337) {name = "xor.1905"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1036 = "mhlo.convert"(%1035) {name = "convert.1917"} : (tensor<ui32>) -> tensor<ui64>
      %cst_353 = "std.constant"() {name = "constant.1918", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %1037 = "mhlo.multiply"(%1036, %cst_353) {name = "multiply.1919"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_354 = "std.constant"() {name = "constant.1921", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %1038 = "mhlo.shift_right_logical"(%1037, %cst_354) {name = "shift-right-logical.1922"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1039 = "mhlo.convert"(%1038) {name = "convert.1923"} : (tensor<ui64>) -> tensor<ui32>
      %1040 = "mhlo.convert"(%1031) {name = "convert.1882"} : (tensor<ui64>) -> tensor<ui32>
      %1041 = "mhlo.convert"(%1040) {name = "convert.1895"} : (tensor<ui32>) -> tensor<ui64>
      %cst_355 = "std.constant"() {name = "constant.1896", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %1042 = "mhlo.multiply"(%1041, %cst_355) {name = "multiply.1897"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1043 = "mhlo.convert"(%1042) {name = "convert.1898"} : (tensor<ui64>) -> tensor<ui32>
      %1044 = "mhlo.xor"(%1039, %1043) {name = "xor.1924"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1045 = "mhlo.xor"(%1044, %992) {name = "xor.1925"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1046 = "mhlo.convert"(%1045) {name = "convert.1932"} : (tensor<ui32>) -> tensor<ui64>
      %cst_356 = "std.constant"() {name = "constant.1933", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %1047 = "mhlo.multiply"(%1046, %cst_356) {name = "multiply.1934"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_357 = "std.constant"() {name = "constant.1936", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %1048 = "mhlo.shift_right_logical"(%1047, %cst_357) {name = "shift-right-logical.1937"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1049 = "mhlo.convert"(%1048) {name = "convert.1938"} : (tensor<ui64>) -> tensor<ui32>
      %cst_358 = "std.constant"() {name = "constant.1899", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %1050 = "mhlo.shift_right_logical"(%1042, %cst_358) {name = "shift-right-logical.1900"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1051 = "mhlo.convert"(%1050) {name = "convert.1901"} : (tensor<ui64>) -> tensor<ui32>
      %cst_359 = "std.constant"() {name = "constant.1879", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %1052 = "mhlo.shift_right_logical"(%1023, %cst_359) {name = "shift-right-logical.1880"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1053 = "mhlo.convert"(%1052) {name = "convert.1881"} : (tensor<ui64>) -> tensor<ui32>
      %1054 = "mhlo.xor"(%1051, %1053) {name = "xor.1902"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1055 = "mhlo.xor"(%1054, %cst_326) {name = "xor.1903"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1056 = "mhlo.convert"(%1055) {name = "convert.1910"} : (tensor<ui32>) -> tensor<ui64>
      %cst_360 = "std.constant"() {name = "constant.1911", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %1057 = "mhlo.multiply"(%1056, %cst_360) {name = "multiply.1912"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1058 = "mhlo.convert"(%1057) {name = "convert.1913"} : (tensor<ui64>) -> tensor<ui32>
      %1059 = "mhlo.xor"(%1049, %1058) {name = "xor.1948"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1060 = "mhlo.xor"(%1059, %1003) {name = "xor.1949"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1061 = "mhlo.convert"(%1060) {name = "convert.1961"} : (tensor<ui32>) -> tensor<ui64>
      %cst_361 = "std.constant"() {name = "constant.1962", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %1062 = "mhlo.multiply"(%1061, %cst_361) {name = "multiply.1963"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_362 = "std.constant"() {name = "constant.1965", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %1063 = "mhlo.shift_right_logical"(%1062, %cst_362) {name = "shift-right-logical.1966"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1064 = "mhlo.convert"(%1063) {name = "convert.1967"} : (tensor<ui64>) -> tensor<ui32>
      %cst_363 = "std.constant"() {name = "constant.1914", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %1065 = "mhlo.shift_right_logical"(%1057, %cst_363) {name = "shift-right-logical.1915"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1066 = "mhlo.convert"(%1065) {name = "convert.1916"} : (tensor<ui64>) -> tensor<ui32>
      %1067 = "mhlo.convert"(%1026) {name = "convert.1891"} : (tensor<ui64>) -> tensor<ui32>
      %1068 = "mhlo.xor"(%1066, %1067) {name = "xor.1926"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1069 = "mhlo.xor"(%1068, %1002) {name = "xor.1927"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1070 = "mhlo.convert"(%1069) {name = "convert.1939"} : (tensor<ui32>) -> tensor<ui64>
      %cst_364 = "std.constant"() {name = "constant.1940", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %1071 = "mhlo.multiply"(%1070, %cst_364) {name = "multiply.1941"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1072 = "mhlo.convert"(%1071) {name = "convert.1942"} : (tensor<ui64>) -> tensor<ui32>
      %1073 = "mhlo.xor"(%1064, %1072) {name = "xor.1968"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1074 = "mhlo.xor"(%1073, %994) {name = "xor.1969"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1075 = "mhlo.convert"(%1074) {name = "convert.1976"} : (tensor<ui32>) -> tensor<ui64>
      %cst_365 = "std.constant"() {name = "constant.1977", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %1076 = "mhlo.multiply"(%1075, %cst_365) {name = "multiply.1978"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_366 = "std.constant"() {name = "constant.1980", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %1077 = "mhlo.shift_right_logical"(%1076, %cst_366) {name = "shift-right-logical.1981"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1078 = "mhlo.convert"(%1077) {name = "convert.1982"} : (tensor<ui64>) -> tensor<ui32>
      %cst_367 = "std.constant"() {name = "constant.1943", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %1079 = "mhlo.shift_right_logical"(%1071, %cst_367) {name = "shift-right-logical.1944"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1080 = "mhlo.convert"(%1079) {name = "convert.1945"} : (tensor<ui64>) -> tensor<ui32>
      %1081 = "mhlo.convert"(%1037) {name = "convert.1920"} : (tensor<ui64>) -> tensor<ui32>
      %1082 = "mhlo.xor"(%1080, %1081) {name = "xor.1946"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1083 = "mhlo.xor"(%1082, %993) {name = "xor.1947"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1084 = "mhlo.convert"(%1083) {name = "convert.1954"} : (tensor<ui32>) -> tensor<ui64>
      %cst_368 = "std.constant"() {name = "constant.1955", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %1085 = "mhlo.multiply"(%1084, %cst_368) {name = "multiply.1956"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1086 = "mhlo.convert"(%1085) {name = "convert.1957"} : (tensor<ui64>) -> tensor<ui32>
      %1087 = "mhlo.xor"(%1078, %1086) {name = "xor.1992"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1088 = "mhlo.xor"(%1087, %1005) {name = "xor.1993"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1089 = "mhlo.convert"(%1088) {name = "convert.2005"} : (tensor<ui32>) -> tensor<ui64>
      %cst_369 = "std.constant"() {name = "constant.2006", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %1090 = "mhlo.multiply"(%1089, %cst_369) {name = "multiply.2007"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_370 = "std.constant"() {name = "constant.2009", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %1091 = "mhlo.shift_right_logical"(%1090, %cst_370) {name = "shift-right-logical.2010"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1092 = "mhlo.convert"(%1091) {name = "convert.2011"} : (tensor<ui64>) -> tensor<ui32>
      %cst_371 = "std.constant"() {name = "constant.1958", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %1093 = "mhlo.shift_right_logical"(%1085, %cst_371) {name = "shift-right-logical.1959"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1094 = "mhlo.convert"(%1093) {name = "convert.1960"} : (tensor<ui64>) -> tensor<ui32>
      %1095 = "mhlo.convert"(%1047) {name = "convert.1935"} : (tensor<ui64>) -> tensor<ui32>
      %1096 = "mhlo.xor"(%1094, %1095) {name = "xor.1970"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1097 = "mhlo.xor"(%1096, %1004) {name = "xor.1971"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1098 = "mhlo.convert"(%1097) {name = "convert.1983"} : (tensor<ui32>) -> tensor<ui64>
      %cst_372 = "std.constant"() {name = "constant.1984", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %1099 = "mhlo.multiply"(%1098, %cst_372) {name = "multiply.1985"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1100 = "mhlo.convert"(%1099) {name = "convert.1986"} : (tensor<ui64>) -> tensor<ui32>
      %1101 = "mhlo.xor"(%1092, %1100) {name = "xor.2012"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1102 = "mhlo.xor"(%1101, %996) {name = "xor.2013"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1103 = "mhlo.convert"(%1102) {name = "convert.2020"} : (tensor<ui32>) -> tensor<ui64>
      %cst_373 = "std.constant"() {name = "constant.2021", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %1104 = "mhlo.multiply"(%1103, %cst_373) {name = "multiply.2022"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_374 = "std.constant"() {name = "constant.2024", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %1105 = "mhlo.shift_right_logical"(%1104, %cst_374) {name = "shift-right-logical.2025"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1106 = "mhlo.convert"(%1105) {name = "convert.2026"} : (tensor<ui64>) -> tensor<ui32>
      %cst_375 = "std.constant"() {name = "constant.1987", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %1107 = "mhlo.shift_right_logical"(%1099, %cst_375) {name = "shift-right-logical.1988"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1108 = "mhlo.convert"(%1107) {name = "convert.1989"} : (tensor<ui64>) -> tensor<ui32>
      %1109 = "mhlo.convert"(%1062) {name = "convert.1964"} : (tensor<ui64>) -> tensor<ui32>
      %1110 = "mhlo.xor"(%1108, %1109) {name = "xor.1990"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1111 = "mhlo.xor"(%1110, %995) {name = "xor.1991"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1112 = "mhlo.convert"(%1111) {name = "convert.1998"} : (tensor<ui32>) -> tensor<ui64>
      %cst_376 = "std.constant"() {name = "constant.1999", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %1113 = "mhlo.multiply"(%1112, %cst_376) {name = "multiply.2000"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1114 = "mhlo.convert"(%1113) {name = "convert.2001"} : (tensor<ui64>) -> tensor<ui32>
      %1115 = "mhlo.xor"(%1106, %1114) {name = "xor.2036"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1116 = "mhlo.xor"(%1115, %1007) {name = "xor.2037"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1117 = "mhlo.convert"(%1116) {name = "convert.2049"} : (tensor<ui32>) -> tensor<ui64>
      %cst_377 = "std.constant"() {name = "constant.2050", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %1118 = "mhlo.multiply"(%1117, %cst_377) {name = "multiply.2051"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_378 = "std.constant"() {name = "constant.2053", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %1119 = "mhlo.shift_right_logical"(%1118, %cst_378) {name = "shift-right-logical.2054"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1120 = "mhlo.convert"(%1119) {name = "convert.2055"} : (tensor<ui64>) -> tensor<ui32>
      %cst_379 = "std.constant"() {name = "constant.2002", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %1121 = "mhlo.shift_right_logical"(%1113, %cst_379) {name = "shift-right-logical.2003"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1122 = "mhlo.convert"(%1121) {name = "convert.2004"} : (tensor<ui64>) -> tensor<ui32>
      %1123 = "mhlo.convert"(%1076) {name = "convert.1979"} : (tensor<ui64>) -> tensor<ui32>
      %1124 = "mhlo.xor"(%1122, %1123) {name = "xor.2014"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1125 = "mhlo.xor"(%1124, %1006) {name = "xor.2015"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1126 = "mhlo.convert"(%1125) {name = "convert.2027"} : (tensor<ui32>) -> tensor<ui64>
      %cst_380 = "std.constant"() {name = "constant.2028", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %1127 = "mhlo.multiply"(%1126, %cst_380) {name = "multiply.2029"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1128 = "mhlo.convert"(%1127) {name = "convert.2030"} : (tensor<ui64>) -> tensor<ui32>
      %1129 = "mhlo.xor"(%1120, %1128) {name = "xor.2056"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1130 = "mhlo.xor"(%1129, %998) {name = "xor.2057"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1131 = "mhlo.convert"(%1130) {name = "convert.2064"} : (tensor<ui32>) -> tensor<ui64>
      %cst_381 = "std.constant"() {name = "constant.2065", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %1132 = "mhlo.multiply"(%1131, %cst_381) {name = "multiply.2066"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_382 = "std.constant"() {name = "constant.2068", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %1133 = "mhlo.shift_right_logical"(%1132, %cst_382) {name = "shift-right-logical.2069"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1134 = "mhlo.convert"(%1133) {name = "convert.2070"} : (tensor<ui64>) -> tensor<ui32>
      %cst_383 = "std.constant"() {name = "constant.2031", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %1135 = "mhlo.shift_right_logical"(%1127, %cst_383) {name = "shift-right-logical.2032"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1136 = "mhlo.convert"(%1135) {name = "convert.2033"} : (tensor<ui64>) -> tensor<ui32>
      %1137 = "mhlo.convert"(%1090) {name = "convert.2008"} : (tensor<ui64>) -> tensor<ui32>
      %1138 = "mhlo.xor"(%1136, %1137) {name = "xor.2034"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1139 = "mhlo.xor"(%1138, %997) {name = "xor.2035"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1140 = "mhlo.convert"(%1139) {name = "convert.2042"} : (tensor<ui32>) -> tensor<ui64>
      %cst_384 = "std.constant"() {name = "constant.2043", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %1141 = "mhlo.multiply"(%1140, %cst_384) {name = "multiply.2044"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1142 = "mhlo.convert"(%1141) {name = "convert.2045"} : (tensor<ui64>) -> tensor<ui32>
      %1143 = "mhlo.xor"(%1134, %1142) {name = "xor.2080"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1144 = "mhlo.xor"(%1143, %1009) {name = "xor.2081"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1145 = "mhlo.convert"(%1144) {name = "convert.2093"} : (tensor<ui32>) -> tensor<ui64>
      %cst_385 = "std.constant"() {name = "constant.2094", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %1146 = "mhlo.multiply"(%1145, %cst_385) {name = "multiply.2095"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_386 = "std.constant"() {name = "constant.2097", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %1147 = "mhlo.shift_right_logical"(%1146, %cst_386) {name = "shift-right-logical.2098"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1148 = "mhlo.convert"(%1147) {name = "convert.2099"} : (tensor<ui64>) -> tensor<ui32>
      %cst_387 = "std.constant"() {name = "constant.2046", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %1149 = "mhlo.shift_right_logical"(%1141, %cst_387) {name = "shift-right-logical.2047"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1150 = "mhlo.convert"(%1149) {name = "convert.2048"} : (tensor<ui64>) -> tensor<ui32>
      %1151 = "mhlo.convert"(%1104) {name = "convert.2023"} : (tensor<ui64>) -> tensor<ui32>
      %1152 = "mhlo.xor"(%1150, %1151) {name = "xor.2058"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1153 = "mhlo.xor"(%1152, %1008) {name = "xor.2059"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1154 = "mhlo.convert"(%1153) {name = "convert.2071"} : (tensor<ui32>) -> tensor<ui64>
      %cst_388 = "std.constant"() {name = "constant.2072", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
      %1155 = "mhlo.multiply"(%1154, %cst_388) {name = "multiply.2073"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1156 = "mhlo.convert"(%1155) {name = "convert.2074"} : (tensor<ui64>) -> tensor<ui32>
      %1157 = "mhlo.xor"(%1148, %1156) {name = "xor.2100"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1158 = "mhlo.xor"(%1157, %1000) {name = "xor.2101"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1159 = "mhlo.convert"(%1158) {name = "convert.2122"} : (tensor<ui32>) -> tensor<ui64>
      %1160 = "mhlo.convert"(%1146) {name = "convert.2096"} : (tensor<ui64>) -> tensor<ui32>
      %1161 = "mhlo.convert"(%1160) {name = "convert.2123"} : (tensor<ui32>) -> tensor<ui64>
      %cst_389 = "std.constant"() {name = "constant.2124", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %1162 = "mhlo.shift_left"(%1161, %cst_389) {name = "shift-left.2125"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1163 = "mhlo.or"(%1159, %1162) {name = "or.2126"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1164 = "mhlo.reshape"(%1163) {name = "reshape.2127"} : (tensor<ui64>) -> tensor<1xui64>
      %cst_390 = "std.constant"() {name = "constant.2108", value = dense<0> : tensor<ui32>} : () -> tensor<ui32>
      %1165 = "mhlo.convert"(%cst_390) {name = "convert.2109"} : (tensor<ui32>) -> tensor<ui64>
      %1166 = "mhlo.convert"(%cst_390) {name = "convert.2110"} : (tensor<ui32>) -> tensor<ui64>
      %cst_391 = "std.constant"() {name = "constant.2111", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %1167 = "mhlo.shift_left"(%1166, %cst_391) {name = "shift-left.2112"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1168 = "mhlo.or"(%1165, %1167) {name = "or.2113"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1169 = "mhlo.reshape"(%1168) {name = "reshape.2119"} : (tensor<ui64>) -> tensor<1xui64>
      %cst_392 = "std.constant"() {name = "constant.2075", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %1170 = "mhlo.shift_right_logical"(%1155, %cst_392) {name = "shift-right-logical.2076"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1171 = "mhlo.convert"(%1170) {name = "convert.2077"} : (tensor<ui64>) -> tensor<ui32>
      %1172 = "mhlo.convert"(%1118) {name = "convert.2052"} : (tensor<ui64>) -> tensor<ui32>
      %1173 = "mhlo.xor"(%1171, %1172) {name = "xor.2078"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1174 = "mhlo.xor"(%1173, %999) {name = "xor.2079"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1175 = "mhlo.convert"(%1174) {name = "convert.2086"} : (tensor<ui32>) -> tensor<ui64>
      %cst_393 = "std.constant"() {name = "constant.2087", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
      %1176 = "mhlo.multiply"(%1175, %cst_393) {name = "multiply.2088"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %cst_394 = "std.constant"() {name = "constant.2090", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %1177 = "mhlo.shift_right_logical"(%1176, %cst_394) {name = "shift-right-logical.2091"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1178 = "mhlo.convert"(%1177) {name = "convert.2092"} : (tensor<ui64>) -> tensor<ui32>
      %1179 = "mhlo.convert"(%1132) {name = "convert.2067"} : (tensor<ui64>) -> tensor<ui32>
      %1180 = "mhlo.xor"(%1178, %1179) {name = "xor.2102"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1181 = "mhlo.xor"(%1180, %1010) {name = "xor.2103"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
      %1182 = "mhlo.convert"(%1181) {name = "convert.2114"} : (tensor<ui32>) -> tensor<ui64>
      %1183 = "mhlo.convert"(%1176) {name = "convert.2089"} : (tensor<ui64>) -> tensor<ui32>
      %1184 = "mhlo.convert"(%1183) {name = "convert.2115"} : (tensor<ui32>) -> tensor<ui64>
      %cst_395 = "std.constant"() {name = "constant.2116", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
      %1185 = "mhlo.shift_left"(%1184, %cst_395) {name = "shift-left.2117"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1186 = "mhlo.or"(%1182, %1185) {name = "or.2118"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
      %1187 = "mhlo.reshape"(%1186) {name = "reshape.2120"} : (tensor<ui64>) -> tensor<1xui64>
      %1188 = "mhlo.concatenate"(%1169, %1187) {dimension = 0 : i64} : (tensor<1xui64>, tensor<1xui64>) -> tensor<2xui64>
      %1189 = "mhlo.concatenate"(%1164, %1188) {dimension = 0 : i64} : (tensor<1xui64>, tensor<2xui64>) -> tensor<3xui64>
      %1190 = "mhlo.rng_bit_generator"(%1189) {rng_algorithm = 2 : i32} : (tensor<3xui64>) -> tuple<tensor<3xui64>, tensor<4xui32>>
      %1191 = "mhlo.get_tuple_element"(%1190) {index = 0 : i32, name = "get-tuple-element.2131"} : (tuple<tensor<3xui64>, tensor<4xui32>>) -> tensor<3xui64>
      %cst_396 = "std.constant"() {name = "constant.2179", value = dense<0> : tensor<i32>} : () -> tensor<i32>
      %cst_397 = "std.constant"() {name = "constant.2180", value = dense<-1> : tensor<i32>} : () -> tensor<i32>
      %cst_398 = "std.constant"() {name = "constant.2181", value = dense<0> : tensor<i32>} : () -> tensor<i32>
      %cst_399 = "std.constant"() {name = "constant.2182", value = dense<0> : tensor<i32>} : () -> tensor<i32>
      %cst_400 = "std.constant"() {name = "constant.2183", value = dense<-1> : tensor<i32>} : () -> tensor<i32>
      %cst_401 = "std.constant"() {name = "constant.2184", value = dense<0> : tensor<i32>} : () -> tensor<i32>
      %cst_402 = "std.constant"() {name = "constant.1837", value = dense<6.28318548> : tensor<f32>} : () -> tensor<f32>
      %1192 = "mhlo.broadcast_in_dim"(%cst_402) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1838"} : (tensor<f32>) -> tensor<2xf32>
      %1193 = "mhlo.get_tuple_element"(%990) {index = 1 : i32, name = "get-tuple-element.1818"} : (tuple<tensor<3xui64>, tensor<4xui32>>) -> tensor<4xui32>
      %cst_403 = "std.constant"() {name = "constant.1820", value = dense<9> : tensor<ui32>} : () -> tensor<ui32>
      %1194 = "mhlo.broadcast_in_dim"(%cst_403) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1821"} : (tensor<ui32>) -> tensor<4xui32>
      %1195 = "mhlo.shift_right_logical"(%1193, %1194) {name = "shift-right-logical.1822"} : (tensor<4xui32>, tensor<4xui32>) -> tensor<4xui32>
      %1196 = "mhlo.convert"(%1195) {name = "convert.1823"} : (tensor<4xui32>) -> tensor<4xf32>
      %cst_404 = "std.constant"() {name = "constant.1824", value = dense<1.1920929E-7> : tensor<f32>} : () -> tensor<f32>
      %1197 = "mhlo.broadcast_in_dim"(%cst_404) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1825"} : (tensor<f32>) -> tensor<4xf32>
      %1198 = "mhlo.multiply"(%1196, %1197) {name = "multiply.1826"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %cst_405 = "std.constant"() {name = "constant.1559", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %cst_406 = "std.constant"() {name = "constant.1558", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1199 = "mhlo.subtract"(%cst_405, %cst_406) {name = "subtract.1827"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1200 = "mhlo.broadcast_in_dim"(%1199) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1828"} : (tensor<f32>) -> tensor<4xf32>
      %1201 = "mhlo.multiply"(%1198, %1200) {name = "multiply.1829"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1202 = "mhlo.broadcast_in_dim"(%cst_406) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1830"} : (tensor<f32>) -> tensor<4xf32>
      %1203 = "mhlo.add"(%1201, %1202) {name = "add.1831"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1204 = "mhlo.slice"(%1203) {limit_indices = dense<4> : tensor<1xi64>, start_indices = dense<2> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xf32>) -> tensor<2xf32>
      %1205 = "mhlo.multiply"(%1192, %1204) {name = "multiply.1839"} : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1206 = "mhlo.sine"(%1205) {name = "sine.1845"} : (tensor<2xf32>) -> tensor<2xf32>
      %cst_407 = "std.constant"() {name = "constant.1840", value = dense<-2.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1207 = "mhlo.broadcast_in_dim"(%cst_407) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1842"} : (tensor<f32>) -> tensor<2xf32>
      %1208 = "mhlo.slice"(%1203) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xf32>) -> tensor<2xf32>
      %cst_408 = "std.constant"() {name = "constant.1834", value = dense<1.000000e-07> : tensor<f32>} : () -> tensor<f32>
      %1209 = "mhlo.broadcast_in_dim"(%cst_408) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1835"} : (tensor<f32>) -> tensor<2xf32>
      %1210 = "mhlo.maximum"(%1208, %1209) {name = "maximum.1836"} : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1211 = "mhlo.log"(%1210) {name = "log.1841"} : (tensor<2xf32>) -> tensor<2xf32>
      %1212 = "mhlo.multiply"(%1207, %1211) {name = "multiply.1843"} : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1213 = "mhlo.sqrt"(%1212) {name = "sqrt.1844"} : (tensor<2xf32>) -> tensor<2xf32>
      %1214 = "mhlo.multiply"(%1206, %1213) {name = "multiply.1846"} : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1215 = "mhlo.cosine"(%1205) {name = "cosine.1847"} : (tensor<2xf32>) -> tensor<2xf32>
      %1216 = "mhlo.multiply"(%1215, %1213) {name = "multiply.1848"} : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1217 = "mhlo.concatenate"(%1214, %1216) {dimension = 0 : i64} : (tensor<2xf32>, tensor<2xf32>) -> tensor<4xf32>
      %1218 = "mhlo.reshape"(%1217) {name = "reshape.1850"} : (tensor<4xf32>) -> tensor<4xf32>
      %cst_409 = "std.constant"() {name = "constant.1851", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1219 = "mhlo.broadcast_in_dim"(%cst_409) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1852"} : (tensor<f32>) -> tensor<4xf32>
      %1220 = "mhlo.multiply"(%1218, %1219) {name = "multiply.1853"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %cst_410 = "std.constant"() {name = "constant.1854", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1221 = "mhlo.broadcast_in_dim"(%cst_410) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1855"} : (tensor<f32>) -> tensor<4xf32>
      %1222 = "mhlo.add"(%1220, %1221) {name = "add.1856"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %cst_411 = "std.constant"() {name = "constant.2170", value = dense<5.000000e-01> : tensor<f32>} : () -> tensor<f32>
      %1223 = "mhlo.broadcast_in_dim"(%cst_411) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2171"} : (tensor<f32>) -> tensor<4xf32>
      %1224 = "mhlo.get_tuple_element"(%arg1) {index = 33 : i32, name = "get-tuple-element.650"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %1225 = "mhlo.multiply"(%1223, %1224) {name = "multiply.2172"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1226 = "mhlo.get_tuple_element"(%arg1) {index = 8 : i32, name = "get-tuple-element.625"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %1227 = "mhlo.multiply"(%1225, %1226) {name = "multiply.2177"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1228 = "mhlo.add"(%1222, %1227) {name = "add.2178"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1229 = "mhlo.get_tuple_element"(%arg1) {index = 5 : i32, name = "get-tuple-element.622"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %1230 = "mhlo.get_tuple_element"(%arg1) {index = 7 : i32, name = "get-tuple-element.624"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %1231 = "mhlo.get_tuple_element"(%arg1) {index = 12 : i32, name = "get-tuple-element.629"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %1232 = "mhlo.get_tuple_element"(%arg1) {index = 35 : i32, name = "get-tuple-element.652"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
      %1233 = "mhlo.get_tuple_element"(%arg1) {index = 36 : i32, name = "get-tuple-element.653"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
      %1234 = "mhlo.tuple"(%cst_399, %cst_400, %cst_401, %1228, %1229, %1230, %1226, %1231, %1224, %1232, %1233) {name = "tuple.2185"} : (tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>
      %1235 = "mhlo.while"(%1234) ( {
      ^bb0(%arg2: tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>):  // no predecessors
        %1390 = "std.call"(%arg2) {callee = @mcmc_sample_chain_trace_scan_while_smart_for_loop_while_dual_averaging_step_size_adaptation___init____one_step_transformed_kernel_one_step_mh_one_step_hmc_kernel_one_step_leapfrog_integrate_while_cond_514__.596} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tuple<tensor<i1>>
        %1391 = "mhlo.get_tuple_element"(%1390) {index = 0 : i32, name = "get-tuple-element.614"} : (tuple<tensor<i1>>) -> tensor<i1>
        "mhlo.return"(%1391) : (tensor<i1>) -> ()
      },  {
      ^bb0(%arg2: tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>):  // no predecessors
        %1390 = "mhlo.get_tuple_element"(%arg2) {index = 5 : i32, name = "get-tuple-element.389"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
        %1391 = "mhlo.get_tuple_element"(%arg2) {index = 6 : i32, name = "get-tuple-element.390"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
        %cst_435 = "std.constant"() {name = "constant.398", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1392 = "mhlo.broadcast_in_dim"(%cst_435) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.399"} : (tensor<f32>) -> tensor<4xf32>
        %1393 = "mhlo.convert"(%1392) {name = "convert.400"} : (tensor<4xf32>) -> tensor<4xf32>
        %cst_436 = "std.constant"() {name = "constant.401", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1394 = "mhlo.convert"(%cst_436) {name = "convert.402"} : (tensor<f32>) -> tensor<f32>
        %1395 = "mhlo.reduce"(%1393, %1394) ( {
        ^bb0(%arg3: tensor<f32>, %arg4: tensor<f32>):  // no predecessors
          %1560 = "mhlo.add"(%arg3, %arg4) {name = "add.353"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "mhlo.return"(%1560) : (tensor<f32>) -> ()
        }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
        %1396 = "mhlo.convert"(%1395) {name = "convert.404"} : (tensor<f32>) -> tensor<f32>
        %1397 = "mhlo.reshape"(%1396) {name = "reshape.405"} : (tensor<f32>) -> tensor<f32>
        %cst_437 = "std.constant"() {name = "constant.395", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1398 = "mhlo.broadcast_in_dim"(%cst_437) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.396"} : (tensor<f32>) -> tensor<4xf32>
        %1399 = "mhlo.negate"(%1398) {name = "negate.397"} : (tensor<4xf32>) -> tensor<4xf32>
        %1400 = "mhlo.convert"(%1399) {name = "convert.406"} : (tensor<4xf32>) -> tensor<4xf32>
        %cst_438 = "std.constant"() {name = "constant.407", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1401 = "mhlo.convert"(%cst_438) {name = "convert.408"} : (tensor<f32>) -> tensor<f32>
        %1402 = "mhlo.reduce"(%1400, %1401) ( {
        ^bb0(%arg3: tensor<f32>, %arg4: tensor<f32>):  // no predecessors
          %1560 = "mhlo.add"(%arg3, %arg4) {name = "add.357"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "mhlo.return"(%1560) : (tensor<f32>) -> ()
        }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
        %1403 = "mhlo.convert"(%1402) {name = "convert.410"} : (tensor<f32>) -> tensor<f32>
        %1404 = "mhlo.reshape"(%1403) {name = "reshape.411"} : (tensor<f32>) -> tensor<f32>
        %cst_439 = "std.constant"() {name = "constant.416", value = dense<4> : tensor<1xi32>} : () -> tensor<1xi32>
        %cst_440 = "std.constant"() {name = "constant.417", value = dense<0> : tensor<i32>} : () -> tensor<i32>
        %1405 = "mhlo.broadcast_in_dim"(%cst_440) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.419"} : (tensor<i32>) -> tensor<1xi32>
        %1406 = "mhlo.compare"(%cst_439, %1405) {comparison_direction = "LT", name = "compare.420"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi1>
        %cst_441 = "std.constant"() {name = "constant.412", value = dense<4> : tensor<1xi32>} : () -> tensor<1xi32>
        %cst_442 = "std.constant"() {name = "constant.413", value = dense<1> : tensor<i32>} : () -> tensor<i32>
        %1407 = "mhlo.broadcast_in_dim"(%cst_442) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.414"} : (tensor<i32>) -> tensor<1xi32>
        %1408 = "mhlo.maximum"(%cst_441, %1407) {name = "maximum.415"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
        %1409 = "mhlo.broadcast_in_dim"(%cst_440) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.421"} : (tensor<i32>) -> tensor<1xi32>
        %1410 = "mhlo.compare"(%1408, %1409) {comparison_direction = "LT", name = "compare.422"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi1>
        %1411 = "mhlo.compare"(%1406, %1410) {comparison_direction = "NE", name = "compare.423"} : (tensor<1xi1>, tensor<1xi1>) -> tensor<1xi1>
        %1412 = "mhlo.abs"(%cst_439) {name = "abs.424"} : (tensor<1xi32>) -> tensor<1xi32>
        %1413 = "mhlo.abs"(%1408) {name = "abs.425"} : (tensor<1xi32>) -> tensor<1xi32>
        %1414 = "mhlo.add"(%1412, %1413) {name = "add.426"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
        %cst_443 = "std.constant"() {name = "constant.418", value = dense<1> : tensor<i32>} : () -> tensor<i32>
        %1415 = "mhlo.broadcast_in_dim"(%cst_443) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.427"} : (tensor<i32>) -> tensor<1xi32>
        %1416 = "mhlo.subtract"(%1414, %1415) {name = "subtract.428"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
        %1417 = "mhlo.negate"(%1416) {name = "negate.429"} : (tensor<1xi32>) -> tensor<1xi32>
        %1418 = "mhlo.divide"(%1417, %1413) {name = "divide.430"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
        %1419 = "mhlo.divide"(%cst_439, %1408) {name = "divide.431"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
        %1420 = "mhlo.select"(%1411, %1418, %1419) {name = "select.432"} : (tensor<1xi1>, tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
        %cst_444 = "std.constant"() {name = "constant.433", value = dense<-5.000000e-01> : tensor<f32>} : () -> tensor<f32>
        %1421 = "mhlo.broadcast_in_dim"(%cst_444) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.436"} : (tensor<f32>) -> tensor<4xf32>
        %cst_445 = "std.constant"() {name = "constant.434", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1422 = "mhlo.broadcast_in_dim"(%cst_445) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.435"} : (tensor<f32>) -> tensor<4xf32>
        %1423 = "mhlo.multiply"(%1421, %1422) {name = "multiply.437"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %cst_446 = "std.constant"() {name = "constant.438", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1424 = "mhlo.broadcast_in_dim"(%cst_446) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.441"} : (tensor<f32>) -> tensor<4xf32>
        %cst_447 = "std.constant"() {name = "constant.439", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1425 = "mhlo.broadcast_in_dim"(%cst_447) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.440"} : (tensor<f32>) -> tensor<4xf32>
        %1426 = "mhlo.multiply"(%1424, %1425) {name = "multiply.442"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %cst_448 = "std.constant"() {name = "constant.503", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1427 = "mhlo.broadcast_in_dim"(%cst_448) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.504"} : (tensor<f32>) -> tensor<4xf32>
        %1428 = "mhlo.get_tuple_element"(%arg2) {index = 4 : i32, name = "get-tuple-element.388"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
        %1429 = "mhlo.get_tuple_element"(%arg2) {index = 8 : i32, name = "get-tuple-element.392"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
        %1430 = "mhlo.get_tuple_element"(%arg2) {index = 3 : i32, name = "get-tuple-element.387"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
        %1431 = "mhlo.multiply"(%1429, %1430) {name = "multiply.455"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1432 = "mhlo.add"(%1428, %1431) {name = "add.456"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1433 = "mhlo.exponential"(%1432) {name = "exponential.486"} : (tensor<4xf32>) -> tensor<4xf32>
        %1434 = "mhlo.log"(%1433) {name = "log.493"} : (tensor<4xf32>) -> tensor<4xf32>
        %1435 = "mhlo.get_tuple_element"(%arg2) {index = 9 : i32, name = "get-tuple-element.393"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<f32>
        %1436 = "mhlo.broadcast_in_dim"(%1435) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.499"} : (tensor<f32>) -> tensor<4xf32>
        %1437 = "mhlo.divide"(%1434, %1436) {name = "divide.500"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1438 = "mhlo.get_tuple_element"(%arg2) {index = 10 : i32, name = "get-tuple-element.394"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<f32>
        %1439 = "mhlo.divide"(%1438, %1435) {name = "divide.450"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1440 = "mhlo.broadcast_in_dim"(%1439) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.501"} : (tensor<f32>) -> tensor<4xf32>
        %1441 = "mhlo.subtract"(%1437, %1440) {name = "subtract.502"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1442 = "mhlo.multiply"(%1427, %1441) {name = "multiply.505"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1443 = "mhlo.convert"(%1442) {name = "convert.506"} : (tensor<4xf32>) -> tensor<4xf32>
        %cst_449 = "std.constant"() {name = "constant.507", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1444 = "mhlo.convert"(%cst_449) {name = "convert.508"} : (tensor<f32>) -> tensor<f32>
        %1445 = "mhlo.reduce"(%1443, %1444) ( {
        ^bb0(%arg3: tensor<f32>, %arg4: tensor<f32>):  // no predecessors
          %1560 = "mhlo.add"(%arg3, %arg4) {name = "add.361"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "mhlo.return"(%1560) : (tensor<f32>) -> ()
        }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
        %1446 = "mhlo.convert"(%1445) {name = "convert.510"} : (tensor<f32>) -> tensor<f32>
        %1447 = "mhlo.reshape"(%1446) {name = "reshape.511"} : (tensor<f32>) -> tensor<f32>
        %1448 = "mhlo.negate"(%1447) {name = "negate.512"} : (tensor<f32>) -> tensor<f32>
        %1449 = "mhlo.negate"(%1434) {name = "negate.494"} : (tensor<4xf32>) -> tensor<4xf32>
        %1450 = "mhlo.broadcast_in_dim"(%1435) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.495"} : (tensor<f32>) -> tensor<4xf32>
        %1451 = "mhlo.divide"(%1449, %1450) {name = "divide.496"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1452 = "mhlo.broadcast_in_dim"(%1435) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.497"} : (tensor<f32>) -> tensor<4xf32>
        %1453 = "mhlo.divide"(%1451, %1452) {name = "divide.498"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1454 = "mhlo.multiply"(%1442, %1453) {name = "multiply.527"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1455 = "mhlo.convert"(%1454) {name = "convert.528"} : (tensor<4xf32>) -> tensor<4xf32>
        %cst_450 = "std.constant"() {name = "constant.529", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1456 = "mhlo.convert"(%cst_450) {name = "convert.530"} : (tensor<f32>) -> tensor<f32>
        %1457 = "mhlo.reduce"(%1455, %1456) ( {
        ^bb0(%arg3: tensor<f32>, %arg4: tensor<f32>):  // no predecessors
          %1560 = "mhlo.add"(%arg3, %arg4) {name = "add.365"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "mhlo.return"(%1560) : (tensor<f32>) -> ()
        }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
        %1458 = "mhlo.convert"(%1457) {name = "convert.532"} : (tensor<f32>) -> tensor<f32>
        %1459 = "mhlo.reshape"(%1458) {name = "reshape.533"} : (tensor<f32>) -> tensor<f32>
        %cst_451 = "std.constant"() {name = "constant.537", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1460 = "mhlo.broadcast_in_dim"(%cst_451) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.538"} : (tensor<f32>) -> tensor<4xf32>
        %1461 = "mhlo.broadcast_in_dim"(%1439) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.534"} : (tensor<f32>) -> tensor<4xf32>
        %1462 = "mhlo.subtract"(%1437, %1461) {name = "subtract.535"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1463 = "mhlo.multiply"(%1462, %1462) {name = "multiply.536"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1464 = "mhlo.multiply"(%1460, %1463) {name = "multiply.539"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1465 = "mhlo.convert"(%1464) {name = "convert.540"} : (tensor<4xf32>) -> tensor<4xf32>
        %cst_452 = "std.constant"() {name = "constant.541", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1466 = "mhlo.convert"(%cst_452) {name = "convert.542"} : (tensor<f32>) -> tensor<f32>
        %1467 = "mhlo.reduce"(%1465, %1466) ( {
        ^bb0(%arg3: tensor<f32>, %arg4: tensor<f32>):  // no predecessors
          %1560 = "mhlo.add"(%arg3, %arg4) {name = "add.369"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "mhlo.return"(%1560) : (tensor<f32>) -> ()
        }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
        %1468 = "mhlo.convert"(%1467) {name = "convert.544"} : (tensor<f32>) -> tensor<f32>
        %1469 = "mhlo.reshape"(%1468) {name = "reshape.545"} : (tensor<f32>) -> tensor<f32>
        %cst_453 = "std.constant"() {name = "constant.552", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1470 = "mhlo.broadcast_in_dim"(%cst_453) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.553"} : (tensor<f32>) -> tensor<4xf32>
        %1471 = "mhlo.log"(%1433) {name = "log.551"} : (tensor<4xf32>) -> tensor<4xf32>
        %1472 = "mhlo.multiply"(%1470, %1471) {name = "multiply.554"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1473 = "mhlo.convert"(%1472) {name = "convert.555"} : (tensor<4xf32>) -> tensor<4xf32>
        %cst_454 = "std.constant"() {name = "constant.556", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1474 = "mhlo.convert"(%cst_454) {name = "convert.557"} : (tensor<f32>) -> tensor<f32>
        %1475 = "mhlo.reduce"(%1473, %1474) ( {
        ^bb0(%arg3: tensor<f32>, %arg4: tensor<f32>):  // no predecessors
          %1560 = "mhlo.add"(%arg3, %arg4) {name = "add.373"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "mhlo.return"(%1560) : (tensor<f32>) -> ()
        }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
        %1476 = "mhlo.convert"(%1475) {name = "convert.559"} : (tensor<f32>) -> tensor<f32>
        %1477 = "mhlo.reshape"(%1476) {name = "reshape.560"} : (tensor<f32>) -> tensor<f32>
        %cst_455 = "std.constant"() {name = "constant.564", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1478 = "mhlo.broadcast_in_dim"(%cst_455) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.565"} : (tensor<f32>) -> tensor<4xf32>
        %cst_456 = "std.constant"() {name = "constant.561", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1479 = "mhlo.broadcast_in_dim"(%cst_456) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.562"} : (tensor<f32>) -> tensor<4xf32>
        %1480 = "mhlo.multiply"(%1479, %1471) {name = "multiply.563"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1481 = "mhlo.multiply"(%1478, %1480) {name = "multiply.566"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1482 = "mhlo.convert"(%1481) {name = "convert.567"} : (tensor<4xf32>) -> tensor<4xf32>
        %cst_457 = "std.constant"() {name = "constant.568", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1483 = "mhlo.convert"(%cst_457) {name = "convert.569"} : (tensor<f32>) -> tensor<f32>
        %1484 = "mhlo.reduce"(%1482, %1483) ( {
        ^bb0(%arg3: tensor<f32>, %arg4: tensor<f32>):  // no predecessors
          %1560 = "mhlo.add"(%arg3, %arg4) {name = "add.377"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "mhlo.return"(%1560) : (tensor<f32>) -> ()
        }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
        %1485 = "mhlo.convert"(%1484) {name = "convert.571"} : (tensor<f32>) -> tensor<f32>
        %1486 = "mhlo.reshape"(%1485) {name = "reshape.572"} : (tensor<f32>) -> tensor<f32>
        %cst_458 = "std.constant"() {name = "constant.546", value = dense<-5.000000e-01> : tensor<f32>} : () -> tensor<f32>
        %1487 = "mhlo.broadcast_in_dim"(%cst_458) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.547"} : (tensor<f32>) -> tensor<4xf32>
        %1488 = "mhlo.multiply"(%1487, %1463) {name = "multiply.548"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %cst_459 = "std.constant"() {name = "constant.447", value = dense<0.918938517> : tensor<f32>} : () -> tensor<f32>
        %1489 = "mhlo.log"(%1435) {name = "log.446"} : (tensor<f32>) -> tensor<f32>
        %1490 = "mhlo.add"(%cst_459, %1489) {name = "add.448"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1491 = "mhlo.broadcast_in_dim"(%1490) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.549"} : (tensor<f32>) -> tensor<4xf32>
        %1492 = "mhlo.subtract"(%1488, %1491) {name = "subtract.550"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %cst_460 = "std.constant"() {name = "constant.573", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1493 = "mhlo.broadcast_in_dim"(%cst_460) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.574"} : (tensor<f32>) -> tensor<4xf32>
        %1494 = "mhlo.multiply"(%1493, %1480) {name = "multiply.575"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1495 = "mhlo.add"(%1492, %1494) {name = "add.576"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %cst_461 = "std.constant"() {name = "constant.582", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1496 = "mhlo.broadcast_in_dim"(%cst_461) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.583"} : (tensor<f32>) -> tensor<4xf32>
        %cst_462 = "std.constant"() {name = "constant.578", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1497 = "mhlo.broadcast_in_dim"(%cst_462) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.579"} : (tensor<f32>) -> tensor<4xf32>
        %1498 = "mhlo.negate"(%1432) {name = "negate.577"} : (tensor<4xf32>) -> tensor<4xf32>
        %1499 = "mhlo.multiply"(%1497, %1498) {name = "multiply.580"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1500 = "mhlo.negate"(%1499) {name = "negate.581"} : (tensor<4xf32>) -> tensor<4xf32>
        %1501 = "mhlo.add"(%1496, %1500) {name = "add.584"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1502 = "mhlo.add"(%1495, %1501) {name = "add.585"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %cst_463 = "std.constant"() {name = "constant.586", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1503 = "mhlo.broadcast_in_dim"(%cst_463) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.587"} : (tensor<f32>) -> tensor<4xf32>
        %1504 = "mhlo.multiply"(%1503, %1498) {name = "multiply.588"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1505 = "mhlo.convert"(%1504) {name = "convert.589"} : (tensor<4xf32>) -> tensor<4xf32>
        %cst_464 = "std.constant"() {name = "constant.590", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1506 = "mhlo.convert"(%cst_464) {name = "convert.591"} : (tensor<f32>) -> tensor<f32>
        %1507 = "mhlo.reduce"(%1505, %1506) ( {
        ^bb0(%arg3: tensor<f32>, %arg4: tensor<f32>):  // no predecessors
          %1560 = "mhlo.add"(%arg3, %arg4) {name = "add.381"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "mhlo.return"(%1560) : (tensor<f32>) -> ()
        }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
        %1508 = "mhlo.convert"(%1507) {name = "convert.593"} : (tensor<f32>) -> tensor<f32>
        %1509 = "mhlo.reshape"(%1508) {name = "reshape.594"} : (tensor<f32>) -> tensor<f32>
        %1510 = "mhlo.get_tuple_element"(%arg2) {index = 0 : i32, name = "get-tuple-element.384"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
        %cst_465 = "std.constant"() {name = "constant.451", value = dense<1> : tensor<i32>} : () -> tensor<i32>
        %1511 = "mhlo.add"(%1510, %cst_465) {name = "add.452"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
        %1512 = "mhlo.get_tuple_element"(%arg2) {index = 1 : i32, name = "get-tuple-element.385"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
        %1513 = "mhlo.get_tuple_element"(%arg2) {index = 2 : i32, name = "get-tuple-element.386"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
        %cst_466 = "std.constant"() {name = "constant.453", value = dense<1> : tensor<i32>} : () -> tensor<i32>
        %1514 = "mhlo.add"(%1513, %cst_466) {name = "add.454"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
        %cst_467 = "std.constant"() {name = "constant.522", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1515 = "mhlo.broadcast_in_dim"(%cst_467) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.523"} : (tensor<f32>) -> tensor<4xf32>
        %cst_468 = "std.constant"() {name = "constant.490", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1516 = "mhlo.broadcast_in_dim"(%cst_468) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.491"} : (tensor<f32>) -> tensor<4xf32>
        %cst_469 = "std.constant"() {name = "constant.487", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1517 = "mhlo.broadcast_in_dim"(%cst_469) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.488"} : (tensor<f32>) -> tensor<4xf32>
        %1518 = "mhlo.divide"(%1517, %1433) {name = "divide.489"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1519 = "mhlo.multiply"(%1516, %1518) {name = "multiply.492"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1520 = "mhlo.broadcast_in_dim"(%1435) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.513"} : (tensor<f32>) -> tensor<4xf32>
        %1521 = "mhlo.divide"(%1442, %1520) {name = "divide.514"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1522 = "mhlo.reshape"(%1521) {name = "reshape.515"} : (tensor<4xf32>) -> tensor<4xf32>
        %cst_470 = "std.constant"() {name = "constant.516", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1523 = "mhlo.broadcast_in_dim"(%cst_470) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.517"} : (tensor<f32>) -> tensor<4xf32>
        %1524 = "mhlo.divide"(%1523, %1433) {name = "divide.518"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1525 = "mhlo.multiply"(%1522, %1524) {name = "multiply.519"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1526 = "mhlo.add"(%1519, %1525) {name = "add.520"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1527 = "mhlo.multiply"(%1526, %1433) {name = "multiply.521"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1528 = "mhlo.add"(%1515, %1527) {name = "add.524"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1529 = "mhlo.multiply"(%1429, %1528) {name = "multiply.525"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1530 = "mhlo.add"(%1430, %1529) {name = "add.526"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %cst_471 = "std.constant"() {name = "constant.464", value = dense<-5.000000e-01> : tensor<f32>} : () -> tensor<f32>
        %1531 = "mhlo.broadcast_in_dim"(%cst_471) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.465"} : (tensor<f32>) -> tensor<4xf32>
        %1532 = "mhlo.exponential"(%1432) {name = "exponential.457"} : (tensor<4xf32>) -> tensor<4xf32>
        %1533 = "mhlo.log"(%1532) {name = "log.458"} : (tensor<4xf32>) -> tensor<4xf32>
        %1534 = "mhlo.broadcast_in_dim"(%1435) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.459"} : (tensor<f32>) -> tensor<4xf32>
        %1535 = "mhlo.divide"(%1533, %1534) {name = "divide.460"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1536 = "mhlo.divide"(%1438, %1435) {name = "divide.449"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1537 = "mhlo.broadcast_in_dim"(%1536) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.461"} : (tensor<f32>) -> tensor<4xf32>
        %1538 = "mhlo.subtract"(%1535, %1537) {name = "subtract.462"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1539 = "mhlo.multiply"(%1538, %1538) {name = "multiply.463"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1540 = "mhlo.multiply"(%1531, %1539) {name = "multiply.466"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %cst_472 = "std.constant"() {name = "constant.444", value = dense<0.918938517> : tensor<f32>} : () -> tensor<f32>
        %1541 = "mhlo.log"(%1435) {name = "log.443"} : (tensor<f32>) -> tensor<f32>
        %1542 = "mhlo.add"(%cst_472, %1541) {name = "add.445"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1543 = "mhlo.broadcast_in_dim"(%1542) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.467"} : (tensor<f32>) -> tensor<4xf32>
        %1544 = "mhlo.subtract"(%1540, %1543) {name = "subtract.468"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %cst_473 = "std.constant"() {name = "constant.473", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1545 = "mhlo.broadcast_in_dim"(%cst_473) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.474"} : (tensor<f32>) -> tensor<4xf32>
        %cst_474 = "std.constant"() {name = "constant.470", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1546 = "mhlo.broadcast_in_dim"(%cst_474) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.471"} : (tensor<f32>) -> tensor<4xf32>
        %1547 = "mhlo.log"(%1532) {name = "log.469"} : (tensor<4xf32>) -> tensor<4xf32>
        %1548 = "mhlo.multiply"(%1546, %1547) {name = "multiply.472"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1549 = "mhlo.multiply"(%1545, %1548) {name = "multiply.475"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1550 = "mhlo.add"(%1544, %1549) {name = "add.476"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %cst_475 = "std.constant"() {name = "constant.482", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1551 = "mhlo.broadcast_in_dim"(%cst_475) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.483"} : (tensor<f32>) -> tensor<4xf32>
        %cst_476 = "std.constant"() {name = "constant.478", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1552 = "mhlo.broadcast_in_dim"(%cst_476) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.479"} : (tensor<f32>) -> tensor<4xf32>
        %1553 = "mhlo.negate"(%1432) {name = "negate.477"} : (tensor<4xf32>) -> tensor<4xf32>
        %1554 = "mhlo.multiply"(%1552, %1553) {name = "multiply.480"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1555 = "mhlo.negate"(%1554) {name = "negate.481"} : (tensor<4xf32>) -> tensor<4xf32>
        %1556 = "mhlo.add"(%1551, %1555) {name = "add.484"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1557 = "mhlo.add"(%1550, %1556) {name = "add.485"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1558 = "mhlo.get_tuple_element"(%arg2) {index = 7 : i32, name = "get-tuple-element.391"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
        %1559 = "mhlo.tuple"(%1511, %1512, %1514, %1530, %1432, %1557, %1528, %1558, %1429, %1435, %1438) {name = "tuple.595"} : (tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>
        "mhlo.return"(%1559) : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> ()
      }) : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>
      %1236 = "mhlo.get_tuple_element"(%1235) {index = 0 : i32, name = "get-tuple-element.2187"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
      %1237 = "mhlo.get_tuple_element"(%1235) {index = 1 : i32, name = "get-tuple-element.2188"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
      %1238 = "mhlo.get_tuple_element"(%1235) {index = 2 : i32, name = "get-tuple-element.2189"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
      %1239 = "mhlo.get_tuple_element"(%1235) {index = 3 : i32, name = "get-tuple-element.2190"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
      %1240 = "mhlo.get_tuple_element"(%1235) {index = 4 : i32, name = "get-tuple-element.2191"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
      %1241 = "mhlo.get_tuple_element"(%1235) {index = 5 : i32, name = "get-tuple-element.2192"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
      %1242 = "mhlo.get_tuple_element"(%1235) {index = 6 : i32, name = "get-tuple-element.2193"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
      %1243 = "mhlo.get_tuple_element"(%1235) {index = 7 : i32, name = "get-tuple-element.2194"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
      %1244 = "mhlo.get_tuple_element"(%1235) {index = 8 : i32, name = "get-tuple-element.2195"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
      %1245 = "mhlo.get_tuple_element"(%1235) {index = 9 : i32, name = "get-tuple-element.2196"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<f32>
      %1246 = "mhlo.get_tuple_element"(%1235) {index = 10 : i32, name = "get-tuple-element.2197"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<f32>
      %1247 = "mhlo.tuple"(%1236, %1237, %1238, %1239, %1240, %1241, %1242, %1243, %1244, %1245, %1246) {name = "tuple.2198"} : (tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>
      %1248 = "mhlo.get_tuple_element"(%1247) {index = 0 : i32, name = "get-tuple-element.2199"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
      %1249 = "mhlo.get_tuple_element"(%1247) {index = 1 : i32, name = "get-tuple-element.2200"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
      %1250 = "mhlo.get_tuple_element"(%1247) {index = 2 : i32, name = "get-tuple-element.2201"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
      %1251 = "mhlo.get_tuple_element"(%1247) {index = 7 : i32, name = "get-tuple-element.2206"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
      %1252 = "mhlo.get_tuple_element"(%1247) {index = 8 : i32, name = "get-tuple-element.2207"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
      %1253 = "mhlo.get_tuple_element"(%1247) {index = 9 : i32, name = "get-tuple-element.2208"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<f32>
      %1254 = "mhlo.get_tuple_element"(%1247) {index = 10 : i32, name = "get-tuple-element.2209"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<f32>
      %1255 = "mhlo.get_tuple_element"(%arg1) {index = 0 : i32, name = "get-tuple-element.617"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %cst_412 = "std.constant"() {name = "constant.721", value = dense<1> : tensor<i32>} : () -> tensor<i32>
      %1256 = "mhlo.add"(%1255, %cst_412) {name = "add.722"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
      %1257 = "mhlo.get_tuple_element"(%arg1) {index = 1 : i32, name = "get-tuple-element.618"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %1258 = "mhlo.get_tuple_element"(%arg1) {index = 2 : i32, name = "get-tuple-element.619"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %cst_413 = "std.constant"() {name = "constant.723", value = dense<1> : tensor<i32>} : () -> tensor<i32>
      %1259 = "mhlo.add"(%1258, %cst_413) {name = "add.724"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
      %1260 = "mhlo.slice"(%407) {limit_indices = dense<2> : tensor<2xi64>, start_indices = dense<[1, 0]> : tensor<2xi64>, strides = dense<1> : tensor<2xi64>} : (tensor<2x2xi32>) -> tensor<1x2xi32>
      %1261 = "mhlo.reshape"(%1260) {name = "reshape.999"} : (tensor<1x2xi32>) -> tensor<2xi32>
      %1262 = "mhlo.get_tuple_element"(%1190) {index = 1 : i32, name = "get-tuple-element.2130"} : (tuple<tensor<3xui64>, tensor<4xui32>>) -> tensor<4xui32>
      %cst_414 = "std.constant"() {name = "constant.2132", value = dense<9> : tensor<ui32>} : () -> tensor<ui32>
      %1263 = "mhlo.broadcast_in_dim"(%cst_414) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2133"} : (tensor<ui32>) -> tensor<4xui32>
      %1264 = "mhlo.shift_right_logical"(%1262, %1263) {name = "shift-right-logical.2134"} : (tensor<4xui32>, tensor<4xui32>) -> tensor<4xui32>
      %1265 = "mhlo.convert"(%1264) {name = "convert.2135"} : (tensor<4xui32>) -> tensor<4xf32>
      %cst_415 = "std.constant"() {name = "constant.2136", value = dense<1.1920929E-7> : tensor<f32>} : () -> tensor<f32>
      %1266 = "mhlo.broadcast_in_dim"(%cst_415) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2137"} : (tensor<f32>) -> tensor<4xf32>
      %1267 = "mhlo.multiply"(%1265, %1266) {name = "multiply.2138"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %cst_416 = "std.constant"() {name = "constant.1861", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %cst_417 = "std.constant"() {name = "constant.1860", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1268 = "mhlo.subtract"(%cst_416, %cst_417) {name = "subtract.2139"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1269 = "mhlo.broadcast_in_dim"(%1268) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2140"} : (tensor<f32>) -> tensor<4xf32>
      %1270 = "mhlo.multiply"(%1267, %1269) {name = "multiply.2141"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1271 = "mhlo.broadcast_in_dim"(%cst_417) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2142"} : (tensor<f32>) -> tensor<4xf32>
      %1272 = "mhlo.add"(%1270, %1271) {name = "add.2143"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %cst_418 = "std.constant"() {name = "constant.2144", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1273 = "mhlo.broadcast_in_dim"(%cst_418) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2145"} : (tensor<f32>) -> tensor<4xf32>
      %1274 = "mhlo.multiply"(%1272, %1273) {name = "multiply.2146"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %cst_419 = "std.constant"() {name = "constant.2147", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1275 = "mhlo.broadcast_in_dim"(%cst_419) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2148"} : (tensor<f32>) -> tensor<4xf32>
      %1276 = "mhlo.add"(%1274, %1275) {name = "add.2149"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1277 = "mhlo.log"(%1276) {name = "log.2150"} : (tensor<4xf32>) -> tensor<4xf32>
      %1278 = "mhlo.get_tuple_element"(%1247) {index = 5 : i32, name = "get-tuple-element.2204"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
      %1279 = "mhlo.negate"(%1230) {name = "negate.2176"} : (tensor<4xf32>) -> tensor<4xf32>
      %1280 = "mhlo.add"(%1278, %1279) {name = "add.2224"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %cst_420 = "std.constant"() {name = "constant.2221", value = dense<5.000000e-01> : tensor<f32>} : () -> tensor<f32>
      %1281 = "mhlo.broadcast_in_dim"(%cst_420) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2222"} : (tensor<f32>) -> tensor<4xf32>
      %cst_421 = "std.constant"() {name = "constant.1857", value = dense<2.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1282 = "mhlo.broadcast_in_dim"(%cst_421) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1858"} : (tensor<f32>) -> tensor<4xf32>
      %1283 = "mhlo.power"(%1222, %1282) {name = "power.1859"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1284 = "mhlo.get_tuple_element"(%1247) {index = 3 : i32, name = "get-tuple-element.2202"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
      %cst_422 = "std.constant"() {name = "constant.2173", value = dense<5.000000e-01> : tensor<f32>} : () -> tensor<f32>
      %1285 = "mhlo.broadcast_in_dim"(%cst_422) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2174"} : (tensor<f32>) -> tensor<4xf32>
      %1286 = "mhlo.multiply"(%1285, %1224) {name = "multiply.2175"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1287 = "mhlo.get_tuple_element"(%1247) {index = 6 : i32, name = "get-tuple-element.2205"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
      %1288 = "mhlo.multiply"(%1286, %1287) {name = "multiply.2210"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1289 = "mhlo.subtract"(%1284, %1288) {name = "subtract.2211"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %cst_423 = "std.constant"() {name = "constant.2212", value = dense<2.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1290 = "mhlo.broadcast_in_dim"(%cst_423) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2213"} : (tensor<f32>) -> tensor<4xf32>
      %1291 = "mhlo.power"(%1289, %1290) {name = "power.2214"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1292 = "mhlo.negate"(%1291) {name = "negate.2215"} : (tensor<4xf32>) -> tensor<4xf32>
      %1293 = "mhlo.add"(%1283, %1292) {name = "add.2216"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1294 = "mhlo.is_finite"(%1293) {name = "is-finite.2217"} : (tensor<4xf32>) -> tensor<4xi1>
      %cst_424 = "std.constant"() {name = "constant.2218", value = dense<0xFF800000> : tensor<f32>} : () -> tensor<f32>
      %1295 = "mhlo.broadcast_in_dim"(%cst_424) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2219"} : (tensor<f32>) -> tensor<4xf32>
      %1296 = "mhlo.select"(%1294, %1293, %1295) {name = "select.2220"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1297 = "mhlo.multiply"(%1281, %1296) {name = "multiply.2223"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1298 = "mhlo.add"(%1280, %1297) {name = "add.2225"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1299 = "mhlo.is_finite"(%1298) {name = "is-finite.2226"} : (tensor<4xf32>) -> tensor<4xi1>
      %cst_425 = "std.constant"() {name = "constant.2227", value = dense<0xFF800000> : tensor<f32>} : () -> tensor<f32>
      %1300 = "mhlo.broadcast_in_dim"(%cst_425) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2228"} : (tensor<f32>) -> tensor<4xf32>
      %1301 = "mhlo.select"(%1299, %1298, %1300) {name = "select.2229"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1302 = "mhlo.compare"(%1277, %1301) {comparison_direction = "LT", name = "compare.2279"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xi1>
      %1303 = "mhlo.reshape"(%1302) {name = "reshape.2288"} : (tensor<4xi1>) -> tensor<4xi1>
      %1304 = "mhlo.get_tuple_element"(%1247) {index = 4 : i32, name = "get-tuple-element.2203"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
      %1305 = "mhlo.select"(%1303, %1304, %1229) {name = "select.2289"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1306 = "mhlo.exponential"(%1305) {name = "exponential.2290"} : (tensor<4xf32>) -> tensor<4xf32>
      %1307 = "mhlo.reshape"(%1302) {name = "reshape.2280"} : (tensor<4xi1>) -> tensor<4xi1>
      %1308 = "mhlo.get_tuple_element"(%arg1) {index = 6 : i32, name = "get-tuple-element.623"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %1309 = "mhlo.select"(%1307, %1297, %1308) {name = "select.2281"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1310 = "mhlo.reshape"(%1302) {name = "reshape.2282"} : (tensor<4xi1>) -> tensor<4xi1>
      %1311 = "mhlo.select"(%1310, %1278, %1230) {name = "select.2283"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1312 = "mhlo.reshape"(%1302) {name = "reshape.2284"} : (tensor<4xi1>) -> tensor<4xi1>
      %1313 = "mhlo.select"(%1312, %1287, %1226) {name = "select.2285"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1314 = "mhlo.reshape"(%1302) {name = "reshape.2286"} : (tensor<4xi1>) -> tensor<4xi1>
      %1315 = "mhlo.get_tuple_element"(%arg1) {index = 9 : i32, name = "get-tuple-element.626"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %1316 = "mhlo.select"(%1314, %1222, %1315) {name = "select.2291"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1317 = "mhlo.reshape"(%1302) {name = "reshape.2287"} : (tensor<4xi1>) -> tensor<4xi1>
      %1318 = "mhlo.get_tuple_element"(%arg1) {index = 10 : i32, name = "get-tuple-element.627"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %1319 = "mhlo.select"(%1317, %1289, %1318) {name = "select.2292"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1320 = "mhlo.get_tuple_element"(%arg1) {index = 25 : i32, name = "get-tuple-element.642"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
      %1321 = "mhlo.get_tuple_element"(%arg1) {index = 26 : i32, name = "get-tuple-element.643"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %1322 = "mhlo.get_tuple_element"(%arg1) {index = 27 : i32, name = "get-tuple-element.644"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
      %1323 = "mhlo.get_tuple_element"(%arg1) {index = 28 : i32, name = "get-tuple-element.645"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
      %1324 = "mhlo.get_tuple_element"(%arg1) {index = 29 : i32, name = "get-tuple-element.646"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
      %1325 = "mhlo.get_tuple_element"(%arg1) {index = 30 : i32, name = "get-tuple-element.647"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %1326 = "mhlo.broadcast_in_dim"(%1320) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2152"} : (tensor<f32>) -> tensor<4xf32>
      %1327 = "mhlo.add"(%1325, %1326) {name = "add.2153"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1328 = "mhlo.is_finite"(%1301) {name = "is-finite.2230"} : (tensor<4xf32>) -> tensor<4xi1>
      %cst_426 = "std.constant"() {name = "constant.2231", value = dense<0xFF800000> : tensor<f32>} : () -> tensor<f32>
      %1329 = "mhlo.broadcast_in_dim"(%cst_426) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2232"} : (tensor<f32>) -> tensor<4xf32>
      %1330 = "mhlo.select"(%1328, %1301, %1329) {name = "select.2233"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %cst_427 = "std.constant"() {name = "constant.2234", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1331 = "mhlo.broadcast_in_dim"(%cst_427) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2235"} : (tensor<f32>) -> tensor<4xf32>
      %1332 = "mhlo.minimum"(%1330, %1331) {name = "minimum.2236"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1333 = "mhlo.is_finite"(%1332) {name = "is-finite.2237"} : (tensor<4xf32>) -> tensor<4xi1>
      %cst_428 = "std.constant"() {name = "constant.2238", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1334 = "mhlo.broadcast_in_dim"(%cst_428) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2239"} : (tensor<f32>) -> tensor<4xf32>
      %1335 = "mhlo.select"(%1333, %1332, %1334) {name = "select.2240"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1336 = "mhlo.subtract"(%1332, %1335) {name = "subtract.2241"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1337 = "mhlo.exponential"(%1336) {name = "exponential.2242"} : (tensor<4xf32>) -> tensor<4xf32>
      %1338 = "mhlo.log"(%1337) {name = "log.2243"} : (tensor<4xf32>) -> tensor<4xf32>
      %1339 = "mhlo.reshape"(%1335) {name = "reshape.2244"} : (tensor<4xf32>) -> tensor<4xf32>
      %1340 = "mhlo.add"(%1338, %1339) {name = "add.2245"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %cst_429 = "std.constant"() {name = "constant.2246", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1341 = "mhlo.broadcast_in_dim"(%cst_429) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2247"} : (tensor<f32>) -> tensor<4xf32>
      %1342 = "mhlo.subtract"(%1340, %1341) {name = "subtract.2248"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1343 = "mhlo.is_finite"(%1342) {name = "is-finite.2249"} : (tensor<4xf32>) -> tensor<4xi1>
      %cst_430 = "std.constant"() {name = "constant.2250", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1344 = "mhlo.broadcast_in_dim"(%cst_430) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2251"} : (tensor<f32>) -> tensor<4xf32>
      %1345 = "mhlo.select"(%1343, %1342, %1344) {name = "select.2252"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1346 = "mhlo.subtract"(%1342, %1345) {name = "subtract.2253"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1347 = "mhlo.exponential"(%1346) {name = "exponential.2254"} : (tensor<4xf32>) -> tensor<4xf32>
      %1348 = "mhlo.log"(%1347) {name = "log.2255"} : (tensor<4xf32>) -> tensor<4xf32>
      %1349 = "mhlo.add"(%1348, %1345) {name = "add.2256"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %cst_431 = "std.constant"() {name = "constant.2257", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1350 = "mhlo.broadcast_in_dim"(%cst_431) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2258"} : (tensor<f32>) -> tensor<4xf32>
      %1351 = "mhlo.subtract"(%1349, %1350) {name = "subtract.2259"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1352 = "mhlo.exponential"(%1351) {name = "exponential.2260"} : (tensor<4xf32>) -> tensor<4xf32>
      %1353 = "mhlo.subtract"(%1327, %1352) {name = "subtract.2261"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1354 = "mhlo.get_tuple_element"(%arg1) {index = 37 : i32, name = "get-tuple-element.654"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %1355 = "mhlo.get_tuple_element"(%arg1) {index = 32 : i32, name = "get-tuple-element.649"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %1356 = "mhlo.compare"(%1354, %1355) {comparison_direction = "LT", name = "compare.2167"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
      %1357 = "mhlo.broadcast_in_dim"(%1356) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2277"} : (tensor<i1>) -> tensor<4xi1>
      %1358 = "mhlo.get_tuple_element"(%arg1) {index = 31 : i32, name = "get-tuple-element.648"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %1359 = "mhlo.convert"(%1355) {name = "convert.2154"} : (tensor<i32>) -> tensor<f32>
      %cst_432 = "std.constant"() {name = "constant.2155", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1360 = "mhlo.add"(%1359, %cst_432) {name = "add.2156"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1361 = "mhlo.negate"(%1324) {name = "negate.2151"} : (tensor<f32>) -> tensor<f32>
      %1362 = "mhlo.power"(%1360, %1361) {name = "power.2160"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1363 = "mhlo.broadcast_in_dim"(%1362) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2269"} : (tensor<f32>) -> tensor<4xf32>
      %1364 = "mhlo.reshape"(%1353) {name = "reshape.2262"} : (tensor<4xf32>) -> tensor<4xf32>
      %1365 = "mhlo.sqrt"(%1360) {name = "sqrt.2157"} : (tensor<f32>) -> tensor<f32>
      %1366 = "mhlo.broadcast_in_dim"(%1365) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2263"} : (tensor<f32>) -> tensor<4xf32>
      %1367 = "mhlo.multiply"(%1364, %1366) {name = "multiply.2264"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1368 = "mhlo.add"(%1323, %1360) {name = "add.2158"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1369 = "mhlo.multiply"(%1368, %1322) {name = "multiply.2159"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1370 = "mhlo.broadcast_in_dim"(%1369) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2265"} : (tensor<f32>) -> tensor<4xf32>
      %1371 = "mhlo.divide"(%1367, %1370) {name = "divide.2266"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1372 = "mhlo.subtract"(%1321, %1371) {name = "subtract.2267"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1373 = "mhlo.multiply"(%1363, %1372) {name = "multiply.2270"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %cst_433 = "std.constant"() {name = "constant.2161", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
      %1374 = "mhlo.subtract"(%cst_433, %1362) {name = "subtract.2162"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1375 = "mhlo.broadcast_in_dim"(%1374) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2163"} : (tensor<f32>) -> tensor<4xf32>
      %1376 = "mhlo.multiply"(%1375, %1358) {name = "multiply.2164"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1377 = "mhlo.add"(%1373, %1376) {name = "add.2271"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1378 = "mhlo.select"(%1357, %1358, %1377) {name = "select.2278"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %cst_434 = "std.constant"() {name = "constant.2168", value = dense<1> : tensor<i32>} : () -> tensor<i32>
      %1379 = "mhlo.add"(%1355, %cst_434) {name = "add.2169"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
      %1380 = "mhlo.compare"(%1354, %1355) {comparison_direction = "GT", name = "compare.2165"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
      %1381 = "mhlo.broadcast_in_dim"(%1380) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2275"} : (tensor<i1>) -> tensor<4xi1>
      %1382 = "mhlo.exponential"(%1372) {name = "exponential.2268"} : (tensor<4xf32>) -> tensor<4xf32>
      %1383 = "mhlo.compare"(%1354, %1355) {comparison_direction = "LT", name = "compare.2166"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
      %1384 = "mhlo.broadcast_in_dim"(%1383) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2273"} : (tensor<i1>) -> tensor<4xi1>
      %1385 = "mhlo.exponential"(%1377) {name = "exponential.2272"} : (tensor<4xf32>) -> tensor<4xf32>
      %1386 = "mhlo.select"(%1384, %1224, %1385) {name = "select.2274"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1387 = "mhlo.select"(%1381, %1382, %1386) {name = "select.2276"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
      %1388 = "mhlo.get_tuple_element"(%arg1) {index = 34 : i32, name = "get-tuple-element.651"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %1389 = "mhlo.tuple"(%1256, %1257, %1259, %1261, %1306, %1305, %1309, %1311, %1313, %1316, %1319, %1224, %1231, %1302, %1301, %1304, %1297, %1278, %1287, %1222, %1289, %1224, %1231, %611, %409, %1320, %1321, %1322, %1323, %1324, %1353, %1378, %1379, %1387, %1388, %1232, %1233, %1354) {name = "tuple.2293"} : (tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>
      "mhlo.return"(%1389) : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> ()
    }) : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>
    %41 = "mhlo.get_tuple_element"(%40) {index = 0 : i32, name = "get-tuple-element.2401"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %42 = "mhlo.get_tuple_element"(%40) {index = 1 : i32, name = "get-tuple-element.2402"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %43 = "mhlo.get_tuple_element"(%40) {index = 2 : i32, name = "get-tuple-element.2403"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %44 = "mhlo.get_tuple_element"(%40) {index = 3 : i32, name = "get-tuple-element.2404"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
    %45 = "mhlo.get_tuple_element"(%40) {index = 4 : i32, name = "get-tuple-element.2405"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %46 = "mhlo.get_tuple_element"(%40) {index = 5 : i32, name = "get-tuple-element.2406"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %47 = "mhlo.get_tuple_element"(%40) {index = 6 : i32, name = "get-tuple-element.2407"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %48 = "mhlo.get_tuple_element"(%40) {index = 7 : i32, name = "get-tuple-element.2408"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %49 = "mhlo.get_tuple_element"(%40) {index = 8 : i32, name = "get-tuple-element.2409"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %50 = "mhlo.get_tuple_element"(%40) {index = 9 : i32, name = "get-tuple-element.2410"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %51 = "mhlo.get_tuple_element"(%40) {index = 10 : i32, name = "get-tuple-element.2411"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %52 = "mhlo.get_tuple_element"(%40) {index = 11 : i32, name = "get-tuple-element.2412"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %53 = "mhlo.get_tuple_element"(%40) {index = 12 : i32, name = "get-tuple-element.2413"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %54 = "mhlo.get_tuple_element"(%40) {index = 13 : i32, name = "get-tuple-element.2414"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xi1>
    %55 = "mhlo.get_tuple_element"(%40) {index = 14 : i32, name = "get-tuple-element.2415"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %56 = "mhlo.get_tuple_element"(%40) {index = 15 : i32, name = "get-tuple-element.2416"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %57 = "mhlo.get_tuple_element"(%40) {index = 16 : i32, name = "get-tuple-element.2417"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %58 = "mhlo.get_tuple_element"(%40) {index = 17 : i32, name = "get-tuple-element.2418"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %59 = "mhlo.get_tuple_element"(%40) {index = 18 : i32, name = "get-tuple-element.2419"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %60 = "mhlo.get_tuple_element"(%40) {index = 19 : i32, name = "get-tuple-element.2420"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %61 = "mhlo.get_tuple_element"(%40) {index = 20 : i32, name = "get-tuple-element.2421"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %62 = "mhlo.get_tuple_element"(%40) {index = 21 : i32, name = "get-tuple-element.2422"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %63 = "mhlo.get_tuple_element"(%40) {index = 22 : i32, name = "get-tuple-element.2423"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %64 = "mhlo.get_tuple_element"(%40) {index = 23 : i32, name = "get-tuple-element.2424"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
    %65 = "mhlo.get_tuple_element"(%40) {index = 24 : i32, name = "get-tuple-element.2425"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
    %66 = "mhlo.get_tuple_element"(%40) {index = 25 : i32, name = "get-tuple-element.2426"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %67 = "mhlo.get_tuple_element"(%40) {index = 26 : i32, name = "get-tuple-element.2427"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %68 = "mhlo.get_tuple_element"(%40) {index = 27 : i32, name = "get-tuple-element.2428"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %69 = "mhlo.get_tuple_element"(%40) {index = 28 : i32, name = "get-tuple-element.2429"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %70 = "mhlo.get_tuple_element"(%40) {index = 29 : i32, name = "get-tuple-element.2430"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %71 = "mhlo.get_tuple_element"(%40) {index = 30 : i32, name = "get-tuple-element.2431"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %72 = "mhlo.get_tuple_element"(%40) {index = 31 : i32, name = "get-tuple-element.2432"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %73 = "mhlo.get_tuple_element"(%40) {index = 32 : i32, name = "get-tuple-element.2433"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %74 = "mhlo.get_tuple_element"(%40) {index = 33 : i32, name = "get-tuple-element.2434"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %75 = "mhlo.get_tuple_element"(%40) {index = 34 : i32, name = "get-tuple-element.2435"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %76 = "mhlo.get_tuple_element"(%40) {index = 35 : i32, name = "get-tuple-element.2436"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %77 = "mhlo.get_tuple_element"(%40) {index = 36 : i32, name = "get-tuple-element.2437"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %78 = "mhlo.get_tuple_element"(%40) {index = 37 : i32, name = "get-tuple-element.2438"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %79 = "mhlo.tuple"(%41, %42, %43, %44, %45, %46, %47, %48, %49, %50, %51, %52, %53, %54, %55, %56, %57, %58, %59, %60, %61, %62, %63, %64, %65, %66, %67, %68, %69, %70, %71, %72, %73, %74, %75, %76, %77, %78) {name = "tuple.2439"} : (tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>
    %80 = "mhlo.get_tuple_element"(%79) {index = 0 : i32, name = "get-tuple-element.2440"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %81 = "mhlo.get_tuple_element"(%79) {index = 1 : i32, name = "get-tuple-element.2441"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %82 = "mhlo.get_tuple_element"(%79) {index = 2 : i32, name = "get-tuple-element.2442"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %83 = "mhlo.get_tuple_element"(%79) {index = 34 : i32, name = "get-tuple-element.2474"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %84 = "mhlo.get_tuple_element"(%79) {index = 35 : i32, name = "get-tuple-element.2475"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %85 = "mhlo.get_tuple_element"(%79) {index = 36 : i32, name = "get-tuple-element.2476"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %86 = "mhlo.get_tuple_element"(%79) {index = 37 : i32, name = "get-tuple-element.2477"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %87 = "mhlo.get_tuple_element"(%arg0) {index = 0 : i32, name = "get-tuple-element.2342"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %cst_6 = "std.constant"() {name = "constant.2383", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %88 = "mhlo.add"(%87, %cst_6) {name = "add.2384"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
    %89 = "mhlo.get_tuple_element"(%arg0) {index = 1 : i32, name = "get-tuple-element.2343"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %cst_7 = "std.constant"() {name = "constant.2385", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %90 = "mhlo.add"(%33, %cst_7) {name = "add.2386"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
    %91 = "mhlo.get_tuple_element"(%79) {index = 3 : i32, name = "get-tuple-element.2443"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
    %92 = "mhlo.get_tuple_element"(%79) {index = 4 : i32, name = "get-tuple-element.2444"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %93 = "mhlo.get_tuple_element"(%79) {index = 5 : i32, name = "get-tuple-element.2445"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %94 = "mhlo.get_tuple_element"(%79) {index = 6 : i32, name = "get-tuple-element.2446"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %95 = "mhlo.get_tuple_element"(%79) {index = 7 : i32, name = "get-tuple-element.2447"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %96 = "mhlo.get_tuple_element"(%79) {index = 8 : i32, name = "get-tuple-element.2448"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %97 = "mhlo.get_tuple_element"(%79) {index = 9 : i32, name = "get-tuple-element.2449"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %98 = "mhlo.get_tuple_element"(%79) {index = 10 : i32, name = "get-tuple-element.2450"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %99 = "mhlo.get_tuple_element"(%79) {index = 11 : i32, name = "get-tuple-element.2451"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %100 = "mhlo.get_tuple_element"(%79) {index = 12 : i32, name = "get-tuple-element.2452"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %101 = "mhlo.get_tuple_element"(%79) {index = 13 : i32, name = "get-tuple-element.2453"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xi1>
    %102 = "mhlo.get_tuple_element"(%79) {index = 14 : i32, name = "get-tuple-element.2454"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %103 = "mhlo.get_tuple_element"(%79) {index = 15 : i32, name = "get-tuple-element.2455"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %104 = "mhlo.get_tuple_element"(%79) {index = 16 : i32, name = "get-tuple-element.2456"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %105 = "mhlo.get_tuple_element"(%79) {index = 17 : i32, name = "get-tuple-element.2457"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %106 = "mhlo.get_tuple_element"(%79) {index = 18 : i32, name = "get-tuple-element.2458"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %107 = "mhlo.get_tuple_element"(%79) {index = 19 : i32, name = "get-tuple-element.2459"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %108 = "mhlo.get_tuple_element"(%79) {index = 20 : i32, name = "get-tuple-element.2460"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %109 = "mhlo.get_tuple_element"(%79) {index = 21 : i32, name = "get-tuple-element.2461"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %110 = "mhlo.get_tuple_element"(%79) {index = 22 : i32, name = "get-tuple-element.2462"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %111 = "mhlo.get_tuple_element"(%79) {index = 23 : i32, name = "get-tuple-element.2463"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
    %112 = "mhlo.get_tuple_element"(%79) {index = 24 : i32, name = "get-tuple-element.2464"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
    %113 = "mhlo.get_tuple_element"(%79) {index = 25 : i32, name = "get-tuple-element.2465"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %114 = "mhlo.get_tuple_element"(%79) {index = 26 : i32, name = "get-tuple-element.2466"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %115 = "mhlo.get_tuple_element"(%79) {index = 27 : i32, name = "get-tuple-element.2467"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %116 = "mhlo.get_tuple_element"(%79) {index = 28 : i32, name = "get-tuple-element.2468"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %117 = "mhlo.get_tuple_element"(%79) {index = 29 : i32, name = "get-tuple-element.2469"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %118 = "mhlo.get_tuple_element"(%79) {index = 30 : i32, name = "get-tuple-element.2470"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %119 = "mhlo.get_tuple_element"(%79) {index = 31 : i32, name = "get-tuple-element.2471"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %120 = "mhlo.get_tuple_element"(%79) {index = 32 : i32, name = "get-tuple-element.2472"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %121 = "mhlo.get_tuple_element"(%79) {index = 33 : i32, name = "get-tuple-element.2473"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %122 = "mhlo.get_tuple_element"(%arg0) {index = 34 : i32, name = "get-tuple-element.2376"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %cst_8 = "std.constant"() {name = "constant.2387", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %123 = "mhlo.add"(%122, %cst_8) {name = "add.2388"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
    %124 = "mhlo.get_tuple_element"(%arg0) {index = 35 : i32, name = "get-tuple-element.2377"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tuple<tensor<1000x4xf32>, tensor<i32>>
    %125 = "mhlo.get_tuple_element"(%124) {index = 0 : i32, name = "get-tuple-element.2480"} : (tuple<tensor<1000x4xf32>, tensor<i32>>) -> tensor<1000x4xf32>
    %126 = "mhlo.reshape"(%92) {name = "reshape.2478"} : (tensor<4xf32>) -> tensor<1x4xf32>
    %cst_9 = "std.constant"() {name = "constant.2479", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %127 = "mhlo.dynamic-update-slice"(%125, %126, %122, %cst_9) : (tensor<1000x4xf32>, tensor<1x4xf32>, tensor<i32>, tensor<i32>) -> tensor<1000x4xf32>
    %128 = "mhlo.get_tuple_element"(%124) {index = 1 : i32, name = "get-tuple-element.2482"} : (tuple<tensor<1000x4xf32>, tensor<i32>>) -> tensor<i32>
    %129 = "mhlo.tuple"(%127, %128) {name = "tuple.2483"} : (tensor<1000x4xf32>, tensor<i32>) -> tuple<tensor<1000x4xf32>, tensor<i32>>
    %130 = "mhlo.get_tuple_element"(%arg0) {index = 36 : i32, name = "get-tuple-element.2378"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tuple<tensor<1000x4xi1>, tensor<i32>>
    %131 = "mhlo.get_tuple_element"(%130) {index = 0 : i32, name = "get-tuple-element.2486"} : (tuple<tensor<1000x4xi1>, tensor<i32>>) -> tensor<1000x4xi1>
    %132 = "mhlo.reshape"(%101) {name = "reshape.2484"} : (tensor<4xi1>) -> tensor<1x4xi1>
    %cst_10 = "std.constant"() {name = "constant.2485", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %133 = "mhlo.dynamic-update-slice"(%131, %132, %122, %cst_10) : (tensor<1000x4xi1>, tensor<1x4xi1>, tensor<i32>, tensor<i32>) -> tensor<1000x4xi1>
    %134 = "mhlo.get_tuple_element"(%130) {index = 1 : i32, name = "get-tuple-element.2488"} : (tuple<tensor<1000x4xi1>, tensor<i32>>) -> tensor<i32>
    %135 = "mhlo.tuple"(%133, %134) {name = "tuple.2489"} : (tensor<1000x4xi1>, tensor<i32>) -> tuple<tensor<1000x4xi1>, tensor<i32>>
    %136 = "mhlo.tuple"(%88, %89, %90, %91, %92, %93, %94, %95, %96, %97, %98, %99, %100, %101, %102, %103, %104, %105, %106, %107, %108, %109, %110, %111, %112, %113, %114, %115, %116, %117, %118, %119, %120, %121, %123, %129, %135, %31, %36, %37, %38) {name = "tuple.2490"} : (tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>
    "std.return"(%136) : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> ()
  }) {sym_name = "mcmc_sample_chain_trace_scan_while_body_326__.2340", sym_visibility = "private", type = (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>} : () -> ()
  "func"() ( {
  ^bb0(%arg0: tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>):  // no predecessors
    %0 = "mhlo.get_tuple_element"(%arg0) {index = 0 : i32, name = "get-tuple-element.2493"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %1 = "mhlo.get_tuple_element"(%arg0) {index = 1 : i32, name = "get-tuple-element.2494"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %2 = "mhlo.get_tuple_element"(%arg0) {index = 3 : i32, name = "get-tuple-element.2496"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
    %3 = "mhlo.get_tuple_element"(%arg0) {index = 4 : i32, name = "get-tuple-element.2497"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %4 = "mhlo.get_tuple_element"(%arg0) {index = 5 : i32, name = "get-tuple-element.2498"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %5 = "mhlo.get_tuple_element"(%arg0) {index = 6 : i32, name = "get-tuple-element.2499"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %6 = "mhlo.get_tuple_element"(%arg0) {index = 7 : i32, name = "get-tuple-element.2500"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %7 = "mhlo.get_tuple_element"(%arg0) {index = 8 : i32, name = "get-tuple-element.2501"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %8 = "mhlo.get_tuple_element"(%arg0) {index = 9 : i32, name = "get-tuple-element.2502"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %9 = "mhlo.get_tuple_element"(%arg0) {index = 10 : i32, name = "get-tuple-element.2503"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %10 = "mhlo.get_tuple_element"(%arg0) {index = 11 : i32, name = "get-tuple-element.2504"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %11 = "mhlo.get_tuple_element"(%arg0) {index = 12 : i32, name = "get-tuple-element.2505"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %12 = "mhlo.get_tuple_element"(%arg0) {index = 13 : i32, name = "get-tuple-element.2506"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xi1>
    %13 = "mhlo.get_tuple_element"(%arg0) {index = 14 : i32, name = "get-tuple-element.2507"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %14 = "mhlo.get_tuple_element"(%arg0) {index = 15 : i32, name = "get-tuple-element.2508"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %15 = "mhlo.get_tuple_element"(%arg0) {index = 16 : i32, name = "get-tuple-element.2509"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %16 = "mhlo.get_tuple_element"(%arg0) {index = 17 : i32, name = "get-tuple-element.2510"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %17 = "mhlo.get_tuple_element"(%arg0) {index = 18 : i32, name = "get-tuple-element.2511"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %18 = "mhlo.get_tuple_element"(%arg0) {index = 19 : i32, name = "get-tuple-element.2512"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %19 = "mhlo.get_tuple_element"(%arg0) {index = 20 : i32, name = "get-tuple-element.2513"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %20 = "mhlo.get_tuple_element"(%arg0) {index = 21 : i32, name = "get-tuple-element.2514"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %21 = "mhlo.get_tuple_element"(%arg0) {index = 22 : i32, name = "get-tuple-element.2515"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %22 = "mhlo.get_tuple_element"(%arg0) {index = 23 : i32, name = "get-tuple-element.2516"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
    %23 = "mhlo.get_tuple_element"(%arg0) {index = 24 : i32, name = "get-tuple-element.2517"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
    %24 = "mhlo.get_tuple_element"(%arg0) {index = 25 : i32, name = "get-tuple-element.2518"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %25 = "mhlo.get_tuple_element"(%arg0) {index = 26 : i32, name = "get-tuple-element.2519"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %26 = "mhlo.get_tuple_element"(%arg0) {index = 27 : i32, name = "get-tuple-element.2520"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %27 = "mhlo.get_tuple_element"(%arg0) {index = 28 : i32, name = "get-tuple-element.2521"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %28 = "mhlo.get_tuple_element"(%arg0) {index = 29 : i32, name = "get-tuple-element.2522"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %29 = "mhlo.get_tuple_element"(%arg0) {index = 30 : i32, name = "get-tuple-element.2523"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %30 = "mhlo.get_tuple_element"(%arg0) {index = 31 : i32, name = "get-tuple-element.2524"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %31 = "mhlo.get_tuple_element"(%arg0) {index = 32 : i32, name = "get-tuple-element.2525"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %32 = "mhlo.get_tuple_element"(%arg0) {index = 33 : i32, name = "get-tuple-element.2526"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %33 = "mhlo.get_tuple_element"(%arg0) {index = 34 : i32, name = "get-tuple-element.2527"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %34 = "mhlo.get_tuple_element"(%arg0) {index = 35 : i32, name = "get-tuple-element.2528"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tuple<tensor<1000x4xf32>, tensor<i32>>
    %35 = "mhlo.get_tuple_element"(%arg0) {index = 36 : i32, name = "get-tuple-element.2529"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tuple<tensor<1000x4xi1>, tensor<i32>>
    %36 = "mhlo.get_tuple_element"(%arg0) {index = 37 : i32, name = "get-tuple-element.2530"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tuple<tensor<1000xi32>, tensor<i32>>
    %37 = "mhlo.get_tuple_element"(%arg0) {index = 38 : i32, name = "get-tuple-element.2531"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %38 = "mhlo.get_tuple_element"(%arg0) {index = 39 : i32, name = "get-tuple-element.2532"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %39 = "mhlo.get_tuple_element"(%arg0) {index = 40 : i32, name = "get-tuple-element.2533"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %40 = "mhlo.get_tuple_element"(%arg0) {index = 2 : i32, name = "get-tuple-element.2495"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %cst = "std.constant"() {name = "constant.2534", value = dense<1000> : tensor<i32>} : () -> tensor<i32>
    %41 = "mhlo.compare"(%40, %cst) {comparison_direction = "LT", name = "compare.2535"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
    %42 = "mhlo.tuple"(%41) {name = "tuple.2536"} : (tensor<i1>) -> tuple<tensor<i1>>
    "std.return"(%42) : (tuple<tensor<i1>>) -> ()
  }) {sym_name = "mcmc_sample_chain_trace_scan_while_cond_325__.2491", sym_visibility = "private", type = (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tuple<tensor<i1>>} : () -> ()
  "func"() ( {
  ^bb0(%arg0: tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>):  // no predecessors
    %0 = "std.call"(%arg0) {callee = @mcmc_sample_chain_trace_scan_while_cond_325__.2491} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tuple<tensor<i1>>
    %1 = "mhlo.get_tuple_element"(%0) {index = 0 : i32, name = "get-tuple-element.2540"} : (tuple<tensor<i1>>) -> tensor<i1>
    "std.return"(%1) : (tensor<i1>) -> ()
  }) {sym_name = "cond_wrapper.2537", sym_visibility = "private", type = (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i1>} : () -> ()
  "func"() ( {
  ^bb0(%arg0: tensor<4xf32>, %arg1: tensor<f32>, %arg2: tensor<f32>, %arg3: tensor<4xf32>, %arg4: tensor<f32>, %arg5: tensor<f32>, %arg6: tensor<f32>, %arg7: tensor<f32>, %arg8: tensor<i32>):  // no predecessors
    %cst = "std.constant"() {name = "constant.29", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %0 = "mhlo.broadcast_in_dim"(%cst) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.30"} : (tensor<f32>) -> tensor<4xf32>
    %cst_0 = "std.constant"() {name = "constant.31", value = dense<4> : tensor<i32>} : () -> tensor<i32>
    %1 = "mhlo.convert"(%cst_0) {name = "convert.32"} : (tensor<i32>) -> tensor<i32>
    %2 = "mhlo.broadcast_in_dim"(%1) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.33"} : (tensor<i32>) -> tensor<1xi32>
    %3 = "mhlo.concatenate"(%2) {dimension = 0 : i64} : (tensor<1xi32>) -> tensor<1xi32>
    %cst_1 = "std.constant"() {name = "constant.40", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %4 = "mhlo.broadcast_in_dim"(%cst_1) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.41"} : (tensor<f32>) -> tensor<4xf32>
    %cst_2 = "std.constant"() {name = "constant.37", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %5 = "mhlo.broadcast_in_dim"(%cst_2) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.38"} : (tensor<f32>) -> tensor<4xf32>
    %6 = "mhlo.reshape"(%5) {name = "reshape.39"} : (tensor<4xf32>) -> tensor<4xf32>
    %7 = "mhlo.add"(%4, %6) {name = "add.42"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_3 = "std.constant"() {name = "constant.43", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %8 = "mhlo.broadcast_in_dim"(%cst_3) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.44"} : (tensor<f32>) -> tensor<4xf32>
    %9 = "mhlo.subtract"(%7, %8) {name = "subtract.45"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %10 = "mhlo.is_finite"(%9) {name = "is-finite.46"} : (tensor<4xf32>) -> tensor<4xi1>
    %cst_4 = "std.constant"() {name = "constant.47", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %11 = "mhlo.broadcast_in_dim"(%cst_4) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.48"} : (tensor<f32>) -> tensor<4xf32>
    %12 = "mhlo.select"(%10, %9, %11) {name = "select.49"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %13 = "mhlo.subtract"(%9, %12) {name = "subtract.50"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %14 = "mhlo.exponential"(%13) {name = "exponential.51"} : (tensor<4xf32>) -> tensor<4xf32>
    %15 = "mhlo.log"(%14) {name = "log.52"} : (tensor<4xf32>) -> tensor<4xf32>
    %16 = "mhlo.add"(%15, %12) {name = "add.53"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_5 = "std.constant"() {name = "constant.54", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %17 = "mhlo.broadcast_in_dim"(%cst_5) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.55"} : (tensor<f32>) -> tensor<4xf32>
    %18 = "mhlo.subtract"(%16, %17) {name = "subtract.56"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_6 = "std.constant"() {name = "constant.80", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %19 = "mhlo.broadcast_in_dim"(%cst_6) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.81"} : (tensor<f32>) -> tensor<4xf32>
    %20 = "mhlo.convert"(%19) {name = "convert.82"} : (tensor<4xf32>) -> tensor<4xf32>
    %cst_7 = "std.constant"() {name = "constant.83", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %21 = "mhlo.convert"(%cst_7) {name = "convert.84"} : (tensor<f32>) -> tensor<f32>
    %22 = "mhlo.reduce"(%20, %21) ( {
    ^bb0(%arg9: tensor<f32>, %arg10: tensor<f32>):  // no predecessors
      %300 = "mhlo.add"(%arg9, %arg10) {name = "add.88"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
      "mhlo.return"(%300) : (tensor<f32>) -> ()
    }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
    %23 = "mhlo.convert"(%22) {name = "convert.90"} : (tensor<f32>) -> tensor<f32>
    %24 = "mhlo.reshape"(%23) {name = "reshape.91"} : (tensor<f32>) -> tensor<f32>
    %cst_8 = "std.constant"() {name = "constant.92", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %25 = "mhlo.broadcast_in_dim"(%cst_8) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.93"} : (tensor<f32>) -> tensor<4xf32>
    %26 = "mhlo.reshape"(%arg0) {name = "reshape.10"} : (tensor<4xf32>) -> tensor<4xf32>
    %27 = "mhlo.log"(%26) {name = "log.19"} : (tensor<4xf32>) -> tensor<4xf32>
    %28 = "mhlo.negate"(%27) {name = "negate.28"} : (tensor<4xf32>) -> tensor<4xf32>
    %29 = "mhlo.multiply"(%25, %28) {name = "multiply.94"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %30 = "mhlo.convert"(%29) {name = "convert.95"} : (tensor<4xf32>) -> tensor<4xf32>
    %cst_9 = "std.constant"() {name = "constant.96", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %31 = "mhlo.convert"(%cst_9) {name = "convert.97"} : (tensor<f32>) -> tensor<f32>
    %32 = "mhlo.reduce"(%30, %31) ( {
    ^bb0(%arg9: tensor<f32>, %arg10: tensor<f32>):  // no predecessors
      %300 = "mhlo.add"(%arg9, %arg10) {name = "add.101"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
      "mhlo.return"(%300) : (tensor<f32>) -> ()
    }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
    %33 = "mhlo.convert"(%32) {name = "convert.103"} : (tensor<f32>) -> tensor<f32>
    %34 = "mhlo.reshape"(%33) {name = "reshape.104"} : (tensor<f32>) -> tensor<f32>
    %cst_10 = "std.constant"() {name = "constant.77", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %35 = "mhlo.broadcast_in_dim"(%cst_10) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.78"} : (tensor<f32>) -> tensor<4xf32>
    %36 = "mhlo.negate"(%35) {name = "negate.79"} : (tensor<4xf32>) -> tensor<4xf32>
    %37 = "mhlo.convert"(%36) {name = "convert.105"} : (tensor<4xf32>) -> tensor<4xf32>
    %cst_11 = "std.constant"() {name = "constant.106", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %38 = "mhlo.convert"(%cst_11) {name = "convert.107"} : (tensor<f32>) -> tensor<f32>
    %39 = "mhlo.reduce"(%37, %38) ( {
    ^bb0(%arg9: tensor<f32>, %arg10: tensor<f32>):  // no predecessors
      %300 = "mhlo.add"(%arg9, %arg10) {name = "add.111"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
      "mhlo.return"(%300) : (tensor<f32>) -> ()
    }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
    %40 = "mhlo.convert"(%39) {name = "convert.113"} : (tensor<f32>) -> tensor<f32>
    %41 = "mhlo.reshape"(%40) {name = "reshape.114"} : (tensor<f32>) -> tensor<f32>
    %cst_12 = "std.constant"() {name = "constant.119", value = dense<4> : tensor<1xi32>} : () -> tensor<1xi32>
    %cst_13 = "std.constant"() {name = "constant.120", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %42 = "mhlo.broadcast_in_dim"(%cst_13) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.122"} : (tensor<i32>) -> tensor<1xi32>
    %43 = "mhlo.compare"(%cst_12, %42) {comparison_direction = "LT", name = "compare.123"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi1>
    %cst_14 = "std.constant"() {name = "constant.115", value = dense<4> : tensor<1xi32>} : () -> tensor<1xi32>
    %cst_15 = "std.constant"() {name = "constant.116", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %44 = "mhlo.broadcast_in_dim"(%cst_15) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.117"} : (tensor<i32>) -> tensor<1xi32>
    %45 = "mhlo.maximum"(%cst_14, %44) {name = "maximum.118"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
    %46 = "mhlo.broadcast_in_dim"(%cst_13) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.124"} : (tensor<i32>) -> tensor<1xi32>
    %47 = "mhlo.compare"(%45, %46) {comparison_direction = "LT", name = "compare.125"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi1>
    %48 = "mhlo.compare"(%43, %47) {comparison_direction = "NE", name = "compare.126"} : (tensor<1xi1>, tensor<1xi1>) -> tensor<1xi1>
    %49 = "mhlo.abs"(%cst_12) {name = "abs.127"} : (tensor<1xi32>) -> tensor<1xi32>
    %50 = "mhlo.abs"(%45) {name = "abs.128"} : (tensor<1xi32>) -> tensor<1xi32>
    %51 = "mhlo.add"(%49, %50) {name = "add.129"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
    %cst_16 = "std.constant"() {name = "constant.121", value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %52 = "mhlo.broadcast_in_dim"(%cst_16) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.130"} : (tensor<i32>) -> tensor<1xi32>
    %53 = "mhlo.subtract"(%51, %52) {name = "subtract.131"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
    %54 = "mhlo.negate"(%53) {name = "negate.132"} : (tensor<1xi32>) -> tensor<1xi32>
    %55 = "mhlo.divide"(%54, %50) {name = "divide.133"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
    %56 = "mhlo.divide"(%cst_12, %45) {name = "divide.134"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
    %57 = "mhlo.select"(%48, %55, %56) {name = "select.135"} : (tensor<1xi1>, tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
    %cst_17 = "std.constant"() {name = "constant.136", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %58 = "mhlo.broadcast_in_dim"(%cst_17) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.137"} : (tensor<f32>) -> tensor<4xf32>
    %59 = "mhlo.exponential"(%27) {name = "exponential.24"} : (tensor<4xf32>) -> tensor<4xf32>
    %60 = "mhlo.log"(%59) {name = "log.27"} : (tensor<4xf32>) -> tensor<4xf32>
    %61 = "mhlo.multiply"(%58, %60) {name = "multiply.138"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %62 = "mhlo.convert"(%61) {name = "convert.139"} : (tensor<4xf32>) -> tensor<4xf32>
    %cst_18 = "std.constant"() {name = "constant.140", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %63 = "mhlo.convert"(%cst_18) {name = "convert.141"} : (tensor<f32>) -> tensor<f32>
    %64 = "mhlo.reduce"(%62, %63) ( {
    ^bb0(%arg9: tensor<f32>, %arg10: tensor<f32>):  // no predecessors
      %300 = "mhlo.add"(%arg9, %arg10) {name = "add.145"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
      "mhlo.return"(%300) : (tensor<f32>) -> ()
    }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
    %65 = "mhlo.convert"(%64) {name = "convert.147"} : (tensor<f32>) -> tensor<f32>
    %66 = "mhlo.reshape"(%65) {name = "reshape.148"} : (tensor<f32>) -> tensor<f32>
    %cst_19 = "std.constant"() {name = "constant.149", value = dense<-5.000000e-01> : tensor<f32>} : () -> tensor<f32>
    %67 = "mhlo.broadcast_in_dim"(%cst_19) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.152"} : (tensor<f32>) -> tensor<4xf32>
    %cst_20 = "std.constant"() {name = "constant.150", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %68 = "mhlo.broadcast_in_dim"(%cst_20) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.151"} : (tensor<f32>) -> tensor<4xf32>
    %69 = "mhlo.multiply"(%67, %68) {name = "multiply.153"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_21 = "std.constant"() {name = "constant.154", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %70 = "mhlo.broadcast_in_dim"(%cst_21) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.157"} : (tensor<f32>) -> tensor<4xf32>
    %cst_22 = "std.constant"() {name = "constant.155", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %71 = "mhlo.broadcast_in_dim"(%cst_22) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.156"} : (tensor<f32>) -> tensor<4xf32>
    %72 = "mhlo.multiply"(%70, %71) {name = "multiply.158"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_23 = "std.constant"() {name = "constant.168", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %73 = "mhlo.broadcast_in_dim"(%cst_23) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.169"} : (tensor<f32>) -> tensor<4xf32>
    %cst_24 = "std.constant"() {name = "constant.165", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %74 = "mhlo.broadcast_in_dim"(%cst_24) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.166"} : (tensor<f32>) -> tensor<4xf32>
    %75 = "mhlo.multiply"(%74, %60) {name = "multiply.167"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %76 = "mhlo.multiply"(%73, %75) {name = "multiply.170"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %77 = "mhlo.convert"(%76) {name = "convert.171"} : (tensor<4xf32>) -> tensor<4xf32>
    %cst_25 = "std.constant"() {name = "constant.172", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %78 = "mhlo.convert"(%cst_25) {name = "convert.173"} : (tensor<f32>) -> tensor<f32>
    %79 = "mhlo.reduce"(%77, %78) ( {
    ^bb0(%arg9: tensor<f32>, %arg10: tensor<f32>):  // no predecessors
      %300 = "mhlo.add"(%arg9, %arg10) {name = "add.177"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
      "mhlo.return"(%300) : (tensor<f32>) -> ()
    }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
    %80 = "mhlo.convert"(%79) {name = "convert.179"} : (tensor<f32>) -> tensor<f32>
    %81 = "mhlo.reshape"(%80) {name = "reshape.180"} : (tensor<f32>) -> tensor<f32>
    %cst_26 = "std.constant"() {name = "constant.199", value = dense<> : tensor<0xi32>} : () -> tensor<0xi32>
    %cst_27 = "std.constant"() {name = "constant.200", value = dense<1000> : tensor<i32>} : () -> tensor<i32>
    %cst_28 = "std.constant"() {name = "constant.201", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %82 = "mhlo.broadcast_in_dim"(%cst_28) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.202"} : (tensor<i32>) -> tensor<1000xi32>
    %cst_29 = "std.constant"() {name = "constant.203", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %83 = "mhlo.tuple"(%82, %cst_29) {name = "tuple.204"} : (tensor<1000xi32>, tensor<i32>) -> tuple<tensor<1000xi32>, tensor<i32>>
    %84 = "mhlo.get_tuple_element"(%83) {index = 0 : i32, name = "get-tuple-element.206"} : (tuple<tensor<1000xi32>, tensor<i32>>) -> tensor<1000xi32>
    %cst_30 = "std.constant"() {name = "constant.205", value = dense<1000> : tensor<i32>} : () -> tensor<i32>
    %85 = "mhlo.tuple"(%84, %cst_30) {name = "tuple.207"} : (tensor<1000xi32>, tensor<i32>) -> tuple<tensor<1000xi32>, tensor<i32>>
    %cst_31 = "std.constant"() {name = "constant.208", value = dense<4> : tensor<1xi32>} : () -> tensor<1xi32>
    %cst_32 = "std.constant"() {name = "constant.209", value = dense<1000> : tensor<i32>} : () -> tensor<i32>
    %cst_33 = "std.constant"() {name = "constant.210", value = dense<4> : tensor<i32>} : () -> tensor<i32>
    %cst_34 = "std.constant"() {name = "constant.218", value = dense<4> : tensor<1xi32>} : () -> tensor<1xi32>
    %cst_35 = "std.constant"() {name = "constant.219", value = dense<1000> : tensor<i32>} : () -> tensor<i32>
    %cst_36 = "std.constant"() {name = "constant.220", value = dense<4> : tensor<i32>} : () -> tensor<i32>
    %cst_37 = "std.constant"() {name = "constant.256", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %86 = "mhlo.broadcast_in_dim"(%cst_37) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.257"} : (tensor<f32>) -> tensor<4xf32>
    %87 = "mhlo.log"(%59) {name = "log.25"} : (tensor<4xf32>) -> tensor<4xf32>
    %88 = "mhlo.reshape"(%arg1) {name = "reshape.11"} : (tensor<f32>) -> tensor<f32>
    %89 = "mhlo.broadcast_in_dim"(%88) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.240"} : (tensor<f32>) -> tensor<4xf32>
    %90 = "mhlo.divide"(%87, %89) {name = "divide.241"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %91 = "mhlo.reshape"(%arg2) {name = "reshape.12"} : (tensor<f32>) -> tensor<f32>
    %92 = "mhlo.divide"(%91, %88) {name = "divide.253"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    %93 = "mhlo.broadcast_in_dim"(%92) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.254"} : (tensor<f32>) -> tensor<4xf32>
    %94 = "mhlo.subtract"(%90, %93) {name = "subtract.255"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %95 = "mhlo.multiply"(%86, %94) {name = "multiply.258"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %96 = "mhlo.convert"(%95) {name = "convert.259"} : (tensor<4xf32>) -> tensor<4xf32>
    %cst_38 = "std.constant"() {name = "constant.260", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %97 = "mhlo.convert"(%cst_38) {name = "convert.261"} : (tensor<f32>) -> tensor<f32>
    %98 = "mhlo.reduce"(%96, %97) ( {
    ^bb0(%arg9: tensor<f32>, %arg10: tensor<f32>):  // no predecessors
      %300 = "mhlo.add"(%arg9, %arg10) {name = "add.265"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
      "mhlo.return"(%300) : (tensor<f32>) -> ()
    }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
    %99 = "mhlo.convert"(%98) {name = "convert.267"} : (tensor<f32>) -> tensor<f32>
    %100 = "mhlo.reshape"(%99) {name = "reshape.268"} : (tensor<f32>) -> tensor<f32>
    %101 = "mhlo.negate"(%100) {name = "negate.269"} : (tensor<f32>) -> tensor<f32>
    %102 = "mhlo.negate"(%87) {name = "negate.26"} : (tensor<4xf32>) -> tensor<4xf32>
    %103 = "mhlo.broadcast_in_dim"(%88) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.233"} : (tensor<f32>) -> tensor<4xf32>
    %104 = "mhlo.divide"(%102, %103) {name = "divide.234"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %105 = "mhlo.broadcast_in_dim"(%88) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.235"} : (tensor<f32>) -> tensor<4xf32>
    %106 = "mhlo.divide"(%104, %105) {name = "divide.236"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %107 = "mhlo.multiply"(%95, %106) {name = "multiply.282"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %108 = "mhlo.convert"(%107) {name = "convert.283"} : (tensor<4xf32>) -> tensor<4xf32>
    %cst_39 = "std.constant"() {name = "constant.284", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %109 = "mhlo.convert"(%cst_39) {name = "convert.285"} : (tensor<f32>) -> tensor<f32>
    %110 = "mhlo.reduce"(%108, %109) ( {
    ^bb0(%arg9: tensor<f32>, %arg10: tensor<f32>):  // no predecessors
      %300 = "mhlo.add"(%arg9, %arg10) {name = "add.289"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
      "mhlo.return"(%300) : (tensor<f32>) -> ()
    }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
    %111 = "mhlo.convert"(%110) {name = "convert.291"} : (tensor<f32>) -> tensor<f32>
    %112 = "mhlo.reshape"(%111) {name = "reshape.292"} : (tensor<f32>) -> tensor<f32>
    %cst_40 = "std.constant"() {name = "constant.296", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %113 = "mhlo.broadcast_in_dim"(%cst_40) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.297"} : (tensor<f32>) -> tensor<4xf32>
    %114 = "mhlo.broadcast_in_dim"(%92) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.293"} : (tensor<f32>) -> tensor<4xf32>
    %115 = "mhlo.subtract"(%90, %114) {name = "subtract.294"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %116 = "mhlo.multiply"(%115, %115) {name = "multiply.295"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %117 = "mhlo.multiply"(%113, %116) {name = "multiply.298"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %118 = "mhlo.convert"(%117) {name = "convert.299"} : (tensor<4xf32>) -> tensor<4xf32>
    %cst_41 = "std.constant"() {name = "constant.300", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %119 = "mhlo.convert"(%cst_41) {name = "convert.301"} : (tensor<f32>) -> tensor<f32>
    %120 = "mhlo.reduce"(%118, %119) ( {
    ^bb0(%arg9: tensor<f32>, %arg10: tensor<f32>):  // no predecessors
      %300 = "mhlo.add"(%arg9, %arg10) {name = "add.305"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
      "mhlo.return"(%300) : (tensor<f32>) -> ()
    }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
    %121 = "mhlo.convert"(%120) {name = "convert.307"} : (tensor<f32>) -> tensor<f32>
    %122 = "mhlo.reshape"(%121) {name = "reshape.308"} : (tensor<f32>) -> tensor<f32>
    %cst_42 = "std.constant"() {name = "constant.309", value = dense<-5.000000e-01> : tensor<f32>} : () -> tensor<f32>
    %123 = "mhlo.broadcast_in_dim"(%cst_42) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.310"} : (tensor<f32>) -> tensor<4xf32>
    %124 = "mhlo.multiply"(%123, %116) {name = "multiply.311"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_43 = "std.constant"() {name = "constant.238", value = dense<0.918938517> : tensor<f32>} : () -> tensor<f32>
    %125 = "mhlo.log"(%88) {name = "log.237"} : (tensor<f32>) -> tensor<f32>
    %126 = "mhlo.add"(%cst_43, %125) {name = "add.239"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    %127 = "mhlo.broadcast_in_dim"(%126) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.312"} : (tensor<f32>) -> tensor<4xf32>
    %128 = "mhlo.subtract"(%124, %127) {name = "subtract.313"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_44 = "std.constant"() {name = "constant.181", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %129 = "mhlo.broadcast_in_dim"(%cst_44) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.182"} : (tensor<f32>) -> tensor<4xf32>
    %130 = "mhlo.multiply"(%129, %75) {name = "multiply.183"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %131 = "mhlo.add"(%128, %130) {name = "add.314"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_45 = "std.constant"() {name = "constant.74", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %132 = "mhlo.broadcast_in_dim"(%cst_45) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.75"} : (tensor<f32>) -> tensor<4xf32>
    %cst_46 = "std.constant"() {name = "constant.70", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %133 = "mhlo.broadcast_in_dim"(%cst_46) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.71"} : (tensor<f32>) -> tensor<4xf32>
    %134 = "mhlo.multiply"(%133, %28) {name = "multiply.72"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %135 = "mhlo.negate"(%134) {name = "negate.73"} : (tensor<4xf32>) -> tensor<4xf32>
    %136 = "mhlo.add"(%132, %135) {name = "add.76"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %137 = "mhlo.add"(%131, %136) {name = "add.315"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_47 = "std.constant"() {name = "constant.323", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %cst_48 = "std.constant"() {name = "constant.324", value = dense<-1> : tensor<i32>} : () -> tensor<i32>
    %cst_49 = "std.constant"() {name = "constant.325", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %cst_50 = "std.constant"() {name = "constant.326", value = dense<10> : tensor<i32>} : () -> tensor<i32>
    %cst_51 = "std.constant"() {name = "constant.327", value = dense<true> : tensor<i1>} : () -> tensor<i1>
    %138 = "mhlo.broadcast_in_dim"(%cst_51) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.328"} : (tensor<i1>) -> tensor<4xi1>
    %cst_52 = "std.constant"() {name = "constant.329", value = dense<10> : tensor<i32>} : () -> tensor<i32>
    %cst_53 = "std.constant"() {name = "constant.330", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %139 = "mhlo.broadcast_in_dim"(%cst_53) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.331"} : (tensor<i32>) -> tensor<2xi32>
    %cst_54 = "std.constant"() {name = "constant.332", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %140 = "mhlo.broadcast_in_dim"(%cst_54) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.333"} : (tensor<i32>) -> tensor<2xi32>
    %cst_55 = "std.constant"() {name = "constant.334", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %cst_56 = "std.constant"() {name = "constant.335", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %cst_57 = "std.constant"() {name = "constant.336", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %cst_58 = "std.constant"() {name = "constant.337", value = dense<-1> : tensor<i32>} : () -> tensor<i32>
    %cst_59 = "std.constant"() {name = "constant.338", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %cst_60 = "std.constant"() {name = "constant.320", value = dense<-2147483648> : tensor<i32>} : () -> tensor<i32>
    %cst_61 = "std.constant"() {name = "constant.321", value = dense<2147483647> : tensor<i32>} : () -> tensor<i32>
    %cst_62 = "std.constant"() {value = dense<2> : tensor<1xi64>} : () -> tensor<1xi64>
    %141 = "mhlo.rng_uniform"(%cst_60, %cst_61, %cst_62) : (tensor<i32>, tensor<i32>, tensor<1xi64>) -> tensor<2xi32>
    %cst_63 = "std.constant"() {name = "constant.184", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %142 = "mhlo.broadcast_in_dim"(%cst_63) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.185"} : (tensor<f32>) -> tensor<4xf32>
    %cst_64 = "std.constant"() {name = "constant.246", value = dense<-5.000000e-01> : tensor<f32>} : () -> tensor<f32>
    %143 = "mhlo.broadcast_in_dim"(%cst_64) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.247"} : (tensor<f32>) -> tensor<4xf32>
    %144 = "mhlo.exponential"(%27) {name = "exponential.20"} : (tensor<4xf32>) -> tensor<4xf32>
    %145 = "mhlo.log"(%144) {name = "log.21"} : (tensor<4xf32>) -> tensor<4xf32>
    %146 = "mhlo.broadcast_in_dim"(%88) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.231"} : (tensor<f32>) -> tensor<4xf32>
    %147 = "mhlo.divide"(%145, %146) {name = "divide.232"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %148 = "mhlo.divide"(%91, %88) {name = "divide.242"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    %149 = "mhlo.broadcast_in_dim"(%148) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.243"} : (tensor<f32>) -> tensor<4xf32>
    %150 = "mhlo.subtract"(%147, %149) {name = "subtract.244"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %151 = "mhlo.multiply"(%150, %150) {name = "multiply.245"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %152 = "mhlo.multiply"(%143, %151) {name = "multiply.248"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_65 = "std.constant"() {name = "constant.229", value = dense<0.918938517> : tensor<f32>} : () -> tensor<f32>
    %153 = "mhlo.log"(%88) {name = "log.228"} : (tensor<f32>) -> tensor<f32>
    %154 = "mhlo.add"(%cst_65, %153) {name = "add.230"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
    %155 = "mhlo.broadcast_in_dim"(%154) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.249"} : (tensor<f32>) -> tensor<4xf32>
    %156 = "mhlo.subtract"(%152, %155) {name = "subtract.250"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_66 = "std.constant"() {name = "constant.67", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %157 = "mhlo.broadcast_in_dim"(%cst_66) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.68"} : (tensor<f32>) -> tensor<4xf32>
    %cst_67 = "std.constant"() {name = "constant.64", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %158 = "mhlo.broadcast_in_dim"(%cst_67) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.65"} : (tensor<f32>) -> tensor<4xf32>
    %159 = "mhlo.log"(%144) {name = "log.22"} : (tensor<4xf32>) -> tensor<4xf32>
    %160 = "mhlo.multiply"(%158, %159) {name = "multiply.66"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %161 = "mhlo.multiply"(%157, %160) {name = "multiply.69"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %162 = "mhlo.add"(%156, %161) {name = "add.251"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_68 = "std.constant"() {name = "constant.61", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %163 = "mhlo.broadcast_in_dim"(%cst_68) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.62"} : (tensor<f32>) -> tensor<4xf32>
    %cst_69 = "std.constant"() {name = "constant.57", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %164 = "mhlo.broadcast_in_dim"(%cst_69) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.58"} : (tensor<f32>) -> tensor<4xf32>
    %165 = "mhlo.negate"(%27) {name = "negate.23"} : (tensor<4xf32>) -> tensor<4xf32>
    %166 = "mhlo.multiply"(%164, %165) {name = "multiply.59"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %167 = "mhlo.negate"(%166) {name = "negate.60"} : (tensor<4xf32>) -> tensor<4xf32>
    %168 = "mhlo.add"(%163, %167) {name = "add.63"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %169 = "mhlo.add"(%162, %168) {name = "add.252"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_70 = "std.constant"() {name = "constant.279", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %170 = "mhlo.broadcast_in_dim"(%cst_70) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.280"} : (tensor<f32>) -> tensor<4xf32>
    %cst_71 = "std.constant"() {name = "constant.162", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %171 = "mhlo.broadcast_in_dim"(%cst_71) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.163"} : (tensor<f32>) -> tensor<4xf32>
    %cst_72 = "std.constant"() {name = "constant.159", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %172 = "mhlo.broadcast_in_dim"(%cst_72) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.160"} : (tensor<f32>) -> tensor<4xf32>
    %173 = "mhlo.divide"(%172, %59) {name = "divide.161"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %174 = "mhlo.multiply"(%171, %173) {name = "multiply.164"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %175 = "mhlo.broadcast_in_dim"(%88) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.270"} : (tensor<f32>) -> tensor<4xf32>
    %176 = "mhlo.divide"(%95, %175) {name = "divide.271"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %177 = "mhlo.reshape"(%176) {name = "reshape.272"} : (tensor<4xf32>) -> tensor<4xf32>
    %cst_73 = "std.constant"() {name = "constant.273", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %178 = "mhlo.broadcast_in_dim"(%cst_73) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.274"} : (tensor<f32>) -> tensor<4xf32>
    %179 = "mhlo.divide"(%178, %59) {name = "divide.275"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %180 = "mhlo.multiply"(%177, %179) {name = "multiply.276"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %181 = "mhlo.add"(%174, %180) {name = "add.277"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %182 = "mhlo.multiply"(%181, %59) {name = "multiply.278"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %183 = "mhlo.add"(%170, %182) {name = "add.281"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %cst_74 = "std.constant"() {name = "constant.186", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %184 = "mhlo.broadcast_in_dim"(%cst_74) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.187"} : (tensor<f32>) -> tensor<4xf32>
    %cst_75 = "std.constant"() {name = "constant.188", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %185 = "mhlo.broadcast_in_dim"(%cst_75) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.189"} : (tensor<f32>) -> tensor<4xf32>
    %186 = "mhlo.reshape"(%arg3) {name = "reshape.13"} : (tensor<4xf32>) -> tensor<4xf32>
    %cst_76 = "std.constant"() {name = "constant.339", value = dense<10> : tensor<i32>} : () -> tensor<i32>
    %cst_77 = "std.constant"() {name = "constant.340", value = dense<true> : tensor<i1>} : () -> tensor<i1>
    %187 = "mhlo.broadcast_in_dim"(%cst_77) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.341"} : (tensor<i1>) -> tensor<4xi1>
    %cst_78 = "std.constant"() {name = "constant.190", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %188 = "mhlo.broadcast_in_dim"(%cst_78) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.191"} : (tensor<f32>) -> tensor<4xf32>
    %cst_79 = "std.constant"() {name = "constant.342", value = dense<10> : tensor<i32>} : () -> tensor<i32>
    %cst_80 = "std.constant"() {name = "constant.343", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %189 = "mhlo.broadcast_in_dim"(%cst_80) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.344"} : (tensor<i32>) -> tensor<2xi32>
    %cst_81 = "std.constant"() {name = "constant.345", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %190 = "mhlo.broadcast_in_dim"(%cst_81) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.346"} : (tensor<i32>) -> tensor<2xi32>
    %191 = "mhlo.reshape"(%arg4) {name = "reshape.14"} : (tensor<f32>) -> tensor<f32>
    %cst_82 = "std.constant"() {name = "constant.317", value = dense<2.30258512> : tensor<f32>} : () -> tensor<f32>
    %192 = "mhlo.broadcast_in_dim"(%cst_82) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.318"} : (tensor<f32>) -> tensor<4xf32>
    %193 = "mhlo.log"(%186) {name = "log.316"} : (tensor<4xf32>) -> tensor<4xf32>
    %194 = "mhlo.add"(%192, %193) {name = "add.319"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
    %195 = "mhlo.reshape"(%arg5) {name = "reshape.15"} : (tensor<f32>) -> tensor<f32>
    %196 = "mhlo.reshape"(%arg6) {name = "reshape.16"} : (tensor<f32>) -> tensor<f32>
    %197 = "mhlo.reshape"(%arg7) {name = "reshape.17"} : (tensor<f32>) -> tensor<f32>
    %cst_83 = "std.constant"() {name = "constant.192", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %198 = "mhlo.broadcast_in_dim"(%cst_83) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.193"} : (tensor<f32>) -> tensor<4xf32>
    %cst_84 = "std.constant"() {name = "constant.194", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %199 = "mhlo.broadcast_in_dim"(%cst_84) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.195"} : (tensor<f32>) -> tensor<4xf32>
    %cst_85 = "std.constant"() {name = "constant.347", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %cst_86 = "std.constant"() {name = "constant.348", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %cst_87 = "std.constant"() {name = "constant.211", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %200 = "mhlo.broadcast_in_dim"(%cst_87) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.212"} : (tensor<f32>) -> tensor<1000x4xf32>
    %cst_88 = "std.constant"() {name = "constant.213", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %201 = "mhlo.tuple"(%200, %cst_88) {name = "tuple.214"} : (tensor<1000x4xf32>, tensor<i32>) -> tuple<tensor<1000x4xf32>, tensor<i32>>
    %202 = "mhlo.get_tuple_element"(%201) {index = 0 : i32, name = "get-tuple-element.216"} : (tuple<tensor<1000x4xf32>, tensor<i32>>) -> tensor<1000x4xf32>
    %cst_89 = "std.constant"() {name = "constant.215", value = dense<1000> : tensor<i32>} : () -> tensor<i32>
    %203 = "mhlo.tuple"(%202, %cst_89) {name = "tuple.217"} : (tensor<1000x4xf32>, tensor<i32>) -> tuple<tensor<1000x4xf32>, tensor<i32>>
    %cst_90 = "std.constant"() {name = "constant.221", value = dense<false> : tensor<i1>} : () -> tensor<i1>
    %204 = "mhlo.broadcast_in_dim"(%cst_90) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.222"} : (tensor<i1>) -> tensor<1000x4xi1>
    %cst_91 = "std.constant"() {name = "constant.223", value = dense<0> : tensor<i32>} : () -> tensor<i32>
    %205 = "mhlo.tuple"(%204, %cst_91) {name = "tuple.224"} : (tensor<1000x4xi1>, tensor<i32>) -> tuple<tensor<1000x4xi1>, tensor<i32>>
    %206 = "mhlo.get_tuple_element"(%205) {index = 0 : i32, name = "get-tuple-element.226"} : (tuple<tensor<1000x4xi1>, tensor<i32>>) -> tensor<1000x4xi1>
    %cst_92 = "std.constant"() {name = "constant.225", value = dense<1000> : tensor<i32>} : () -> tensor<i32>
    %207 = "mhlo.tuple"(%206, %cst_92) {name = "tuple.227"} : (tensor<1000x4xi1>, tensor<i32>) -> tuple<tensor<1000x4xi1>, tensor<i32>>
    %cst_93 = "std.constant"() {name = "constant.196", value = dense<"0xtensor<1000xi32>} : () -> tensor<1000xi32>
    %cst_94 = "std.constant"() {name = "constant.197", value = dense<1000> : tensor<i32>} : () -> tensor<i32>
    %208 = "mhlo.tuple"(%cst_93, %cst_94) {name = "tuple.198"} : (tensor<1000xi32>, tensor<i32>) -> tuple<tensor<1000xi32>, tensor<i32>>
    %209 = "mhlo.reshape"(%arg8) {name = "reshape.18"} : (tensor<i32>) -> tensor<i32>
    %210 = "mhlo.tuple"(%cst_57, %cst_58, %cst_59, %141, %26, %27, %142, %169, %183, %184, %185, %186, %cst_76, %187, %188, %27, %142, %169, %183, %184, %185, %186, %cst_79, %189, %190, %191, %194, %195, %196, %197, %198, %199, %cst_85, %186, %cst_86, %203, %207, %208, %88, %91, %209) {name = "tuple.349"} : (tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>
    %211 = "mhlo.while"(%210) ( {
    ^bb0(%arg9: tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>):  // no predecessors
      %300 = "std.call"(%arg9) {callee = @mcmc_sample_chain_trace_scan_while_cond_325__.2491} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tuple<tensor<i1>>
      %301 = "mhlo.get_tuple_element"(%300) {index = 0 : i32, name = "get-tuple-element.2540"} : (tuple<tensor<i1>>) -> tensor<i1>
      "mhlo.return"(%301) : (tensor<i1>) -> ()
    },  {
    ^bb0(%arg9: tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>):  // no predecessors
      %cst_95 = "std.constant"() {name = "constant.2389", value = dense<0> : tensor<i32>} : () -> tensor<i32>
      %cst_96 = "std.constant"() {name = "constant.2393", value = dense<0> : tensor<i32>} : () -> tensor<i32>
      %cst_97 = "std.constant"() {name = "constant.2394", value = dense<-1> : tensor<i32>} : () -> tensor<i32>
      %cst_98 = "std.constant"() {name = "constant.2395", value = dense<0> : tensor<i32>} : () -> tensor<i32>
      %cst_99 = "std.constant"() {name = "constant.2396", value = dense<0> : tensor<i32>} : () -> tensor<i32>
      %cst_100 = "std.constant"() {name = "constant.2397", value = dense<-1> : tensor<i32>} : () -> tensor<i32>
      %cst_101 = "std.constant"() {name = "constant.2398", value = dense<0> : tensor<i32>} : () -> tensor<i32>
      %300 = "mhlo.get_tuple_element"(%arg9) {index = 3 : i32, name = "get-tuple-element.2345"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
      %301 = "mhlo.get_tuple_element"(%arg9) {index = 4 : i32, name = "get-tuple-element.2346"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %302 = "mhlo.get_tuple_element"(%arg9) {index = 5 : i32, name = "get-tuple-element.2347"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %303 = "mhlo.get_tuple_element"(%arg9) {index = 6 : i32, name = "get-tuple-element.2348"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %304 = "mhlo.get_tuple_element"(%arg9) {index = 7 : i32, name = "get-tuple-element.2349"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %305 = "mhlo.get_tuple_element"(%arg9) {index = 8 : i32, name = "get-tuple-element.2350"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %306 = "mhlo.get_tuple_element"(%arg9) {index = 9 : i32, name = "get-tuple-element.2351"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %307 = "mhlo.get_tuple_element"(%arg9) {index = 10 : i32, name = "get-tuple-element.2352"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %308 = "mhlo.get_tuple_element"(%arg9) {index = 11 : i32, name = "get-tuple-element.2353"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %309 = "mhlo.get_tuple_element"(%arg9) {index = 12 : i32, name = "get-tuple-element.2354"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %310 = "mhlo.get_tuple_element"(%arg9) {index = 13 : i32, name = "get-tuple-element.2355"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xi1>
      %311 = "mhlo.get_tuple_element"(%arg9) {index = 14 : i32, name = "get-tuple-element.2356"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %312 = "mhlo.get_tuple_element"(%arg9) {index = 15 : i32, name = "get-tuple-element.2357"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %313 = "mhlo.get_tuple_element"(%arg9) {index = 16 : i32, name = "get-tuple-element.2358"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %314 = "mhlo.get_tuple_element"(%arg9) {index = 17 : i32, name = "get-tuple-element.2359"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %315 = "mhlo.get_tuple_element"(%arg9) {index = 18 : i32, name = "get-tuple-element.2360"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %316 = "mhlo.get_tuple_element"(%arg9) {index = 19 : i32, name = "get-tuple-element.2361"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %317 = "mhlo.get_tuple_element"(%arg9) {index = 20 : i32, name = "get-tuple-element.2362"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %318 = "mhlo.get_tuple_element"(%arg9) {index = 21 : i32, name = "get-tuple-element.2363"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %319 = "mhlo.get_tuple_element"(%arg9) {index = 22 : i32, name = "get-tuple-element.2364"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %320 = "mhlo.get_tuple_element"(%arg9) {index = 23 : i32, name = "get-tuple-element.2365"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
      %321 = "mhlo.get_tuple_element"(%arg9) {index = 24 : i32, name = "get-tuple-element.2366"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
      %322 = "mhlo.get_tuple_element"(%arg9) {index = 25 : i32, name = "get-tuple-element.2367"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
      %323 = "mhlo.get_tuple_element"(%arg9) {index = 26 : i32, name = "get-tuple-element.2368"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %324 = "mhlo.get_tuple_element"(%arg9) {index = 27 : i32, name = "get-tuple-element.2369"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
      %325 = "mhlo.get_tuple_element"(%arg9) {index = 28 : i32, name = "get-tuple-element.2370"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
      %326 = "mhlo.get_tuple_element"(%arg9) {index = 29 : i32, name = "get-tuple-element.2371"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
      %327 = "mhlo.get_tuple_element"(%arg9) {index = 30 : i32, name = "get-tuple-element.2372"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %328 = "mhlo.get_tuple_element"(%arg9) {index = 31 : i32, name = "get-tuple-element.2373"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %329 = "mhlo.get_tuple_element"(%arg9) {index = 32 : i32, name = "get-tuple-element.2374"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %330 = "mhlo.get_tuple_element"(%arg9) {index = 33 : i32, name = "get-tuple-element.2375"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %331 = "mhlo.get_tuple_element"(%arg9) {index = 37 : i32, name = "get-tuple-element.2379"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tuple<tensor<1000xi32>, tensor<i32>>
      %332 = "mhlo.get_tuple_element"(%331) {index = 0 : i32, name = "get-tuple-element.2390"} : (tuple<tensor<1000xi32>, tensor<i32>>) -> tensor<1000xi32>
      %333 = "mhlo.get_tuple_element"(%arg9) {index = 2 : i32, name = "get-tuple-element.2344"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %334 = "mhlo.dynamic-slice"(%332, %333) {slice_sizes = dense<1> : tensor<1xi64>} : (tensor<1000xi32>, tensor<i32>) -> tensor<1xi32>
      %335 = "mhlo.reshape"(%334) {name = "reshape.2392"} : (tensor<1xi32>) -> tensor<i32>
      %336 = "mhlo.get_tuple_element"(%arg9) {index = 38 : i32, name = "get-tuple-element.2380"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
      %337 = "mhlo.get_tuple_element"(%arg9) {index = 39 : i32, name = "get-tuple-element.2381"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
      %338 = "mhlo.get_tuple_element"(%arg9) {index = 40 : i32, name = "get-tuple-element.2382"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %339 = "mhlo.tuple"(%cst_99, %cst_100, %cst_101, %300, %301, %302, %303, %304, %305, %306, %307, %308, %309, %310, %311, %312, %313, %314, %315, %316, %317, %318, %319, %320, %321, %322, %323, %324, %325, %326, %327, %328, %329, %330, %335, %336, %337, %338) {name = "tuple.2399"} : (tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>
      %340 = "mhlo.while"(%339) ( {
      ^bb0(%arg10: tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>):  // no predecessors
        %437 = "std.call"(%arg10) {callee = @mcmc_sample_chain_trace_scan_while_smart_for_loop_while_cond_412__.2294} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tuple<tensor<i1>>
        %438 = "mhlo.get_tuple_element"(%437) {index = 0 : i32, name = "get-tuple-element.2339"} : (tuple<tensor<i1>>) -> tensor<i1>
        "mhlo.return"(%438) : (tensor<i1>) -> ()
      },  {
      ^bb0(%arg10: tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>):  // no predecessors
        %437 = "mhlo.get_tuple_element"(%arg10) {index = 4 : i32, name = "get-tuple-element.621"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
        %438 = "mhlo.get_tuple_element"(%arg10) {index = 11 : i32, name = "get-tuple-element.628"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
        %439 = "mhlo.get_tuple_element"(%arg10) {index = 13 : i32, name = "get-tuple-element.630"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xi1>
        %440 = "mhlo.get_tuple_element"(%arg10) {index = 14 : i32, name = "get-tuple-element.631"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
        %441 = "mhlo.get_tuple_element"(%arg10) {index = 15 : i32, name = "get-tuple-element.632"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
        %442 = "mhlo.get_tuple_element"(%arg10) {index = 16 : i32, name = "get-tuple-element.633"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
        %443 = "mhlo.get_tuple_element"(%arg10) {index = 17 : i32, name = "get-tuple-element.634"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
        %444 = "mhlo.get_tuple_element"(%arg10) {index = 18 : i32, name = "get-tuple-element.635"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
        %445 = "mhlo.get_tuple_element"(%arg10) {index = 19 : i32, name = "get-tuple-element.636"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
        %446 = "mhlo.get_tuple_element"(%arg10) {index = 20 : i32, name = "get-tuple-element.637"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
        %447 = "mhlo.get_tuple_element"(%arg10) {index = 21 : i32, name = "get-tuple-element.638"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
        %448 = "mhlo.get_tuple_element"(%arg10) {index = 22 : i32, name = "get-tuple-element.639"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
        %449 = "mhlo.get_tuple_element"(%arg10) {index = 23 : i32, name = "get-tuple-element.640"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
        %450 = "mhlo.get_tuple_element"(%arg10) {index = 24 : i32, name = "get-tuple-element.641"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
        %cst_107 = "std.constant"() {name = "constant.655", value = dense<1> : tensor<i32>} : () -> tensor<i32>
        %cst_108 = "std.constant"() {name = "constant.656", value = dense<1> : tensor<i32>} : () -> tensor<i32>
        %451 = "mhlo.subtract"(%cst_107, %cst_108) {name = "subtract.657"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
        %cst_109 = "std.constant"() {name = "constant.658", value = dense<0> : tensor<i32>} : () -> tensor<i32>
        %452 = "mhlo.maximum"(%451, %cst_109) {name = "maximum.659"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
        %cst_110 = "std.constant"() {name = "constant.660", value = dense<1000> : tensor<i32>} : () -> tensor<i32>
        %453 = "mhlo.compare"(%452, %cst_110) {comparison_direction = "LT", name = "compare.661"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
        %454 = "mhlo.reshape"(%452) {name = "reshape.662"} : (tensor<i32>) -> tensor<1xi32>
        %455 = "mhlo.concatenate"(%454) {dimension = 0 : i64} : (tensor<1xi32>) -> tensor<1xi32>
        %cst_111 = "std.constant"() {name = "constant.664", value = dense<1> : tensor<i32>} : () -> tensor<i32>
        %456 = "mhlo.broadcast_in_dim"(%cst_111) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.665"} : (tensor<i32>) -> tensor<0xi32>
        %cst_112 = "std.constant"() {name = "constant.666", value = dense<1> : tensor<i32>} : () -> tensor<i32>
        %cst_113 = "std.constant"() {name = "constant.667", value = dense<1> : tensor<i32>} : () -> tensor<i32>
        %457 = "mhlo.subtract"(%cst_112, %cst_113) {name = "subtract.668"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
        %cst_114 = "std.constant"() {name = "constant.669", value = dense<0> : tensor<i32>} : () -> tensor<i32>
        %458 = "mhlo.maximum"(%457, %cst_114) {name = "maximum.670"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
        %cst_115 = "std.constant"() {name = "constant.671", value = dense<1000> : tensor<i32>} : () -> tensor<i32>
        %459 = "mhlo.compare"(%458, %cst_115) {comparison_direction = "LT", name = "compare.672"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
        %460 = "mhlo.reshape"(%458) {name = "reshape.673"} : (tensor<i32>) -> tensor<1xi32>
        %461 = "mhlo.concatenate"(%460) {dimension = 0 : i64} : (tensor<1xi32>) -> tensor<1xi32>
        %cst_116 = "std.constant"() {name = "constant.675", value = dense<1> : tensor<i32>} : () -> tensor<i32>
        %462 = "mhlo.broadcast_in_dim"(%cst_116) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.676"} : (tensor<i32>) -> tensor<0xi32>
        %cst_117 = "std.constant"() {name = "constant.677", value = dense<1> : tensor<i32>} : () -> tensor<i32>
        %cst_118 = "std.constant"() {name = "constant.678", value = dense<1> : tensor<i32>} : () -> tensor<i32>
        %463 = "mhlo.subtract"(%cst_117, %cst_118) {name = "subtract.679"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
        %cst_119 = "std.constant"() {name = "constant.680", value = dense<0> : tensor<i32>} : () -> tensor<i32>
        %464 = "mhlo.maximum"(%463, %cst_119) {name = "maximum.681"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
        %cst_120 = "std.constant"() {name = "constant.682", value = dense<1000> : tensor<i32>} : () -> tensor<i32>
        %465 = "mhlo.compare"(%464, %cst_120) {comparison_direction = "LT", name = "compare.683"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
        %466 = "mhlo.reshape"(%464) {name = "reshape.684"} : (tensor<i32>) -> tensor<1xi32>
        %467 = "mhlo.concatenate"(%466) {dimension = 0 : i64} : (tensor<1xi32>) -> tensor<1xi32>
        %cst_121 = "std.constant"() {name = "constant.686", value = dense<1> : tensor<i32>} : () -> tensor<i32>
        %468 = "mhlo.broadcast_in_dim"(%cst_121) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.687"} : (tensor<i32>) -> tensor<0xi32>
        %cst_122 = "std.constant"() {name = "constant.688", value = dense<1> : tensor<i32>} : () -> tensor<i32>
        %cst_123 = "std.constant"() {name = "constant.689", value = dense<1> : tensor<i32>} : () -> tensor<i32>
        %469 = "mhlo.subtract"(%cst_122, %cst_123) {name = "subtract.690"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
        %cst_124 = "std.constant"() {name = "constant.691", value = dense<0> : tensor<i32>} : () -> tensor<i32>
        %470 = "mhlo.maximum"(%469, %cst_124) {name = "maximum.692"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
        %cst_125 = "std.constant"() {name = "constant.693", value = dense<1000> : tensor<i32>} : () -> tensor<i32>
        %471 = "mhlo.compare"(%470, %cst_125) {comparison_direction = "LT", name = "compare.694"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
        %472 = "mhlo.reshape"(%470) {name = "reshape.695"} : (tensor<i32>) -> tensor<1xi32>
        %473 = "mhlo.concatenate"(%472) {dimension = 0 : i64} : (tensor<1xi32>) -> tensor<1xi32>
        %cst_126 = "std.constant"() {name = "constant.697", value = dense<1> : tensor<i32>} : () -> tensor<i32>
        %474 = "mhlo.broadcast_in_dim"(%cst_126) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.698"} : (tensor<i32>) -> tensor<0xi32>
        %cst_127 = "std.constant"() {name = "constant.699", value = dense<1> : tensor<i32>} : () -> tensor<i32>
        %cst_128 = "std.constant"() {name = "constant.700", value = dense<1> : tensor<i32>} : () -> tensor<i32>
        %475 = "mhlo.subtract"(%cst_127, %cst_128) {name = "subtract.701"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
        %cst_129 = "std.constant"() {name = "constant.702", value = dense<0> : tensor<i32>} : () -> tensor<i32>
        %476 = "mhlo.maximum"(%475, %cst_129) {name = "maximum.703"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
        %cst_130 = "std.constant"() {name = "constant.704", value = dense<1000> : tensor<i32>} : () -> tensor<i32>
        %477 = "mhlo.compare"(%476, %cst_130) {comparison_direction = "LT", name = "compare.705"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
        %478 = "mhlo.reshape"(%476) {name = "reshape.706"} : (tensor<i32>) -> tensor<1xi32>
        %479 = "mhlo.concatenate"(%478) {dimension = 0 : i64} : (tensor<1xi32>) -> tensor<1xi32>
        %cst_131 = "std.constant"() {name = "constant.708", value = dense<1> : tensor<i32>} : () -> tensor<i32>
        %480 = "mhlo.broadcast_in_dim"(%cst_131) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.709"} : (tensor<i32>) -> tensor<0xi32>
        %cst_132 = "std.constant"() {name = "constant.710", value = dense<1> : tensor<i32>} : () -> tensor<i32>
        %cst_133 = "std.constant"() {name = "constant.711", value = dense<1> : tensor<i32>} : () -> tensor<i32>
        %481 = "mhlo.subtract"(%cst_132, %cst_133) {name = "subtract.712"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
        %cst_134 = "std.constant"() {name = "constant.713", value = dense<0> : tensor<i32>} : () -> tensor<i32>
        %482 = "mhlo.maximum"(%481, %cst_134) {name = "maximum.714"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
        %cst_135 = "std.constant"() {name = "constant.715", value = dense<1000> : tensor<i32>} : () -> tensor<i32>
        %483 = "mhlo.compare"(%482, %cst_135) {comparison_direction = "LT", name = "compare.716"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
        %484 = "mhlo.reshape"(%482) {name = "reshape.717"} : (tensor<i32>) -> tensor<1xi32>
        %485 = "mhlo.concatenate"(%484) {dimension = 0 : i64} : (tensor<1xi32>) -> tensor<1xi32>
        %cst_136 = "std.constant"() {name = "constant.719", value = dense<1> : tensor<i32>} : () -> tensor<i32>
        %486 = "mhlo.broadcast_in_dim"(%cst_136) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.720"} : (tensor<i32>) -> tensor<0xi32>
        %cst_137 = "std.constant"() {name = "constant.734", value = dense<0> : tensor<ui64>} : () -> tensor<ui64>
        %cst_138 = "std.constant"() {name = "constant.749", value = dense<1053357856> : tensor<ui32>} : () -> tensor<ui32>
        %cst_139 = "std.constant"() {name = "constant.769", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %487 = "mhlo.add"(%cst_138, %cst_139) {name = "add.770"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_140 = "std.constant"() {name = "constant.791", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %488 = "mhlo.add"(%487, %cst_140) {name = "add.792"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_141 = "std.constant"() {name = "constant.813", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %489 = "mhlo.add"(%488, %cst_141) {name = "add.814"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_142 = "std.constant"() {name = "constant.835", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %490 = "mhlo.add"(%489, %cst_142) {name = "add.836"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_143 = "std.constant"() {name = "constant.857", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %491 = "mhlo.add"(%490, %cst_143) {name = "add.858"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_144 = "std.constant"() {name = "constant.879", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %492 = "mhlo.add"(%491, %cst_144) {name = "add.880"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_145 = "std.constant"() {name = "constant.901", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %493 = "mhlo.add"(%492, %cst_145) {name = "add.902"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_146 = "std.constant"() {name = "constant.923", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %494 = "mhlo.add"(%493, %cst_146) {name = "add.924"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_147 = "std.constant"() {name = "constant.945", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %495 = "mhlo.add"(%494, %cst_147) {name = "add.946"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_148 = "std.constant"() {name = "constant.967", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %496 = "mhlo.add"(%495, %cst_148) {name = "add.968"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_149 = "std.constant"() {name = "constant.750", value = dense<38149673> : tensor<ui32>} : () -> tensor<ui32>
        %cst_150 = "std.constant"() {name = "constant.771", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %497 = "mhlo.add"(%cst_149, %cst_150) {name = "add.772"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_151 = "std.constant"() {name = "constant.793", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %498 = "mhlo.add"(%497, %cst_151) {name = "add.794"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_152 = "std.constant"() {name = "constant.815", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %499 = "mhlo.add"(%498, %cst_152) {name = "add.816"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_153 = "std.constant"() {name = "constant.837", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %500 = "mhlo.add"(%499, %cst_153) {name = "add.838"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_154 = "std.constant"() {name = "constant.859", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %501 = "mhlo.add"(%500, %cst_154) {name = "add.860"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_155 = "std.constant"() {name = "constant.881", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %502 = "mhlo.add"(%501, %cst_155) {name = "add.882"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_156 = "std.constant"() {name = "constant.903", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %503 = "mhlo.add"(%502, %cst_156) {name = "add.904"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_157 = "std.constant"() {name = "constant.925", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %504 = "mhlo.add"(%503, %cst_157) {name = "add.926"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_158 = "std.constant"() {name = "constant.947", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %505 = "mhlo.add"(%504, %cst_158) {name = "add.948"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_159 = "std.constant"() {name = "constant.969", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %506 = "mhlo.add"(%505, %cst_159) {name = "add.970"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %507 = "mhlo.get_tuple_element"(%arg10) {index = 3 : i32, name = "get-tuple-element.620"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
        %508 = "mhlo.slice"(%507) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
        %509 = "mhlo.reshape"(%508) {name = "reshape.726"} : (tensor<1xi32>) -> tensor<i32>
        %510 = "mhlo.convert"(%509) {name = "convert.729"} : (tensor<i32>) -> tensor<ui64>
        %511 = "mhlo.slice"(%507) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
        %512 = "mhlo.reshape"(%511) {name = "reshape.728"} : (tensor<1xi32>) -> tensor<i32>
        %513 = "mhlo.convert"(%512) {name = "convert.730"} : (tensor<i32>) -> tensor<ui64>
        %cst_160 = "std.constant"() {name = "constant.731", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %514 = "mhlo.shift_left"(%513, %cst_160) {name = "shift-left.732"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %515 = "mhlo.or"(%510, %514) {name = "or.733"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %516 = "mhlo.convert"(%515) {name = "convert.736"} : (tensor<ui64>) -> tensor<ui32>
        %517 = "mhlo.convert"(%516) {name = "convert.739"} : (tensor<ui32>) -> tensor<ui64>
        %518 = "mhlo.convert"(%517) {name = "convert.741"} : (tensor<ui64>) -> tensor<ui32>
        %519 = "mhlo.convert"(%518) {name = "convert.751"} : (tensor<ui32>) -> tensor<ui64>
        %cst_161 = "std.constant"() {name = "constant.752", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %520 = "mhlo.multiply"(%519, %cst_161) {name = "multiply.753"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_162 = "std.constant"() {name = "constant.755", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %521 = "mhlo.shift_right_logical"(%520, %cst_162) {name = "shift-right-logical.756"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %522 = "mhlo.convert"(%521) {name = "convert.757"} : (tensor<ui64>) -> tensor<ui32>
        %cst_163 = "std.constant"() {name = "constant.735", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %523 = "mhlo.shift_right_logical"(%515, %cst_163) {name = "shift-right-logical.737"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %524 = "mhlo.convert"(%523) {name = "convert.738"} : (tensor<ui64>) -> tensor<ui32>
        %525 = "mhlo.convert"(%524) {name = "convert.740"} : (tensor<ui32>) -> tensor<ui64>
        %cst_164 = "std.constant"() {name = "constant.746", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %526 = "mhlo.shift_right_logical"(%525, %cst_164) {name = "shift-right-logical.747"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %527 = "mhlo.convert"(%526) {name = "convert.748"} : (tensor<ui64>) -> tensor<ui32>
        %528 = "mhlo.xor"(%522, %527) {name = "xor.767"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %529 = "mhlo.xor"(%528, %cst_149) {name = "xor.768"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %530 = "mhlo.convert"(%529) {name = "convert.780"} : (tensor<ui32>) -> tensor<ui64>
        %cst_165 = "std.constant"() {name = "constant.781", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %531 = "mhlo.multiply"(%530, %cst_165) {name = "multiply.782"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_166 = "std.constant"() {name = "constant.784", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %532 = "mhlo.shift_right_logical"(%531, %cst_166) {name = "shift-right-logical.785"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %533 = "mhlo.convert"(%532) {name = "convert.786"} : (tensor<ui64>) -> tensor<ui32>
        %534 = "mhlo.convert"(%525) {name = "convert.745"} : (tensor<ui64>) -> tensor<ui32>
        %535 = "mhlo.convert"(%534) {name = "convert.758"} : (tensor<ui32>) -> tensor<ui64>
        %cst_167 = "std.constant"() {name = "constant.759", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %536 = "mhlo.multiply"(%535, %cst_167) {name = "multiply.760"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %537 = "mhlo.convert"(%536) {name = "convert.761"} : (tensor<ui64>) -> tensor<ui32>
        %538 = "mhlo.xor"(%533, %537) {name = "xor.787"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %539 = "mhlo.xor"(%538, %487) {name = "xor.788"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %540 = "mhlo.convert"(%539) {name = "convert.795"} : (tensor<ui32>) -> tensor<ui64>
        %cst_168 = "std.constant"() {name = "constant.796", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %541 = "mhlo.multiply"(%540, %cst_168) {name = "multiply.797"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_169 = "std.constant"() {name = "constant.799", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %542 = "mhlo.shift_right_logical"(%541, %cst_169) {name = "shift-right-logical.800"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %543 = "mhlo.convert"(%542) {name = "convert.801"} : (tensor<ui64>) -> tensor<ui32>
        %cst_170 = "std.constant"() {name = "constant.762", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %544 = "mhlo.shift_right_logical"(%536, %cst_170) {name = "shift-right-logical.763"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %545 = "mhlo.convert"(%544) {name = "convert.764"} : (tensor<ui64>) -> tensor<ui32>
        %cst_171 = "std.constant"() {name = "constant.742", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %546 = "mhlo.shift_right_logical"(%517, %cst_171) {name = "shift-right-logical.743"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %547 = "mhlo.convert"(%546) {name = "convert.744"} : (tensor<ui64>) -> tensor<ui32>
        %548 = "mhlo.xor"(%545, %547) {name = "xor.765"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %549 = "mhlo.xor"(%548, %cst_138) {name = "xor.766"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %550 = "mhlo.convert"(%549) {name = "convert.773"} : (tensor<ui32>) -> tensor<ui64>
        %cst_172 = "std.constant"() {name = "constant.774", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %551 = "mhlo.multiply"(%550, %cst_172) {name = "multiply.775"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %552 = "mhlo.convert"(%551) {name = "convert.776"} : (tensor<ui64>) -> tensor<ui32>
        %553 = "mhlo.xor"(%543, %552) {name = "xor.811"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %554 = "mhlo.xor"(%553, %498) {name = "xor.812"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %555 = "mhlo.convert"(%554) {name = "convert.824"} : (tensor<ui32>) -> tensor<ui64>
        %cst_173 = "std.constant"() {name = "constant.825", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %556 = "mhlo.multiply"(%555, %cst_173) {name = "multiply.826"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_174 = "std.constant"() {name = "constant.828", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %557 = "mhlo.shift_right_logical"(%556, %cst_174) {name = "shift-right-logical.829"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %558 = "mhlo.convert"(%557) {name = "convert.830"} : (tensor<ui64>) -> tensor<ui32>
        %cst_175 = "std.constant"() {name = "constant.777", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %559 = "mhlo.shift_right_logical"(%551, %cst_175) {name = "shift-right-logical.778"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %560 = "mhlo.convert"(%559) {name = "convert.779"} : (tensor<ui64>) -> tensor<ui32>
        %561 = "mhlo.convert"(%520) {name = "convert.754"} : (tensor<ui64>) -> tensor<ui32>
        %562 = "mhlo.xor"(%560, %561) {name = "xor.789"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %563 = "mhlo.xor"(%562, %497) {name = "xor.790"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %564 = "mhlo.convert"(%563) {name = "convert.802"} : (tensor<ui32>) -> tensor<ui64>
        %cst_176 = "std.constant"() {name = "constant.803", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %565 = "mhlo.multiply"(%564, %cst_176) {name = "multiply.804"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %566 = "mhlo.convert"(%565) {name = "convert.805"} : (tensor<ui64>) -> tensor<ui32>
        %567 = "mhlo.xor"(%558, %566) {name = "xor.831"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %568 = "mhlo.xor"(%567, %489) {name = "xor.832"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %569 = "mhlo.convert"(%568) {name = "convert.839"} : (tensor<ui32>) -> tensor<ui64>
        %cst_177 = "std.constant"() {name = "constant.840", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %570 = "mhlo.multiply"(%569, %cst_177) {name = "multiply.841"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_178 = "std.constant"() {name = "constant.843", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %571 = "mhlo.shift_right_logical"(%570, %cst_178) {name = "shift-right-logical.844"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %572 = "mhlo.convert"(%571) {name = "convert.845"} : (tensor<ui64>) -> tensor<ui32>
        %cst_179 = "std.constant"() {name = "constant.806", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %573 = "mhlo.shift_right_logical"(%565, %cst_179) {name = "shift-right-logical.807"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %574 = "mhlo.convert"(%573) {name = "convert.808"} : (tensor<ui64>) -> tensor<ui32>
        %575 = "mhlo.convert"(%531) {name = "convert.783"} : (tensor<ui64>) -> tensor<ui32>
        %576 = "mhlo.xor"(%574, %575) {name = "xor.809"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %577 = "mhlo.xor"(%576, %488) {name = "xor.810"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %578 = "mhlo.convert"(%577) {name = "convert.817"} : (tensor<ui32>) -> tensor<ui64>
        %cst_180 = "std.constant"() {name = "constant.818", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %579 = "mhlo.multiply"(%578, %cst_180) {name = "multiply.819"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %580 = "mhlo.convert"(%579) {name = "convert.820"} : (tensor<ui64>) -> tensor<ui32>
        %581 = "mhlo.xor"(%572, %580) {name = "xor.855"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %582 = "mhlo.xor"(%581, %500) {name = "xor.856"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %583 = "mhlo.convert"(%582) {name = "convert.868"} : (tensor<ui32>) -> tensor<ui64>
        %cst_181 = "std.constant"() {name = "constant.869", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %584 = "mhlo.multiply"(%583, %cst_181) {name = "multiply.870"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_182 = "std.constant"() {name = "constant.872", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %585 = "mhlo.shift_right_logical"(%584, %cst_182) {name = "shift-right-logical.873"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %586 = "mhlo.convert"(%585) {name = "convert.874"} : (tensor<ui64>) -> tensor<ui32>
        %cst_183 = "std.constant"() {name = "constant.821", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %587 = "mhlo.shift_right_logical"(%579, %cst_183) {name = "shift-right-logical.822"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %588 = "mhlo.convert"(%587) {name = "convert.823"} : (tensor<ui64>) -> tensor<ui32>
        %589 = "mhlo.convert"(%541) {name = "convert.798"} : (tensor<ui64>) -> tensor<ui32>
        %590 = "mhlo.xor"(%588, %589) {name = "xor.833"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %591 = "mhlo.xor"(%590, %499) {name = "xor.834"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %592 = "mhlo.convert"(%591) {name = "convert.846"} : (tensor<ui32>) -> tensor<ui64>
        %cst_184 = "std.constant"() {name = "constant.847", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %593 = "mhlo.multiply"(%592, %cst_184) {name = "multiply.848"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %594 = "mhlo.convert"(%593) {name = "convert.849"} : (tensor<ui64>) -> tensor<ui32>
        %595 = "mhlo.xor"(%586, %594) {name = "xor.875"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %596 = "mhlo.xor"(%595, %491) {name = "xor.876"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %597 = "mhlo.convert"(%596) {name = "convert.883"} : (tensor<ui32>) -> tensor<ui64>
        %cst_185 = "std.constant"() {name = "constant.884", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %598 = "mhlo.multiply"(%597, %cst_185) {name = "multiply.885"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_186 = "std.constant"() {name = "constant.887", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %599 = "mhlo.shift_right_logical"(%598, %cst_186) {name = "shift-right-logical.888"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %600 = "mhlo.convert"(%599) {name = "convert.889"} : (tensor<ui64>) -> tensor<ui32>
        %cst_187 = "std.constant"() {name = "constant.850", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %601 = "mhlo.shift_right_logical"(%593, %cst_187) {name = "shift-right-logical.851"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %602 = "mhlo.convert"(%601) {name = "convert.852"} : (tensor<ui64>) -> tensor<ui32>
        %603 = "mhlo.convert"(%556) {name = "convert.827"} : (tensor<ui64>) -> tensor<ui32>
        %604 = "mhlo.xor"(%602, %603) {name = "xor.853"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %605 = "mhlo.xor"(%604, %490) {name = "xor.854"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %606 = "mhlo.convert"(%605) {name = "convert.861"} : (tensor<ui32>) -> tensor<ui64>
        %cst_188 = "std.constant"() {name = "constant.862", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %607 = "mhlo.multiply"(%606, %cst_188) {name = "multiply.863"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %608 = "mhlo.convert"(%607) {name = "convert.864"} : (tensor<ui64>) -> tensor<ui32>
        %609 = "mhlo.xor"(%600, %608) {name = "xor.899"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %610 = "mhlo.xor"(%609, %502) {name = "xor.900"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %611 = "mhlo.convert"(%610) {name = "convert.912"} : (tensor<ui32>) -> tensor<ui64>
        %cst_189 = "std.constant"() {name = "constant.913", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %612 = "mhlo.multiply"(%611, %cst_189) {name = "multiply.914"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_190 = "std.constant"() {name = "constant.916", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %613 = "mhlo.shift_right_logical"(%612, %cst_190) {name = "shift-right-logical.917"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %614 = "mhlo.convert"(%613) {name = "convert.918"} : (tensor<ui64>) -> tensor<ui32>
        %cst_191 = "std.constant"() {name = "constant.865", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %615 = "mhlo.shift_right_logical"(%607, %cst_191) {name = "shift-right-logical.866"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %616 = "mhlo.convert"(%615) {name = "convert.867"} : (tensor<ui64>) -> tensor<ui32>
        %617 = "mhlo.convert"(%570) {name = "convert.842"} : (tensor<ui64>) -> tensor<ui32>
        %618 = "mhlo.xor"(%616, %617) {name = "xor.877"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %619 = "mhlo.xor"(%618, %501) {name = "xor.878"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %620 = "mhlo.convert"(%619) {name = "convert.890"} : (tensor<ui32>) -> tensor<ui64>
        %cst_192 = "std.constant"() {name = "constant.891", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %621 = "mhlo.multiply"(%620, %cst_192) {name = "multiply.892"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %622 = "mhlo.convert"(%621) {name = "convert.893"} : (tensor<ui64>) -> tensor<ui32>
        %623 = "mhlo.xor"(%614, %622) {name = "xor.919"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %624 = "mhlo.xor"(%623, %493) {name = "xor.920"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %625 = "mhlo.convert"(%624) {name = "convert.927"} : (tensor<ui32>) -> tensor<ui64>
        %cst_193 = "std.constant"() {name = "constant.928", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %626 = "mhlo.multiply"(%625, %cst_193) {name = "multiply.929"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_194 = "std.constant"() {name = "constant.931", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %627 = "mhlo.shift_right_logical"(%626, %cst_194) {name = "shift-right-logical.932"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %628 = "mhlo.convert"(%627) {name = "convert.933"} : (tensor<ui64>) -> tensor<ui32>
        %cst_195 = "std.constant"() {name = "constant.894", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %629 = "mhlo.shift_right_logical"(%621, %cst_195) {name = "shift-right-logical.895"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %630 = "mhlo.convert"(%629) {name = "convert.896"} : (tensor<ui64>) -> tensor<ui32>
        %631 = "mhlo.convert"(%584) {name = "convert.871"} : (tensor<ui64>) -> tensor<ui32>
        %632 = "mhlo.xor"(%630, %631) {name = "xor.897"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %633 = "mhlo.xor"(%632, %492) {name = "xor.898"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %634 = "mhlo.convert"(%633) {name = "convert.905"} : (tensor<ui32>) -> tensor<ui64>
        %cst_196 = "std.constant"() {name = "constant.906", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %635 = "mhlo.multiply"(%634, %cst_196) {name = "multiply.907"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %636 = "mhlo.convert"(%635) {name = "convert.908"} : (tensor<ui64>) -> tensor<ui32>
        %637 = "mhlo.xor"(%628, %636) {name = "xor.943"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %638 = "mhlo.xor"(%637, %504) {name = "xor.944"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %639 = "mhlo.convert"(%638) {name = "convert.956"} : (tensor<ui32>) -> tensor<ui64>
        %cst_197 = "std.constant"() {name = "constant.957", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %640 = "mhlo.multiply"(%639, %cst_197) {name = "multiply.958"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_198 = "std.constant"() {name = "constant.960", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %641 = "mhlo.shift_right_logical"(%640, %cst_198) {name = "shift-right-logical.961"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %642 = "mhlo.convert"(%641) {name = "convert.962"} : (tensor<ui64>) -> tensor<ui32>
        %cst_199 = "std.constant"() {name = "constant.909", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %643 = "mhlo.shift_right_logical"(%635, %cst_199) {name = "shift-right-logical.910"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %644 = "mhlo.convert"(%643) {name = "convert.911"} : (tensor<ui64>) -> tensor<ui32>
        %645 = "mhlo.convert"(%598) {name = "convert.886"} : (tensor<ui64>) -> tensor<ui32>
        %646 = "mhlo.xor"(%644, %645) {name = "xor.921"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %647 = "mhlo.xor"(%646, %503) {name = "xor.922"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %648 = "mhlo.convert"(%647) {name = "convert.934"} : (tensor<ui32>) -> tensor<ui64>
        %cst_200 = "std.constant"() {name = "constant.935", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %649 = "mhlo.multiply"(%648, %cst_200) {name = "multiply.936"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %650 = "mhlo.convert"(%649) {name = "convert.937"} : (tensor<ui64>) -> tensor<ui32>
        %651 = "mhlo.xor"(%642, %650) {name = "xor.963"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %652 = "mhlo.xor"(%651, %495) {name = "xor.964"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %653 = "mhlo.convert"(%652) {name = "convert.985"} : (tensor<ui32>) -> tensor<ui64>
        %654 = "mhlo.convert"(%640) {name = "convert.959"} : (tensor<ui64>) -> tensor<ui32>
        %655 = "mhlo.convert"(%654) {name = "convert.986"} : (tensor<ui32>) -> tensor<ui64>
        %cst_201 = "std.constant"() {name = "constant.987", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %656 = "mhlo.shift_left"(%655, %cst_201) {name = "shift-left.988"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %657 = "mhlo.or"(%653, %656) {name = "or.989"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %658 = "mhlo.reshape"(%657) {name = "reshape.990"} : (tensor<ui64>) -> tensor<1xui64>
        %cst_202 = "std.constant"() {name = "constant.971", value = dense<0> : tensor<ui32>} : () -> tensor<ui32>
        %659 = "mhlo.convert"(%cst_202) {name = "convert.972"} : (tensor<ui32>) -> tensor<ui64>
        %660 = "mhlo.convert"(%cst_202) {name = "convert.973"} : (tensor<ui32>) -> tensor<ui64>
        %cst_203 = "std.constant"() {name = "constant.974", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %661 = "mhlo.shift_left"(%660, %cst_203) {name = "shift-left.975"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %662 = "mhlo.or"(%659, %661) {name = "or.976"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %663 = "mhlo.reshape"(%662) {name = "reshape.982"} : (tensor<ui64>) -> tensor<1xui64>
        %cst_204 = "std.constant"() {name = "constant.938", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %664 = "mhlo.shift_right_logical"(%649, %cst_204) {name = "shift-right-logical.939"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %665 = "mhlo.convert"(%664) {name = "convert.940"} : (tensor<ui64>) -> tensor<ui32>
        %666 = "mhlo.convert"(%612) {name = "convert.915"} : (tensor<ui64>) -> tensor<ui32>
        %667 = "mhlo.xor"(%665, %666) {name = "xor.941"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %668 = "mhlo.xor"(%667, %494) {name = "xor.942"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %669 = "mhlo.convert"(%668) {name = "convert.949"} : (tensor<ui32>) -> tensor<ui64>
        %cst_205 = "std.constant"() {name = "constant.950", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %670 = "mhlo.multiply"(%669, %cst_205) {name = "multiply.951"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_206 = "std.constant"() {name = "constant.953", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %671 = "mhlo.shift_right_logical"(%670, %cst_206) {name = "shift-right-logical.954"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %672 = "mhlo.convert"(%671) {name = "convert.955"} : (tensor<ui64>) -> tensor<ui32>
        %673 = "mhlo.convert"(%626) {name = "convert.930"} : (tensor<ui64>) -> tensor<ui32>
        %674 = "mhlo.xor"(%672, %673) {name = "xor.965"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %675 = "mhlo.xor"(%674, %505) {name = "xor.966"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %676 = "mhlo.convert"(%675) {name = "convert.977"} : (tensor<ui32>) -> tensor<ui64>
        %677 = "mhlo.convert"(%670) {name = "convert.952"} : (tensor<ui64>) -> tensor<ui32>
        %678 = "mhlo.convert"(%677) {name = "convert.978"} : (tensor<ui32>) -> tensor<ui64>
        %cst_207 = "std.constant"() {name = "constant.979", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %679 = "mhlo.shift_left"(%678, %cst_207) {name = "shift-left.980"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %680 = "mhlo.or"(%676, %679) {name = "or.981"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %681 = "mhlo.reshape"(%680) {name = "reshape.983"} : (tensor<ui64>) -> tensor<1xui64>
        %682 = "mhlo.concatenate"(%663, %681) {dimension = 0 : i64} : (tensor<1xui64>, tensor<1xui64>) -> tensor<2xui64>
        %683 = "mhlo.concatenate"(%658, %682) {dimension = 0 : i64} : (tensor<1xui64>, tensor<2xui64>) -> tensor<3xui64>
        %684 = "mhlo.rng_bit_generator"(%683) {rng_algorithm = 2 : i32} : (tensor<3xui64>) -> tuple<tensor<3xui64>, tensor<2x2xui32>>
        %685 = "mhlo.get_tuple_element"(%684) {index = 0 : i32, name = "get-tuple-element.994"} : (tuple<tensor<3xui64>, tensor<2x2xui32>>) -> tensor<3xui64>
        %cst_208 = "std.constant"() {name = "constant.1009", value = dense<0> : tensor<ui64>} : () -> tensor<ui64>
        %cst_209 = "std.constant"() {name = "constant.1024", value = dense<1053357856> : tensor<ui32>} : () -> tensor<ui32>
        %cst_210 = "std.constant"() {name = "constant.1044", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %686 = "mhlo.add"(%cst_209, %cst_210) {name = "add.1045"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_211 = "std.constant"() {name = "constant.1066", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %687 = "mhlo.add"(%686, %cst_211) {name = "add.1067"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_212 = "std.constant"() {name = "constant.1088", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %688 = "mhlo.add"(%687, %cst_212) {name = "add.1089"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_213 = "std.constant"() {name = "constant.1110", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %689 = "mhlo.add"(%688, %cst_213) {name = "add.1111"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_214 = "std.constant"() {name = "constant.1132", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %690 = "mhlo.add"(%689, %cst_214) {name = "add.1133"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_215 = "std.constant"() {name = "constant.1154", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %691 = "mhlo.add"(%690, %cst_215) {name = "add.1155"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_216 = "std.constant"() {name = "constant.1176", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %692 = "mhlo.add"(%691, %cst_216) {name = "add.1177"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_217 = "std.constant"() {name = "constant.1198", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %693 = "mhlo.add"(%692, %cst_217) {name = "add.1199"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_218 = "std.constant"() {name = "constant.1220", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %694 = "mhlo.add"(%693, %cst_218) {name = "add.1221"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_219 = "std.constant"() {name = "constant.1242", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %695 = "mhlo.add"(%694, %cst_219) {name = "add.1243"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_220 = "std.constant"() {name = "constant.1025", value = dense<38149673> : tensor<ui32>} : () -> tensor<ui32>
        %cst_221 = "std.constant"() {name = "constant.1046", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %696 = "mhlo.add"(%cst_220, %cst_221) {name = "add.1047"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_222 = "std.constant"() {name = "constant.1068", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %697 = "mhlo.add"(%696, %cst_222) {name = "add.1069"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_223 = "std.constant"() {name = "constant.1090", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %698 = "mhlo.add"(%697, %cst_223) {name = "add.1091"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_224 = "std.constant"() {name = "constant.1112", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %699 = "mhlo.add"(%698, %cst_224) {name = "add.1113"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_225 = "std.constant"() {name = "constant.1134", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %700 = "mhlo.add"(%699, %cst_225) {name = "add.1135"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_226 = "std.constant"() {name = "constant.1156", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %701 = "mhlo.add"(%700, %cst_226) {name = "add.1157"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_227 = "std.constant"() {name = "constant.1178", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %702 = "mhlo.add"(%701, %cst_227) {name = "add.1179"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_228 = "std.constant"() {name = "constant.1200", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %703 = "mhlo.add"(%702, %cst_228) {name = "add.1201"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_229 = "std.constant"() {name = "constant.1222", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %704 = "mhlo.add"(%703, %cst_229) {name = "add.1223"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_230 = "std.constant"() {name = "constant.1244", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %705 = "mhlo.add"(%704, %cst_230) {name = "add.1245"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %706 = "mhlo.get_tuple_element"(%684) {index = 1 : i32, name = "get-tuple-element.993"} : (tuple<tensor<3xui64>, tensor<2x2xui32>>) -> tensor<2x2xui32>
        %707 = "mhlo.bitcast_convert"(%706) {name = "bitcast-convert.995"} : (tensor<2x2xui32>) -> tensor<2x2xi32>
        %708 = "mhlo.slice"(%707) {limit_indices = dense<[1, 2]> : tensor<2xi64>, start_indices = dense<0> : tensor<2xi64>, strides = dense<1> : tensor<2xi64>} : (tensor<2x2xi32>) -> tensor<1x2xi32>
        %709 = "mhlo.reshape"(%708) {name = "reshape.997"} : (tensor<1x2xi32>) -> tensor<2xi32>
        %710 = "mhlo.slice"(%709) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
        %711 = "mhlo.reshape"(%710) {name = "reshape.1001"} : (tensor<1xi32>) -> tensor<i32>
        %712 = "mhlo.convert"(%711) {name = "convert.1004"} : (tensor<i32>) -> tensor<ui64>
        %713 = "mhlo.slice"(%709) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
        %714 = "mhlo.reshape"(%713) {name = "reshape.1003"} : (tensor<1xi32>) -> tensor<i32>
        %715 = "mhlo.convert"(%714) {name = "convert.1005"} : (tensor<i32>) -> tensor<ui64>
        %cst_231 = "std.constant"() {name = "constant.1006", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %716 = "mhlo.shift_left"(%715, %cst_231) {name = "shift-left.1007"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %717 = "mhlo.or"(%712, %716) {name = "or.1008"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %718 = "mhlo.convert"(%717) {name = "convert.1011"} : (tensor<ui64>) -> tensor<ui32>
        %719 = "mhlo.convert"(%718) {name = "convert.1014"} : (tensor<ui32>) -> tensor<ui64>
        %720 = "mhlo.convert"(%719) {name = "convert.1016"} : (tensor<ui64>) -> tensor<ui32>
        %721 = "mhlo.convert"(%720) {name = "convert.1026"} : (tensor<ui32>) -> tensor<ui64>
        %cst_232 = "std.constant"() {name = "constant.1027", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %722 = "mhlo.multiply"(%721, %cst_232) {name = "multiply.1028"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_233 = "std.constant"() {name = "constant.1030", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %723 = "mhlo.shift_right_logical"(%722, %cst_233) {name = "shift-right-logical.1031"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %724 = "mhlo.convert"(%723) {name = "convert.1032"} : (tensor<ui64>) -> tensor<ui32>
        %cst_234 = "std.constant"() {name = "constant.1010", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %725 = "mhlo.shift_right_logical"(%717, %cst_234) {name = "shift-right-logical.1012"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %726 = "mhlo.convert"(%725) {name = "convert.1013"} : (tensor<ui64>) -> tensor<ui32>
        %727 = "mhlo.convert"(%726) {name = "convert.1015"} : (tensor<ui32>) -> tensor<ui64>
        %cst_235 = "std.constant"() {name = "constant.1021", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %728 = "mhlo.shift_right_logical"(%727, %cst_235) {name = "shift-right-logical.1022"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %729 = "mhlo.convert"(%728) {name = "convert.1023"} : (tensor<ui64>) -> tensor<ui32>
        %730 = "mhlo.xor"(%724, %729) {name = "xor.1042"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %731 = "mhlo.xor"(%730, %cst_220) {name = "xor.1043"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %732 = "mhlo.convert"(%731) {name = "convert.1055"} : (tensor<ui32>) -> tensor<ui64>
        %cst_236 = "std.constant"() {name = "constant.1056", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %733 = "mhlo.multiply"(%732, %cst_236) {name = "multiply.1057"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_237 = "std.constant"() {name = "constant.1059", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %734 = "mhlo.shift_right_logical"(%733, %cst_237) {name = "shift-right-logical.1060"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %735 = "mhlo.convert"(%734) {name = "convert.1061"} : (tensor<ui64>) -> tensor<ui32>
        %736 = "mhlo.convert"(%727) {name = "convert.1020"} : (tensor<ui64>) -> tensor<ui32>
        %737 = "mhlo.convert"(%736) {name = "convert.1033"} : (tensor<ui32>) -> tensor<ui64>
        %cst_238 = "std.constant"() {name = "constant.1034", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %738 = "mhlo.multiply"(%737, %cst_238) {name = "multiply.1035"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %739 = "mhlo.convert"(%738) {name = "convert.1036"} : (tensor<ui64>) -> tensor<ui32>
        %740 = "mhlo.xor"(%735, %739) {name = "xor.1062"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %741 = "mhlo.xor"(%740, %686) {name = "xor.1063"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %742 = "mhlo.convert"(%741) {name = "convert.1070"} : (tensor<ui32>) -> tensor<ui64>
        %cst_239 = "std.constant"() {name = "constant.1071", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %743 = "mhlo.multiply"(%742, %cst_239) {name = "multiply.1072"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_240 = "std.constant"() {name = "constant.1074", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %744 = "mhlo.shift_right_logical"(%743, %cst_240) {name = "shift-right-logical.1075"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %745 = "mhlo.convert"(%744) {name = "convert.1076"} : (tensor<ui64>) -> tensor<ui32>
        %cst_241 = "std.constant"() {name = "constant.1037", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %746 = "mhlo.shift_right_logical"(%738, %cst_241) {name = "shift-right-logical.1038"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %747 = "mhlo.convert"(%746) {name = "convert.1039"} : (tensor<ui64>) -> tensor<ui32>
        %cst_242 = "std.constant"() {name = "constant.1017", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %748 = "mhlo.shift_right_logical"(%719, %cst_242) {name = "shift-right-logical.1018"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %749 = "mhlo.convert"(%748) {name = "convert.1019"} : (tensor<ui64>) -> tensor<ui32>
        %750 = "mhlo.xor"(%747, %749) {name = "xor.1040"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %751 = "mhlo.xor"(%750, %cst_209) {name = "xor.1041"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %752 = "mhlo.convert"(%751) {name = "convert.1048"} : (tensor<ui32>) -> tensor<ui64>
        %cst_243 = "std.constant"() {name = "constant.1049", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %753 = "mhlo.multiply"(%752, %cst_243) {name = "multiply.1050"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %754 = "mhlo.convert"(%753) {name = "convert.1051"} : (tensor<ui64>) -> tensor<ui32>
        %755 = "mhlo.xor"(%745, %754) {name = "xor.1086"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %756 = "mhlo.xor"(%755, %697) {name = "xor.1087"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %757 = "mhlo.convert"(%756) {name = "convert.1099"} : (tensor<ui32>) -> tensor<ui64>
        %cst_244 = "std.constant"() {name = "constant.1100", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %758 = "mhlo.multiply"(%757, %cst_244) {name = "multiply.1101"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_245 = "std.constant"() {name = "constant.1103", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %759 = "mhlo.shift_right_logical"(%758, %cst_245) {name = "shift-right-logical.1104"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %760 = "mhlo.convert"(%759) {name = "convert.1105"} : (tensor<ui64>) -> tensor<ui32>
        %cst_246 = "std.constant"() {name = "constant.1052", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %761 = "mhlo.shift_right_logical"(%753, %cst_246) {name = "shift-right-logical.1053"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %762 = "mhlo.convert"(%761) {name = "convert.1054"} : (tensor<ui64>) -> tensor<ui32>
        %763 = "mhlo.convert"(%722) {name = "convert.1029"} : (tensor<ui64>) -> tensor<ui32>
        %764 = "mhlo.xor"(%762, %763) {name = "xor.1064"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %765 = "mhlo.xor"(%764, %696) {name = "xor.1065"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %766 = "mhlo.convert"(%765) {name = "convert.1077"} : (tensor<ui32>) -> tensor<ui64>
        %cst_247 = "std.constant"() {name = "constant.1078", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %767 = "mhlo.multiply"(%766, %cst_247) {name = "multiply.1079"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %768 = "mhlo.convert"(%767) {name = "convert.1080"} : (tensor<ui64>) -> tensor<ui32>
        %769 = "mhlo.xor"(%760, %768) {name = "xor.1106"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %770 = "mhlo.xor"(%769, %688) {name = "xor.1107"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %771 = "mhlo.convert"(%770) {name = "convert.1114"} : (tensor<ui32>) -> tensor<ui64>
        %cst_248 = "std.constant"() {name = "constant.1115", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %772 = "mhlo.multiply"(%771, %cst_248) {name = "multiply.1116"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_249 = "std.constant"() {name = "constant.1118", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %773 = "mhlo.shift_right_logical"(%772, %cst_249) {name = "shift-right-logical.1119"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %774 = "mhlo.convert"(%773) {name = "convert.1120"} : (tensor<ui64>) -> tensor<ui32>
        %cst_250 = "std.constant"() {name = "constant.1081", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %775 = "mhlo.shift_right_logical"(%767, %cst_250) {name = "shift-right-logical.1082"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %776 = "mhlo.convert"(%775) {name = "convert.1083"} : (tensor<ui64>) -> tensor<ui32>
        %777 = "mhlo.convert"(%733) {name = "convert.1058"} : (tensor<ui64>) -> tensor<ui32>
        %778 = "mhlo.xor"(%776, %777) {name = "xor.1084"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %779 = "mhlo.xor"(%778, %687) {name = "xor.1085"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %780 = "mhlo.convert"(%779) {name = "convert.1092"} : (tensor<ui32>) -> tensor<ui64>
        %cst_251 = "std.constant"() {name = "constant.1093", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %781 = "mhlo.multiply"(%780, %cst_251) {name = "multiply.1094"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %782 = "mhlo.convert"(%781) {name = "convert.1095"} : (tensor<ui64>) -> tensor<ui32>
        %783 = "mhlo.xor"(%774, %782) {name = "xor.1130"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %784 = "mhlo.xor"(%783, %699) {name = "xor.1131"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %785 = "mhlo.convert"(%784) {name = "convert.1143"} : (tensor<ui32>) -> tensor<ui64>
        %cst_252 = "std.constant"() {name = "constant.1144", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %786 = "mhlo.multiply"(%785, %cst_252) {name = "multiply.1145"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_253 = "std.constant"() {name = "constant.1147", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %787 = "mhlo.shift_right_logical"(%786, %cst_253) {name = "shift-right-logical.1148"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %788 = "mhlo.convert"(%787) {name = "convert.1149"} : (tensor<ui64>) -> tensor<ui32>
        %cst_254 = "std.constant"() {name = "constant.1096", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %789 = "mhlo.shift_right_logical"(%781, %cst_254) {name = "shift-right-logical.1097"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %790 = "mhlo.convert"(%789) {name = "convert.1098"} : (tensor<ui64>) -> tensor<ui32>
        %791 = "mhlo.convert"(%743) {name = "convert.1073"} : (tensor<ui64>) -> tensor<ui32>
        %792 = "mhlo.xor"(%790, %791) {name = "xor.1108"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %793 = "mhlo.xor"(%792, %698) {name = "xor.1109"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %794 = "mhlo.convert"(%793) {name = "convert.1121"} : (tensor<ui32>) -> tensor<ui64>
        %cst_255 = "std.constant"() {name = "constant.1122", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %795 = "mhlo.multiply"(%794, %cst_255) {name = "multiply.1123"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %796 = "mhlo.convert"(%795) {name = "convert.1124"} : (tensor<ui64>) -> tensor<ui32>
        %797 = "mhlo.xor"(%788, %796) {name = "xor.1150"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %798 = "mhlo.xor"(%797, %690) {name = "xor.1151"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %799 = "mhlo.convert"(%798) {name = "convert.1158"} : (tensor<ui32>) -> tensor<ui64>
        %cst_256 = "std.constant"() {name = "constant.1159", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %800 = "mhlo.multiply"(%799, %cst_256) {name = "multiply.1160"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_257 = "std.constant"() {name = "constant.1162", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %801 = "mhlo.shift_right_logical"(%800, %cst_257) {name = "shift-right-logical.1163"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %802 = "mhlo.convert"(%801) {name = "convert.1164"} : (tensor<ui64>) -> tensor<ui32>
        %cst_258 = "std.constant"() {name = "constant.1125", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %803 = "mhlo.shift_right_logical"(%795, %cst_258) {name = "shift-right-logical.1126"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %804 = "mhlo.convert"(%803) {name = "convert.1127"} : (tensor<ui64>) -> tensor<ui32>
        %805 = "mhlo.convert"(%758) {name = "convert.1102"} : (tensor<ui64>) -> tensor<ui32>
        %806 = "mhlo.xor"(%804, %805) {name = "xor.1128"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %807 = "mhlo.xor"(%806, %689) {name = "xor.1129"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %808 = "mhlo.convert"(%807) {name = "convert.1136"} : (tensor<ui32>) -> tensor<ui64>
        %cst_259 = "std.constant"() {name = "constant.1137", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %809 = "mhlo.multiply"(%808, %cst_259) {name = "multiply.1138"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %810 = "mhlo.convert"(%809) {name = "convert.1139"} : (tensor<ui64>) -> tensor<ui32>
        %811 = "mhlo.xor"(%802, %810) {name = "xor.1174"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %812 = "mhlo.xor"(%811, %701) {name = "xor.1175"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %813 = "mhlo.convert"(%812) {name = "convert.1187"} : (tensor<ui32>) -> tensor<ui64>
        %cst_260 = "std.constant"() {name = "constant.1188", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %814 = "mhlo.multiply"(%813, %cst_260) {name = "multiply.1189"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_261 = "std.constant"() {name = "constant.1191", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %815 = "mhlo.shift_right_logical"(%814, %cst_261) {name = "shift-right-logical.1192"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %816 = "mhlo.convert"(%815) {name = "convert.1193"} : (tensor<ui64>) -> tensor<ui32>
        %cst_262 = "std.constant"() {name = "constant.1140", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %817 = "mhlo.shift_right_logical"(%809, %cst_262) {name = "shift-right-logical.1141"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %818 = "mhlo.convert"(%817) {name = "convert.1142"} : (tensor<ui64>) -> tensor<ui32>
        %819 = "mhlo.convert"(%772) {name = "convert.1117"} : (tensor<ui64>) -> tensor<ui32>
        %820 = "mhlo.xor"(%818, %819) {name = "xor.1152"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %821 = "mhlo.xor"(%820, %700) {name = "xor.1153"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %822 = "mhlo.convert"(%821) {name = "convert.1165"} : (tensor<ui32>) -> tensor<ui64>
        %cst_263 = "std.constant"() {name = "constant.1166", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %823 = "mhlo.multiply"(%822, %cst_263) {name = "multiply.1167"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %824 = "mhlo.convert"(%823) {name = "convert.1168"} : (tensor<ui64>) -> tensor<ui32>
        %825 = "mhlo.xor"(%816, %824) {name = "xor.1194"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %826 = "mhlo.xor"(%825, %692) {name = "xor.1195"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %827 = "mhlo.convert"(%826) {name = "convert.1202"} : (tensor<ui32>) -> tensor<ui64>
        %cst_264 = "std.constant"() {name = "constant.1203", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %828 = "mhlo.multiply"(%827, %cst_264) {name = "multiply.1204"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_265 = "std.constant"() {name = "constant.1206", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %829 = "mhlo.shift_right_logical"(%828, %cst_265) {name = "shift-right-logical.1207"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %830 = "mhlo.convert"(%829) {name = "convert.1208"} : (tensor<ui64>) -> tensor<ui32>
        %cst_266 = "std.constant"() {name = "constant.1169", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %831 = "mhlo.shift_right_logical"(%823, %cst_266) {name = "shift-right-logical.1170"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %832 = "mhlo.convert"(%831) {name = "convert.1171"} : (tensor<ui64>) -> tensor<ui32>
        %833 = "mhlo.convert"(%786) {name = "convert.1146"} : (tensor<ui64>) -> tensor<ui32>
        %834 = "mhlo.xor"(%832, %833) {name = "xor.1172"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %835 = "mhlo.xor"(%834, %691) {name = "xor.1173"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %836 = "mhlo.convert"(%835) {name = "convert.1180"} : (tensor<ui32>) -> tensor<ui64>
        %cst_267 = "std.constant"() {name = "constant.1181", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %837 = "mhlo.multiply"(%836, %cst_267) {name = "multiply.1182"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %838 = "mhlo.convert"(%837) {name = "convert.1183"} : (tensor<ui64>) -> tensor<ui32>
        %839 = "mhlo.xor"(%830, %838) {name = "xor.1218"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %840 = "mhlo.xor"(%839, %703) {name = "xor.1219"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %841 = "mhlo.convert"(%840) {name = "convert.1231"} : (tensor<ui32>) -> tensor<ui64>
        %cst_268 = "std.constant"() {name = "constant.1232", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %842 = "mhlo.multiply"(%841, %cst_268) {name = "multiply.1233"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_269 = "std.constant"() {name = "constant.1235", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %843 = "mhlo.shift_right_logical"(%842, %cst_269) {name = "shift-right-logical.1236"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %844 = "mhlo.convert"(%843) {name = "convert.1237"} : (tensor<ui64>) -> tensor<ui32>
        %cst_270 = "std.constant"() {name = "constant.1184", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %845 = "mhlo.shift_right_logical"(%837, %cst_270) {name = "shift-right-logical.1185"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %846 = "mhlo.convert"(%845) {name = "convert.1186"} : (tensor<ui64>) -> tensor<ui32>
        %847 = "mhlo.convert"(%800) {name = "convert.1161"} : (tensor<ui64>) -> tensor<ui32>
        %848 = "mhlo.xor"(%846, %847) {name = "xor.1196"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %849 = "mhlo.xor"(%848, %702) {name = "xor.1197"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %850 = "mhlo.convert"(%849) {name = "convert.1209"} : (tensor<ui32>) -> tensor<ui64>
        %cst_271 = "std.constant"() {name = "constant.1210", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %851 = "mhlo.multiply"(%850, %cst_271) {name = "multiply.1211"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %852 = "mhlo.convert"(%851) {name = "convert.1212"} : (tensor<ui64>) -> tensor<ui32>
        %853 = "mhlo.xor"(%844, %852) {name = "xor.1238"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %854 = "mhlo.xor"(%853, %694) {name = "xor.1239"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %855 = "mhlo.convert"(%854) {name = "convert.1260"} : (tensor<ui32>) -> tensor<ui64>
        %856 = "mhlo.convert"(%842) {name = "convert.1234"} : (tensor<ui64>) -> tensor<ui32>
        %857 = "mhlo.convert"(%856) {name = "convert.1261"} : (tensor<ui32>) -> tensor<ui64>
        %cst_272 = "std.constant"() {name = "constant.1262", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %858 = "mhlo.shift_left"(%857, %cst_272) {name = "shift-left.1263"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %859 = "mhlo.or"(%855, %858) {name = "or.1264"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %860 = "mhlo.reshape"(%859) {name = "reshape.1265"} : (tensor<ui64>) -> tensor<1xui64>
        %cst_273 = "std.constant"() {name = "constant.1246", value = dense<0> : tensor<ui32>} : () -> tensor<ui32>
        %861 = "mhlo.convert"(%cst_273) {name = "convert.1247"} : (tensor<ui32>) -> tensor<ui64>
        %862 = "mhlo.convert"(%cst_273) {name = "convert.1248"} : (tensor<ui32>) -> tensor<ui64>
        %cst_274 = "std.constant"() {name = "constant.1249", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %863 = "mhlo.shift_left"(%862, %cst_274) {name = "shift-left.1250"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %864 = "mhlo.or"(%861, %863) {name = "or.1251"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %865 = "mhlo.reshape"(%864) {name = "reshape.1257"} : (tensor<ui64>) -> tensor<1xui64>
        %cst_275 = "std.constant"() {name = "constant.1213", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %866 = "mhlo.shift_right_logical"(%851, %cst_275) {name = "shift-right-logical.1214"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %867 = "mhlo.convert"(%866) {name = "convert.1215"} : (tensor<ui64>) -> tensor<ui32>
        %868 = "mhlo.convert"(%814) {name = "convert.1190"} : (tensor<ui64>) -> tensor<ui32>
        %869 = "mhlo.xor"(%867, %868) {name = "xor.1216"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %870 = "mhlo.xor"(%869, %693) {name = "xor.1217"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %871 = "mhlo.convert"(%870) {name = "convert.1224"} : (tensor<ui32>) -> tensor<ui64>
        %cst_276 = "std.constant"() {name = "constant.1225", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %872 = "mhlo.multiply"(%871, %cst_276) {name = "multiply.1226"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_277 = "std.constant"() {name = "constant.1228", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %873 = "mhlo.shift_right_logical"(%872, %cst_277) {name = "shift-right-logical.1229"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %874 = "mhlo.convert"(%873) {name = "convert.1230"} : (tensor<ui64>) -> tensor<ui32>
        %875 = "mhlo.convert"(%828) {name = "convert.1205"} : (tensor<ui64>) -> tensor<ui32>
        %876 = "mhlo.xor"(%874, %875) {name = "xor.1240"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %877 = "mhlo.xor"(%876, %704) {name = "xor.1241"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %878 = "mhlo.convert"(%877) {name = "convert.1252"} : (tensor<ui32>) -> tensor<ui64>
        %879 = "mhlo.convert"(%872) {name = "convert.1227"} : (tensor<ui64>) -> tensor<ui32>
        %880 = "mhlo.convert"(%879) {name = "convert.1253"} : (tensor<ui32>) -> tensor<ui64>
        %cst_278 = "std.constant"() {name = "constant.1254", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %881 = "mhlo.shift_left"(%880, %cst_278) {name = "shift-left.1255"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %882 = "mhlo.or"(%878, %881) {name = "or.1256"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %883 = "mhlo.reshape"(%882) {name = "reshape.1258"} : (tensor<ui64>) -> tensor<1xui64>
        %884 = "mhlo.concatenate"(%865, %883) {dimension = 0 : i64} : (tensor<1xui64>, tensor<1xui64>) -> tensor<2xui64>
        %885 = "mhlo.concatenate"(%860, %884) {dimension = 0 : i64} : (tensor<1xui64>, tensor<2xui64>) -> tensor<3xui64>
        %886 = "mhlo.rng_bit_generator"(%885) {rng_algorithm = 2 : i32} : (tensor<3xui64>) -> tuple<tensor<3xui64>, tensor<2x2xui32>>
        %887 = "mhlo.get_tuple_element"(%886) {index = 0 : i32, name = "get-tuple-element.1269"} : (tuple<tensor<3xui64>, tensor<2x2xui32>>) -> tensor<3xui64>
        %cst_279 = "std.constant"() {name = "constant.1284", value = dense<0> : tensor<ui64>} : () -> tensor<ui64>
        %cst_280 = "std.constant"() {name = "constant.1299", value = dense<1053357856> : tensor<ui32>} : () -> tensor<ui32>
        %cst_281 = "std.constant"() {name = "constant.1319", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %888 = "mhlo.add"(%cst_280, %cst_281) {name = "add.1320"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_282 = "std.constant"() {name = "constant.1341", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %889 = "mhlo.add"(%888, %cst_282) {name = "add.1342"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_283 = "std.constant"() {name = "constant.1363", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %890 = "mhlo.add"(%889, %cst_283) {name = "add.1364"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_284 = "std.constant"() {name = "constant.1385", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %891 = "mhlo.add"(%890, %cst_284) {name = "add.1386"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_285 = "std.constant"() {name = "constant.1407", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %892 = "mhlo.add"(%891, %cst_285) {name = "add.1408"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_286 = "std.constant"() {name = "constant.1429", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %893 = "mhlo.add"(%892, %cst_286) {name = "add.1430"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_287 = "std.constant"() {name = "constant.1451", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %894 = "mhlo.add"(%893, %cst_287) {name = "add.1452"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_288 = "std.constant"() {name = "constant.1473", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %895 = "mhlo.add"(%894, %cst_288) {name = "add.1474"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_289 = "std.constant"() {name = "constant.1495", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %896 = "mhlo.add"(%895, %cst_289) {name = "add.1496"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_290 = "std.constant"() {name = "constant.1517", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %897 = "mhlo.add"(%896, %cst_290) {name = "add.1518"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_291 = "std.constant"() {name = "constant.1300", value = dense<38149673> : tensor<ui32>} : () -> tensor<ui32>
        %cst_292 = "std.constant"() {name = "constant.1321", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %898 = "mhlo.add"(%cst_291, %cst_292) {name = "add.1322"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_293 = "std.constant"() {name = "constant.1343", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %899 = "mhlo.add"(%898, %cst_293) {name = "add.1344"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_294 = "std.constant"() {name = "constant.1365", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %900 = "mhlo.add"(%899, %cst_294) {name = "add.1366"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_295 = "std.constant"() {name = "constant.1387", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %901 = "mhlo.add"(%900, %cst_295) {name = "add.1388"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_296 = "std.constant"() {name = "constant.1409", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %902 = "mhlo.add"(%901, %cst_296) {name = "add.1410"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_297 = "std.constant"() {name = "constant.1431", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %903 = "mhlo.add"(%902, %cst_297) {name = "add.1432"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_298 = "std.constant"() {name = "constant.1453", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %904 = "mhlo.add"(%903, %cst_298) {name = "add.1454"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_299 = "std.constant"() {name = "constant.1475", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %905 = "mhlo.add"(%904, %cst_299) {name = "add.1476"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_300 = "std.constant"() {name = "constant.1497", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %906 = "mhlo.add"(%905, %cst_300) {name = "add.1498"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_301 = "std.constant"() {name = "constant.1519", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %907 = "mhlo.add"(%906, %cst_301) {name = "add.1520"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %908 = "mhlo.get_tuple_element"(%886) {index = 1 : i32, name = "get-tuple-element.1268"} : (tuple<tensor<3xui64>, tensor<2x2xui32>>) -> tensor<2x2xui32>
        %909 = "mhlo.bitcast_convert"(%908) {name = "bitcast-convert.1270"} : (tensor<2x2xui32>) -> tensor<2x2xi32>
        %910 = "mhlo.slice"(%909) {limit_indices = dense<[1, 2]> : tensor<2xi64>, start_indices = dense<0> : tensor<2xi64>, strides = dense<1> : tensor<2xi64>} : (tensor<2x2xi32>) -> tensor<1x2xi32>
        %911 = "mhlo.reshape"(%910) {name = "reshape.1272"} : (tensor<1x2xi32>) -> tensor<2xi32>
        %912 = "mhlo.slice"(%911) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
        %913 = "mhlo.reshape"(%912) {name = "reshape.1276"} : (tensor<1xi32>) -> tensor<i32>
        %914 = "mhlo.convert"(%913) {name = "convert.1279"} : (tensor<i32>) -> tensor<ui64>
        %915 = "mhlo.slice"(%911) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
        %916 = "mhlo.reshape"(%915) {name = "reshape.1278"} : (tensor<1xi32>) -> tensor<i32>
        %917 = "mhlo.convert"(%916) {name = "convert.1280"} : (tensor<i32>) -> tensor<ui64>
        %cst_302 = "std.constant"() {name = "constant.1281", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %918 = "mhlo.shift_left"(%917, %cst_302) {name = "shift-left.1282"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %919 = "mhlo.or"(%914, %918) {name = "or.1283"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %920 = "mhlo.convert"(%919) {name = "convert.1286"} : (tensor<ui64>) -> tensor<ui32>
        %921 = "mhlo.convert"(%920) {name = "convert.1289"} : (tensor<ui32>) -> tensor<ui64>
        %922 = "mhlo.convert"(%921) {name = "convert.1291"} : (tensor<ui64>) -> tensor<ui32>
        %923 = "mhlo.convert"(%922) {name = "convert.1301"} : (tensor<ui32>) -> tensor<ui64>
        %cst_303 = "std.constant"() {name = "constant.1302", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %924 = "mhlo.multiply"(%923, %cst_303) {name = "multiply.1303"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_304 = "std.constant"() {name = "constant.1305", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %925 = "mhlo.shift_right_logical"(%924, %cst_304) {name = "shift-right-logical.1306"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %926 = "mhlo.convert"(%925) {name = "convert.1307"} : (tensor<ui64>) -> tensor<ui32>
        %cst_305 = "std.constant"() {name = "constant.1285", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %927 = "mhlo.shift_right_logical"(%919, %cst_305) {name = "shift-right-logical.1287"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %928 = "mhlo.convert"(%927) {name = "convert.1288"} : (tensor<ui64>) -> tensor<ui32>
        %929 = "mhlo.convert"(%928) {name = "convert.1290"} : (tensor<ui32>) -> tensor<ui64>
        %cst_306 = "std.constant"() {name = "constant.1296", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %930 = "mhlo.shift_right_logical"(%929, %cst_306) {name = "shift-right-logical.1297"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %931 = "mhlo.convert"(%930) {name = "convert.1298"} : (tensor<ui64>) -> tensor<ui32>
        %932 = "mhlo.xor"(%926, %931) {name = "xor.1317"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %933 = "mhlo.xor"(%932, %cst_291) {name = "xor.1318"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %934 = "mhlo.convert"(%933) {name = "convert.1330"} : (tensor<ui32>) -> tensor<ui64>
        %cst_307 = "std.constant"() {name = "constant.1331", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %935 = "mhlo.multiply"(%934, %cst_307) {name = "multiply.1332"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_308 = "std.constant"() {name = "constant.1334", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %936 = "mhlo.shift_right_logical"(%935, %cst_308) {name = "shift-right-logical.1335"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %937 = "mhlo.convert"(%936) {name = "convert.1336"} : (tensor<ui64>) -> tensor<ui32>
        %938 = "mhlo.convert"(%929) {name = "convert.1295"} : (tensor<ui64>) -> tensor<ui32>
        %939 = "mhlo.convert"(%938) {name = "convert.1308"} : (tensor<ui32>) -> tensor<ui64>
        %cst_309 = "std.constant"() {name = "constant.1309", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %940 = "mhlo.multiply"(%939, %cst_309) {name = "multiply.1310"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %941 = "mhlo.convert"(%940) {name = "convert.1311"} : (tensor<ui64>) -> tensor<ui32>
        %942 = "mhlo.xor"(%937, %941) {name = "xor.1337"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %943 = "mhlo.xor"(%942, %888) {name = "xor.1338"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %944 = "mhlo.convert"(%943) {name = "convert.1345"} : (tensor<ui32>) -> tensor<ui64>
        %cst_310 = "std.constant"() {name = "constant.1346", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %945 = "mhlo.multiply"(%944, %cst_310) {name = "multiply.1347"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_311 = "std.constant"() {name = "constant.1349", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %946 = "mhlo.shift_right_logical"(%945, %cst_311) {name = "shift-right-logical.1350"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %947 = "mhlo.convert"(%946) {name = "convert.1351"} : (tensor<ui64>) -> tensor<ui32>
        %cst_312 = "std.constant"() {name = "constant.1312", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %948 = "mhlo.shift_right_logical"(%940, %cst_312) {name = "shift-right-logical.1313"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %949 = "mhlo.convert"(%948) {name = "convert.1314"} : (tensor<ui64>) -> tensor<ui32>
        %cst_313 = "std.constant"() {name = "constant.1292", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %950 = "mhlo.shift_right_logical"(%921, %cst_313) {name = "shift-right-logical.1293"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %951 = "mhlo.convert"(%950) {name = "convert.1294"} : (tensor<ui64>) -> tensor<ui32>
        %952 = "mhlo.xor"(%949, %951) {name = "xor.1315"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %953 = "mhlo.xor"(%952, %cst_280) {name = "xor.1316"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %954 = "mhlo.convert"(%953) {name = "convert.1323"} : (tensor<ui32>) -> tensor<ui64>
        %cst_314 = "std.constant"() {name = "constant.1324", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %955 = "mhlo.multiply"(%954, %cst_314) {name = "multiply.1325"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %956 = "mhlo.convert"(%955) {name = "convert.1326"} : (tensor<ui64>) -> tensor<ui32>
        %957 = "mhlo.xor"(%947, %956) {name = "xor.1361"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %958 = "mhlo.xor"(%957, %899) {name = "xor.1362"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %959 = "mhlo.convert"(%958) {name = "convert.1374"} : (tensor<ui32>) -> tensor<ui64>
        %cst_315 = "std.constant"() {name = "constant.1375", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %960 = "mhlo.multiply"(%959, %cst_315) {name = "multiply.1376"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_316 = "std.constant"() {name = "constant.1378", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %961 = "mhlo.shift_right_logical"(%960, %cst_316) {name = "shift-right-logical.1379"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %962 = "mhlo.convert"(%961) {name = "convert.1380"} : (tensor<ui64>) -> tensor<ui32>
        %cst_317 = "std.constant"() {name = "constant.1327", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %963 = "mhlo.shift_right_logical"(%955, %cst_317) {name = "shift-right-logical.1328"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %964 = "mhlo.convert"(%963) {name = "convert.1329"} : (tensor<ui64>) -> tensor<ui32>
        %965 = "mhlo.convert"(%924) {name = "convert.1304"} : (tensor<ui64>) -> tensor<ui32>
        %966 = "mhlo.xor"(%964, %965) {name = "xor.1339"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %967 = "mhlo.xor"(%966, %898) {name = "xor.1340"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %968 = "mhlo.convert"(%967) {name = "convert.1352"} : (tensor<ui32>) -> tensor<ui64>
        %cst_318 = "std.constant"() {name = "constant.1353", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %969 = "mhlo.multiply"(%968, %cst_318) {name = "multiply.1354"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %970 = "mhlo.convert"(%969) {name = "convert.1355"} : (tensor<ui64>) -> tensor<ui32>
        %971 = "mhlo.xor"(%962, %970) {name = "xor.1381"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %972 = "mhlo.xor"(%971, %890) {name = "xor.1382"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %973 = "mhlo.convert"(%972) {name = "convert.1389"} : (tensor<ui32>) -> tensor<ui64>
        %cst_319 = "std.constant"() {name = "constant.1390", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %974 = "mhlo.multiply"(%973, %cst_319) {name = "multiply.1391"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_320 = "std.constant"() {name = "constant.1393", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %975 = "mhlo.shift_right_logical"(%974, %cst_320) {name = "shift-right-logical.1394"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %976 = "mhlo.convert"(%975) {name = "convert.1395"} : (tensor<ui64>) -> tensor<ui32>
        %cst_321 = "std.constant"() {name = "constant.1356", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %977 = "mhlo.shift_right_logical"(%969, %cst_321) {name = "shift-right-logical.1357"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %978 = "mhlo.convert"(%977) {name = "convert.1358"} : (tensor<ui64>) -> tensor<ui32>
        %979 = "mhlo.convert"(%935) {name = "convert.1333"} : (tensor<ui64>) -> tensor<ui32>
        %980 = "mhlo.xor"(%978, %979) {name = "xor.1359"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %981 = "mhlo.xor"(%980, %889) {name = "xor.1360"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %982 = "mhlo.convert"(%981) {name = "convert.1367"} : (tensor<ui32>) -> tensor<ui64>
        %cst_322 = "std.constant"() {name = "constant.1368", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %983 = "mhlo.multiply"(%982, %cst_322) {name = "multiply.1369"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %984 = "mhlo.convert"(%983) {name = "convert.1370"} : (tensor<ui64>) -> tensor<ui32>
        %985 = "mhlo.xor"(%976, %984) {name = "xor.1405"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %986 = "mhlo.xor"(%985, %901) {name = "xor.1406"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %987 = "mhlo.convert"(%986) {name = "convert.1418"} : (tensor<ui32>) -> tensor<ui64>
        %cst_323 = "std.constant"() {name = "constant.1419", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %988 = "mhlo.multiply"(%987, %cst_323) {name = "multiply.1420"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_324 = "std.constant"() {name = "constant.1422", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %989 = "mhlo.shift_right_logical"(%988, %cst_324) {name = "shift-right-logical.1423"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %990 = "mhlo.convert"(%989) {name = "convert.1424"} : (tensor<ui64>) -> tensor<ui32>
        %cst_325 = "std.constant"() {name = "constant.1371", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %991 = "mhlo.shift_right_logical"(%983, %cst_325) {name = "shift-right-logical.1372"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %992 = "mhlo.convert"(%991) {name = "convert.1373"} : (tensor<ui64>) -> tensor<ui32>
        %993 = "mhlo.convert"(%945) {name = "convert.1348"} : (tensor<ui64>) -> tensor<ui32>
        %994 = "mhlo.xor"(%992, %993) {name = "xor.1383"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %995 = "mhlo.xor"(%994, %900) {name = "xor.1384"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %996 = "mhlo.convert"(%995) {name = "convert.1396"} : (tensor<ui32>) -> tensor<ui64>
        %cst_326 = "std.constant"() {name = "constant.1397", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %997 = "mhlo.multiply"(%996, %cst_326) {name = "multiply.1398"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %998 = "mhlo.convert"(%997) {name = "convert.1399"} : (tensor<ui64>) -> tensor<ui32>
        %999 = "mhlo.xor"(%990, %998) {name = "xor.1425"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1000 = "mhlo.xor"(%999, %892) {name = "xor.1426"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1001 = "mhlo.convert"(%1000) {name = "convert.1433"} : (tensor<ui32>) -> tensor<ui64>
        %cst_327 = "std.constant"() {name = "constant.1434", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %1002 = "mhlo.multiply"(%1001, %cst_327) {name = "multiply.1435"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_328 = "std.constant"() {name = "constant.1437", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1003 = "mhlo.shift_right_logical"(%1002, %cst_328) {name = "shift-right-logical.1438"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1004 = "mhlo.convert"(%1003) {name = "convert.1439"} : (tensor<ui64>) -> tensor<ui32>
        %cst_329 = "std.constant"() {name = "constant.1400", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1005 = "mhlo.shift_right_logical"(%997, %cst_329) {name = "shift-right-logical.1401"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1006 = "mhlo.convert"(%1005) {name = "convert.1402"} : (tensor<ui64>) -> tensor<ui32>
        %1007 = "mhlo.convert"(%960) {name = "convert.1377"} : (tensor<ui64>) -> tensor<ui32>
        %1008 = "mhlo.xor"(%1006, %1007) {name = "xor.1403"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1009 = "mhlo.xor"(%1008, %891) {name = "xor.1404"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1010 = "mhlo.convert"(%1009) {name = "convert.1411"} : (tensor<ui32>) -> tensor<ui64>
        %cst_330 = "std.constant"() {name = "constant.1412", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %1011 = "mhlo.multiply"(%1010, %cst_330) {name = "multiply.1413"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1012 = "mhlo.convert"(%1011) {name = "convert.1414"} : (tensor<ui64>) -> tensor<ui32>
        %1013 = "mhlo.xor"(%1004, %1012) {name = "xor.1449"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1014 = "mhlo.xor"(%1013, %903) {name = "xor.1450"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1015 = "mhlo.convert"(%1014) {name = "convert.1462"} : (tensor<ui32>) -> tensor<ui64>
        %cst_331 = "std.constant"() {name = "constant.1463", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %1016 = "mhlo.multiply"(%1015, %cst_331) {name = "multiply.1464"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_332 = "std.constant"() {name = "constant.1466", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1017 = "mhlo.shift_right_logical"(%1016, %cst_332) {name = "shift-right-logical.1467"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1018 = "mhlo.convert"(%1017) {name = "convert.1468"} : (tensor<ui64>) -> tensor<ui32>
        %cst_333 = "std.constant"() {name = "constant.1415", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1019 = "mhlo.shift_right_logical"(%1011, %cst_333) {name = "shift-right-logical.1416"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1020 = "mhlo.convert"(%1019) {name = "convert.1417"} : (tensor<ui64>) -> tensor<ui32>
        %1021 = "mhlo.convert"(%974) {name = "convert.1392"} : (tensor<ui64>) -> tensor<ui32>
        %1022 = "mhlo.xor"(%1020, %1021) {name = "xor.1427"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1023 = "mhlo.xor"(%1022, %902) {name = "xor.1428"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1024 = "mhlo.convert"(%1023) {name = "convert.1440"} : (tensor<ui32>) -> tensor<ui64>
        %cst_334 = "std.constant"() {name = "constant.1441", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %1025 = "mhlo.multiply"(%1024, %cst_334) {name = "multiply.1442"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1026 = "mhlo.convert"(%1025) {name = "convert.1443"} : (tensor<ui64>) -> tensor<ui32>
        %1027 = "mhlo.xor"(%1018, %1026) {name = "xor.1469"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1028 = "mhlo.xor"(%1027, %894) {name = "xor.1470"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1029 = "mhlo.convert"(%1028) {name = "convert.1477"} : (tensor<ui32>) -> tensor<ui64>
        %cst_335 = "std.constant"() {name = "constant.1478", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %1030 = "mhlo.multiply"(%1029, %cst_335) {name = "multiply.1479"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_336 = "std.constant"() {name = "constant.1481", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1031 = "mhlo.shift_right_logical"(%1030, %cst_336) {name = "shift-right-logical.1482"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1032 = "mhlo.convert"(%1031) {name = "convert.1483"} : (tensor<ui64>) -> tensor<ui32>
        %cst_337 = "std.constant"() {name = "constant.1444", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1033 = "mhlo.shift_right_logical"(%1025, %cst_337) {name = "shift-right-logical.1445"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1034 = "mhlo.convert"(%1033) {name = "convert.1446"} : (tensor<ui64>) -> tensor<ui32>
        %1035 = "mhlo.convert"(%988) {name = "convert.1421"} : (tensor<ui64>) -> tensor<ui32>
        %1036 = "mhlo.xor"(%1034, %1035) {name = "xor.1447"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1037 = "mhlo.xor"(%1036, %893) {name = "xor.1448"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1038 = "mhlo.convert"(%1037) {name = "convert.1455"} : (tensor<ui32>) -> tensor<ui64>
        %cst_338 = "std.constant"() {name = "constant.1456", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %1039 = "mhlo.multiply"(%1038, %cst_338) {name = "multiply.1457"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1040 = "mhlo.convert"(%1039) {name = "convert.1458"} : (tensor<ui64>) -> tensor<ui32>
        %1041 = "mhlo.xor"(%1032, %1040) {name = "xor.1493"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1042 = "mhlo.xor"(%1041, %905) {name = "xor.1494"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1043 = "mhlo.convert"(%1042) {name = "convert.1506"} : (tensor<ui32>) -> tensor<ui64>
        %cst_339 = "std.constant"() {name = "constant.1507", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %1044 = "mhlo.multiply"(%1043, %cst_339) {name = "multiply.1508"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_340 = "std.constant"() {name = "constant.1510", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1045 = "mhlo.shift_right_logical"(%1044, %cst_340) {name = "shift-right-logical.1511"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1046 = "mhlo.convert"(%1045) {name = "convert.1512"} : (tensor<ui64>) -> tensor<ui32>
        %cst_341 = "std.constant"() {name = "constant.1459", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1047 = "mhlo.shift_right_logical"(%1039, %cst_341) {name = "shift-right-logical.1460"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1048 = "mhlo.convert"(%1047) {name = "convert.1461"} : (tensor<ui64>) -> tensor<ui32>
        %1049 = "mhlo.convert"(%1002) {name = "convert.1436"} : (tensor<ui64>) -> tensor<ui32>
        %1050 = "mhlo.xor"(%1048, %1049) {name = "xor.1471"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1051 = "mhlo.xor"(%1050, %904) {name = "xor.1472"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1052 = "mhlo.convert"(%1051) {name = "convert.1484"} : (tensor<ui32>) -> tensor<ui64>
        %cst_342 = "std.constant"() {name = "constant.1485", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %1053 = "mhlo.multiply"(%1052, %cst_342) {name = "multiply.1486"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1054 = "mhlo.convert"(%1053) {name = "convert.1487"} : (tensor<ui64>) -> tensor<ui32>
        %1055 = "mhlo.xor"(%1046, %1054) {name = "xor.1513"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1056 = "mhlo.xor"(%1055, %896) {name = "xor.1514"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1057 = "mhlo.convert"(%1056) {name = "convert.1535"} : (tensor<ui32>) -> tensor<ui64>
        %1058 = "mhlo.convert"(%1044) {name = "convert.1509"} : (tensor<ui64>) -> tensor<ui32>
        %1059 = "mhlo.convert"(%1058) {name = "convert.1536"} : (tensor<ui32>) -> tensor<ui64>
        %cst_343 = "std.constant"() {name = "constant.1537", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1060 = "mhlo.shift_left"(%1059, %cst_343) {name = "shift-left.1538"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1061 = "mhlo.or"(%1057, %1060) {name = "or.1539"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1062 = "mhlo.reshape"(%1061) {name = "reshape.1540"} : (tensor<ui64>) -> tensor<1xui64>
        %cst_344 = "std.constant"() {name = "constant.1521", value = dense<0> : tensor<ui32>} : () -> tensor<ui32>
        %1063 = "mhlo.convert"(%cst_344) {name = "convert.1522"} : (tensor<ui32>) -> tensor<ui64>
        %1064 = "mhlo.convert"(%cst_344) {name = "convert.1523"} : (tensor<ui32>) -> tensor<ui64>
        %cst_345 = "std.constant"() {name = "constant.1524", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1065 = "mhlo.shift_left"(%1064, %cst_345) {name = "shift-left.1525"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1066 = "mhlo.or"(%1063, %1065) {name = "or.1526"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1067 = "mhlo.reshape"(%1066) {name = "reshape.1532"} : (tensor<ui64>) -> tensor<1xui64>
        %cst_346 = "std.constant"() {name = "constant.1488", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1068 = "mhlo.shift_right_logical"(%1053, %cst_346) {name = "shift-right-logical.1489"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1069 = "mhlo.convert"(%1068) {name = "convert.1490"} : (tensor<ui64>) -> tensor<ui32>
        %1070 = "mhlo.convert"(%1016) {name = "convert.1465"} : (tensor<ui64>) -> tensor<ui32>
        %1071 = "mhlo.xor"(%1069, %1070) {name = "xor.1491"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1072 = "mhlo.xor"(%1071, %895) {name = "xor.1492"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1073 = "mhlo.convert"(%1072) {name = "convert.1499"} : (tensor<ui32>) -> tensor<ui64>
        %cst_347 = "std.constant"() {name = "constant.1500", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %1074 = "mhlo.multiply"(%1073, %cst_347) {name = "multiply.1501"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_348 = "std.constant"() {name = "constant.1503", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1075 = "mhlo.shift_right_logical"(%1074, %cst_348) {name = "shift-right-logical.1504"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1076 = "mhlo.convert"(%1075) {name = "convert.1505"} : (tensor<ui64>) -> tensor<ui32>
        %1077 = "mhlo.convert"(%1030) {name = "convert.1480"} : (tensor<ui64>) -> tensor<ui32>
        %1078 = "mhlo.xor"(%1076, %1077) {name = "xor.1515"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1079 = "mhlo.xor"(%1078, %906) {name = "xor.1516"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1080 = "mhlo.convert"(%1079) {name = "convert.1527"} : (tensor<ui32>) -> tensor<ui64>
        %1081 = "mhlo.convert"(%1074) {name = "convert.1502"} : (tensor<ui64>) -> tensor<ui32>
        %1082 = "mhlo.convert"(%1081) {name = "convert.1528"} : (tensor<ui32>) -> tensor<ui64>
        %cst_349 = "std.constant"() {name = "constant.1529", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1083 = "mhlo.shift_left"(%1082, %cst_349) {name = "shift-left.1530"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1084 = "mhlo.or"(%1080, %1083) {name = "or.1531"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1085 = "mhlo.reshape"(%1084) {name = "reshape.1533"} : (tensor<ui64>) -> tensor<1xui64>
        %1086 = "mhlo.concatenate"(%1067, %1085) {dimension = 0 : i64} : (tensor<1xui64>, tensor<1xui64>) -> tensor<2xui64>
        %1087 = "mhlo.concatenate"(%1062, %1086) {dimension = 0 : i64} : (tensor<1xui64>, tensor<2xui64>) -> tensor<3xui64>
        %1088 = "mhlo.rng_bit_generator"(%1087) {rng_algorithm = 2 : i32} : (tensor<3xui64>) -> tuple<tensor<3xui64>, tensor<1x2xui32>>
        %1089 = "mhlo.get_tuple_element"(%1088) {index = 0 : i32, name = "get-tuple-element.1544"} : (tuple<tensor<3xui64>, tensor<1x2xui32>>) -> tensor<3xui64>
        %cst_350 = "std.constant"() {name = "constant.1552", value = dense<0> : tensor<ui64>} : () -> tensor<ui64>
        %cst_351 = "std.constant"() {name = "constant.1574", value = dense<1053357856> : tensor<ui32>} : () -> tensor<ui32>
        %cst_352 = "std.constant"() {name = "constant.1594", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %1090 = "mhlo.add"(%cst_351, %cst_352) {name = "add.1595"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_353 = "std.constant"() {name = "constant.1616", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %1091 = "mhlo.add"(%1090, %cst_353) {name = "add.1617"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_354 = "std.constant"() {name = "constant.1638", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %1092 = "mhlo.add"(%1091, %cst_354) {name = "add.1639"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_355 = "std.constant"() {name = "constant.1660", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %1093 = "mhlo.add"(%1092, %cst_355) {name = "add.1661"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_356 = "std.constant"() {name = "constant.1682", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %1094 = "mhlo.add"(%1093, %cst_356) {name = "add.1683"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_357 = "std.constant"() {name = "constant.1704", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %1095 = "mhlo.add"(%1094, %cst_357) {name = "add.1705"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_358 = "std.constant"() {name = "constant.1726", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %1096 = "mhlo.add"(%1095, %cst_358) {name = "add.1727"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_359 = "std.constant"() {name = "constant.1748", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %1097 = "mhlo.add"(%1096, %cst_359) {name = "add.1749"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_360 = "std.constant"() {name = "constant.1770", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %1098 = "mhlo.add"(%1097, %cst_360) {name = "add.1771"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_361 = "std.constant"() {name = "constant.1792", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %1099 = "mhlo.add"(%1098, %cst_361) {name = "add.1793"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_362 = "std.constant"() {name = "constant.1575", value = dense<38149673> : tensor<ui32>} : () -> tensor<ui32>
        %cst_363 = "std.constant"() {name = "constant.1596", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %1100 = "mhlo.add"(%cst_362, %cst_363) {name = "add.1597"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_364 = "std.constant"() {name = "constant.1618", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %1101 = "mhlo.add"(%1100, %cst_364) {name = "add.1619"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_365 = "std.constant"() {name = "constant.1640", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %1102 = "mhlo.add"(%1101, %cst_365) {name = "add.1641"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_366 = "std.constant"() {name = "constant.1662", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %1103 = "mhlo.add"(%1102, %cst_366) {name = "add.1663"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_367 = "std.constant"() {name = "constant.1684", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %1104 = "mhlo.add"(%1103, %cst_367) {name = "add.1685"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_368 = "std.constant"() {name = "constant.1706", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %1105 = "mhlo.add"(%1104, %cst_368) {name = "add.1707"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_369 = "std.constant"() {name = "constant.1728", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %1106 = "mhlo.add"(%1105, %cst_369) {name = "add.1729"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_370 = "std.constant"() {name = "constant.1750", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %1107 = "mhlo.add"(%1106, %cst_370) {name = "add.1751"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_371 = "std.constant"() {name = "constant.1772", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %1108 = "mhlo.add"(%1107, %cst_371) {name = "add.1773"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_372 = "std.constant"() {name = "constant.1794", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %1109 = "mhlo.add"(%1108, %cst_372) {name = "add.1795"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1110 = "mhlo.get_tuple_element"(%1088) {index = 1 : i32, name = "get-tuple-element.1543"} : (tuple<tensor<3xui64>, tensor<1x2xui32>>) -> tensor<1x2xui32>
        %1111 = "mhlo.bitcast_convert"(%1110) {name = "bitcast-convert.1545"} : (tensor<1x2xui32>) -> tensor<1x2xi32>
        %1112 = "mhlo.slice"(%1111) {limit_indices = dense<[1, 2]> : tensor<2xi64>, start_indices = dense<0> : tensor<2xi64>, strides = dense<1> : tensor<2xi64>} : (tensor<1x2xi32>) -> tensor<1x2xi32>
        %1113 = "mhlo.reshape"(%1112) {name = "reshape.1547"} : (tensor<1x2xi32>) -> tensor<2xi32>
        %1114 = "mhlo.slice"(%1113) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
        %1115 = "mhlo.reshape"(%1114) {name = "reshape.1549"} : (tensor<1xi32>) -> tensor<i32>
        %1116 = "mhlo.convert"(%1115) {name = "convert.1553"} : (tensor<i32>) -> tensor<ui64>
        %1117 = "mhlo.slice"(%1113) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
        %1118 = "mhlo.reshape"(%1117) {name = "reshape.1551"} : (tensor<1xi32>) -> tensor<i32>
        %1119 = "mhlo.convert"(%1118) {name = "convert.1554"} : (tensor<i32>) -> tensor<ui64>
        %cst_373 = "std.constant"() {name = "constant.1555", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1120 = "mhlo.shift_left"(%1119, %cst_373) {name = "shift-left.1556"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1121 = "mhlo.or"(%1116, %1120) {name = "or.1557"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1122 = "mhlo.convert"(%1121) {name = "convert.1561"} : (tensor<ui64>) -> tensor<ui32>
        %1123 = "mhlo.convert"(%1122) {name = "convert.1564"} : (tensor<ui32>) -> tensor<ui64>
        %1124 = "mhlo.convert"(%1123) {name = "convert.1566"} : (tensor<ui64>) -> tensor<ui32>
        %1125 = "mhlo.convert"(%1124) {name = "convert.1576"} : (tensor<ui32>) -> tensor<ui64>
        %cst_374 = "std.constant"() {name = "constant.1577", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %1126 = "mhlo.multiply"(%1125, %cst_374) {name = "multiply.1578"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_375 = "std.constant"() {name = "constant.1580", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1127 = "mhlo.shift_right_logical"(%1126, %cst_375) {name = "shift-right-logical.1581"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1128 = "mhlo.convert"(%1127) {name = "convert.1582"} : (tensor<ui64>) -> tensor<ui32>
        %cst_376 = "std.constant"() {name = "constant.1560", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1129 = "mhlo.shift_right_logical"(%1121, %cst_376) {name = "shift-right-logical.1562"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1130 = "mhlo.convert"(%1129) {name = "convert.1563"} : (tensor<ui64>) -> tensor<ui32>
        %1131 = "mhlo.convert"(%1130) {name = "convert.1565"} : (tensor<ui32>) -> tensor<ui64>
        %cst_377 = "std.constant"() {name = "constant.1571", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1132 = "mhlo.shift_right_logical"(%1131, %cst_377) {name = "shift-right-logical.1572"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1133 = "mhlo.convert"(%1132) {name = "convert.1573"} : (tensor<ui64>) -> tensor<ui32>
        %1134 = "mhlo.xor"(%1128, %1133) {name = "xor.1592"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1135 = "mhlo.xor"(%1134, %cst_362) {name = "xor.1593"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1136 = "mhlo.convert"(%1135) {name = "convert.1605"} : (tensor<ui32>) -> tensor<ui64>
        %cst_378 = "std.constant"() {name = "constant.1606", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %1137 = "mhlo.multiply"(%1136, %cst_378) {name = "multiply.1607"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_379 = "std.constant"() {name = "constant.1609", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1138 = "mhlo.shift_right_logical"(%1137, %cst_379) {name = "shift-right-logical.1610"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1139 = "mhlo.convert"(%1138) {name = "convert.1611"} : (tensor<ui64>) -> tensor<ui32>
        %1140 = "mhlo.convert"(%1131) {name = "convert.1570"} : (tensor<ui64>) -> tensor<ui32>
        %1141 = "mhlo.convert"(%1140) {name = "convert.1583"} : (tensor<ui32>) -> tensor<ui64>
        %cst_380 = "std.constant"() {name = "constant.1584", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %1142 = "mhlo.multiply"(%1141, %cst_380) {name = "multiply.1585"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1143 = "mhlo.convert"(%1142) {name = "convert.1586"} : (tensor<ui64>) -> tensor<ui32>
        %1144 = "mhlo.xor"(%1139, %1143) {name = "xor.1612"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1145 = "mhlo.xor"(%1144, %1090) {name = "xor.1613"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1146 = "mhlo.convert"(%1145) {name = "convert.1620"} : (tensor<ui32>) -> tensor<ui64>
        %cst_381 = "std.constant"() {name = "constant.1621", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %1147 = "mhlo.multiply"(%1146, %cst_381) {name = "multiply.1622"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_382 = "std.constant"() {name = "constant.1624", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1148 = "mhlo.shift_right_logical"(%1147, %cst_382) {name = "shift-right-logical.1625"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1149 = "mhlo.convert"(%1148) {name = "convert.1626"} : (tensor<ui64>) -> tensor<ui32>
        %cst_383 = "std.constant"() {name = "constant.1587", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1150 = "mhlo.shift_right_logical"(%1142, %cst_383) {name = "shift-right-logical.1588"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1151 = "mhlo.convert"(%1150) {name = "convert.1589"} : (tensor<ui64>) -> tensor<ui32>
        %cst_384 = "std.constant"() {name = "constant.1567", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1152 = "mhlo.shift_right_logical"(%1123, %cst_384) {name = "shift-right-logical.1568"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1153 = "mhlo.convert"(%1152) {name = "convert.1569"} : (tensor<ui64>) -> tensor<ui32>
        %1154 = "mhlo.xor"(%1151, %1153) {name = "xor.1590"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1155 = "mhlo.xor"(%1154, %cst_351) {name = "xor.1591"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1156 = "mhlo.convert"(%1155) {name = "convert.1598"} : (tensor<ui32>) -> tensor<ui64>
        %cst_385 = "std.constant"() {name = "constant.1599", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %1157 = "mhlo.multiply"(%1156, %cst_385) {name = "multiply.1600"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1158 = "mhlo.convert"(%1157) {name = "convert.1601"} : (tensor<ui64>) -> tensor<ui32>
        %1159 = "mhlo.xor"(%1149, %1158) {name = "xor.1636"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1160 = "mhlo.xor"(%1159, %1101) {name = "xor.1637"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1161 = "mhlo.convert"(%1160) {name = "convert.1649"} : (tensor<ui32>) -> tensor<ui64>
        %cst_386 = "std.constant"() {name = "constant.1650", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %1162 = "mhlo.multiply"(%1161, %cst_386) {name = "multiply.1651"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_387 = "std.constant"() {name = "constant.1653", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1163 = "mhlo.shift_right_logical"(%1162, %cst_387) {name = "shift-right-logical.1654"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1164 = "mhlo.convert"(%1163) {name = "convert.1655"} : (tensor<ui64>) -> tensor<ui32>
        %cst_388 = "std.constant"() {name = "constant.1602", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1165 = "mhlo.shift_right_logical"(%1157, %cst_388) {name = "shift-right-logical.1603"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1166 = "mhlo.convert"(%1165) {name = "convert.1604"} : (tensor<ui64>) -> tensor<ui32>
        %1167 = "mhlo.convert"(%1126) {name = "convert.1579"} : (tensor<ui64>) -> tensor<ui32>
        %1168 = "mhlo.xor"(%1166, %1167) {name = "xor.1614"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1169 = "mhlo.xor"(%1168, %1100) {name = "xor.1615"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1170 = "mhlo.convert"(%1169) {name = "convert.1627"} : (tensor<ui32>) -> tensor<ui64>
        %cst_389 = "std.constant"() {name = "constant.1628", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %1171 = "mhlo.multiply"(%1170, %cst_389) {name = "multiply.1629"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1172 = "mhlo.convert"(%1171) {name = "convert.1630"} : (tensor<ui64>) -> tensor<ui32>
        %1173 = "mhlo.xor"(%1164, %1172) {name = "xor.1656"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1174 = "mhlo.xor"(%1173, %1092) {name = "xor.1657"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1175 = "mhlo.convert"(%1174) {name = "convert.1664"} : (tensor<ui32>) -> tensor<ui64>
        %cst_390 = "std.constant"() {name = "constant.1665", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %1176 = "mhlo.multiply"(%1175, %cst_390) {name = "multiply.1666"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_391 = "std.constant"() {name = "constant.1668", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1177 = "mhlo.shift_right_logical"(%1176, %cst_391) {name = "shift-right-logical.1669"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1178 = "mhlo.convert"(%1177) {name = "convert.1670"} : (tensor<ui64>) -> tensor<ui32>
        %cst_392 = "std.constant"() {name = "constant.1631", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1179 = "mhlo.shift_right_logical"(%1171, %cst_392) {name = "shift-right-logical.1632"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1180 = "mhlo.convert"(%1179) {name = "convert.1633"} : (tensor<ui64>) -> tensor<ui32>
        %1181 = "mhlo.convert"(%1137) {name = "convert.1608"} : (tensor<ui64>) -> tensor<ui32>
        %1182 = "mhlo.xor"(%1180, %1181) {name = "xor.1634"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1183 = "mhlo.xor"(%1182, %1091) {name = "xor.1635"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1184 = "mhlo.convert"(%1183) {name = "convert.1642"} : (tensor<ui32>) -> tensor<ui64>
        %cst_393 = "std.constant"() {name = "constant.1643", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %1185 = "mhlo.multiply"(%1184, %cst_393) {name = "multiply.1644"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1186 = "mhlo.convert"(%1185) {name = "convert.1645"} : (tensor<ui64>) -> tensor<ui32>
        %1187 = "mhlo.xor"(%1178, %1186) {name = "xor.1680"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1188 = "mhlo.xor"(%1187, %1103) {name = "xor.1681"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1189 = "mhlo.convert"(%1188) {name = "convert.1693"} : (tensor<ui32>) -> tensor<ui64>
        %cst_394 = "std.constant"() {name = "constant.1694", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %1190 = "mhlo.multiply"(%1189, %cst_394) {name = "multiply.1695"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_395 = "std.constant"() {name = "constant.1697", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1191 = "mhlo.shift_right_logical"(%1190, %cst_395) {name = "shift-right-logical.1698"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1192 = "mhlo.convert"(%1191) {name = "convert.1699"} : (tensor<ui64>) -> tensor<ui32>
        %cst_396 = "std.constant"() {name = "constant.1646", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1193 = "mhlo.shift_right_logical"(%1185, %cst_396) {name = "shift-right-logical.1647"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1194 = "mhlo.convert"(%1193) {name = "convert.1648"} : (tensor<ui64>) -> tensor<ui32>
        %1195 = "mhlo.convert"(%1147) {name = "convert.1623"} : (tensor<ui64>) -> tensor<ui32>
        %1196 = "mhlo.xor"(%1194, %1195) {name = "xor.1658"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1197 = "mhlo.xor"(%1196, %1102) {name = "xor.1659"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1198 = "mhlo.convert"(%1197) {name = "convert.1671"} : (tensor<ui32>) -> tensor<ui64>
        %cst_397 = "std.constant"() {name = "constant.1672", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %1199 = "mhlo.multiply"(%1198, %cst_397) {name = "multiply.1673"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1200 = "mhlo.convert"(%1199) {name = "convert.1674"} : (tensor<ui64>) -> tensor<ui32>
        %1201 = "mhlo.xor"(%1192, %1200) {name = "xor.1700"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1202 = "mhlo.xor"(%1201, %1094) {name = "xor.1701"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1203 = "mhlo.convert"(%1202) {name = "convert.1708"} : (tensor<ui32>) -> tensor<ui64>
        %cst_398 = "std.constant"() {name = "constant.1709", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %1204 = "mhlo.multiply"(%1203, %cst_398) {name = "multiply.1710"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_399 = "std.constant"() {name = "constant.1712", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1205 = "mhlo.shift_right_logical"(%1204, %cst_399) {name = "shift-right-logical.1713"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1206 = "mhlo.convert"(%1205) {name = "convert.1714"} : (tensor<ui64>) -> tensor<ui32>
        %cst_400 = "std.constant"() {name = "constant.1675", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1207 = "mhlo.shift_right_logical"(%1199, %cst_400) {name = "shift-right-logical.1676"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1208 = "mhlo.convert"(%1207) {name = "convert.1677"} : (tensor<ui64>) -> tensor<ui32>
        %1209 = "mhlo.convert"(%1162) {name = "convert.1652"} : (tensor<ui64>) -> tensor<ui32>
        %1210 = "mhlo.xor"(%1208, %1209) {name = "xor.1678"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1211 = "mhlo.xor"(%1210, %1093) {name = "xor.1679"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1212 = "mhlo.convert"(%1211) {name = "convert.1686"} : (tensor<ui32>) -> tensor<ui64>
        %cst_401 = "std.constant"() {name = "constant.1687", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %1213 = "mhlo.multiply"(%1212, %cst_401) {name = "multiply.1688"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1214 = "mhlo.convert"(%1213) {name = "convert.1689"} : (tensor<ui64>) -> tensor<ui32>
        %1215 = "mhlo.xor"(%1206, %1214) {name = "xor.1724"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1216 = "mhlo.xor"(%1215, %1105) {name = "xor.1725"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1217 = "mhlo.convert"(%1216) {name = "convert.1737"} : (tensor<ui32>) -> tensor<ui64>
        %cst_402 = "std.constant"() {name = "constant.1738", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %1218 = "mhlo.multiply"(%1217, %cst_402) {name = "multiply.1739"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_403 = "std.constant"() {name = "constant.1741", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1219 = "mhlo.shift_right_logical"(%1218, %cst_403) {name = "shift-right-logical.1742"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1220 = "mhlo.convert"(%1219) {name = "convert.1743"} : (tensor<ui64>) -> tensor<ui32>
        %cst_404 = "std.constant"() {name = "constant.1690", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1221 = "mhlo.shift_right_logical"(%1213, %cst_404) {name = "shift-right-logical.1691"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1222 = "mhlo.convert"(%1221) {name = "convert.1692"} : (tensor<ui64>) -> tensor<ui32>
        %1223 = "mhlo.convert"(%1176) {name = "convert.1667"} : (tensor<ui64>) -> tensor<ui32>
        %1224 = "mhlo.xor"(%1222, %1223) {name = "xor.1702"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1225 = "mhlo.xor"(%1224, %1104) {name = "xor.1703"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1226 = "mhlo.convert"(%1225) {name = "convert.1715"} : (tensor<ui32>) -> tensor<ui64>
        %cst_405 = "std.constant"() {name = "constant.1716", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %1227 = "mhlo.multiply"(%1226, %cst_405) {name = "multiply.1717"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1228 = "mhlo.convert"(%1227) {name = "convert.1718"} : (tensor<ui64>) -> tensor<ui32>
        %1229 = "mhlo.xor"(%1220, %1228) {name = "xor.1744"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1230 = "mhlo.xor"(%1229, %1096) {name = "xor.1745"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1231 = "mhlo.convert"(%1230) {name = "convert.1752"} : (tensor<ui32>) -> tensor<ui64>
        %cst_406 = "std.constant"() {name = "constant.1753", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %1232 = "mhlo.multiply"(%1231, %cst_406) {name = "multiply.1754"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_407 = "std.constant"() {name = "constant.1756", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1233 = "mhlo.shift_right_logical"(%1232, %cst_407) {name = "shift-right-logical.1757"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1234 = "mhlo.convert"(%1233) {name = "convert.1758"} : (tensor<ui64>) -> tensor<ui32>
        %cst_408 = "std.constant"() {name = "constant.1719", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1235 = "mhlo.shift_right_logical"(%1227, %cst_408) {name = "shift-right-logical.1720"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1236 = "mhlo.convert"(%1235) {name = "convert.1721"} : (tensor<ui64>) -> tensor<ui32>
        %1237 = "mhlo.convert"(%1190) {name = "convert.1696"} : (tensor<ui64>) -> tensor<ui32>
        %1238 = "mhlo.xor"(%1236, %1237) {name = "xor.1722"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1239 = "mhlo.xor"(%1238, %1095) {name = "xor.1723"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1240 = "mhlo.convert"(%1239) {name = "convert.1730"} : (tensor<ui32>) -> tensor<ui64>
        %cst_409 = "std.constant"() {name = "constant.1731", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %1241 = "mhlo.multiply"(%1240, %cst_409) {name = "multiply.1732"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1242 = "mhlo.convert"(%1241) {name = "convert.1733"} : (tensor<ui64>) -> tensor<ui32>
        %1243 = "mhlo.xor"(%1234, %1242) {name = "xor.1768"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1244 = "mhlo.xor"(%1243, %1107) {name = "xor.1769"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1245 = "mhlo.convert"(%1244) {name = "convert.1781"} : (tensor<ui32>) -> tensor<ui64>
        %cst_410 = "std.constant"() {name = "constant.1782", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %1246 = "mhlo.multiply"(%1245, %cst_410) {name = "multiply.1783"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_411 = "std.constant"() {name = "constant.1785", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1247 = "mhlo.shift_right_logical"(%1246, %cst_411) {name = "shift-right-logical.1786"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1248 = "mhlo.convert"(%1247) {name = "convert.1787"} : (tensor<ui64>) -> tensor<ui32>
        %cst_412 = "std.constant"() {name = "constant.1734", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1249 = "mhlo.shift_right_logical"(%1241, %cst_412) {name = "shift-right-logical.1735"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1250 = "mhlo.convert"(%1249) {name = "convert.1736"} : (tensor<ui64>) -> tensor<ui32>
        %1251 = "mhlo.convert"(%1204) {name = "convert.1711"} : (tensor<ui64>) -> tensor<ui32>
        %1252 = "mhlo.xor"(%1250, %1251) {name = "xor.1746"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1253 = "mhlo.xor"(%1252, %1106) {name = "xor.1747"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1254 = "mhlo.convert"(%1253) {name = "convert.1759"} : (tensor<ui32>) -> tensor<ui64>
        %cst_413 = "std.constant"() {name = "constant.1760", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %1255 = "mhlo.multiply"(%1254, %cst_413) {name = "multiply.1761"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1256 = "mhlo.convert"(%1255) {name = "convert.1762"} : (tensor<ui64>) -> tensor<ui32>
        %1257 = "mhlo.xor"(%1248, %1256) {name = "xor.1788"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1258 = "mhlo.xor"(%1257, %1098) {name = "xor.1789"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1259 = "mhlo.convert"(%1258) {name = "convert.1810"} : (tensor<ui32>) -> tensor<ui64>
        %1260 = "mhlo.convert"(%1246) {name = "convert.1784"} : (tensor<ui64>) -> tensor<ui32>
        %1261 = "mhlo.convert"(%1260) {name = "convert.1811"} : (tensor<ui32>) -> tensor<ui64>
        %cst_414 = "std.constant"() {name = "constant.1812", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1262 = "mhlo.shift_left"(%1261, %cst_414) {name = "shift-left.1813"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1263 = "mhlo.or"(%1259, %1262) {name = "or.1814"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1264 = "mhlo.reshape"(%1263) {name = "reshape.1815"} : (tensor<ui64>) -> tensor<1xui64>
        %cst_415 = "std.constant"() {name = "constant.1796", value = dense<0> : tensor<ui32>} : () -> tensor<ui32>
        %1265 = "mhlo.convert"(%cst_415) {name = "convert.1797"} : (tensor<ui32>) -> tensor<ui64>
        %1266 = "mhlo.convert"(%cst_415) {name = "convert.1798"} : (tensor<ui32>) -> tensor<ui64>
        %cst_416 = "std.constant"() {name = "constant.1799", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1267 = "mhlo.shift_left"(%1266, %cst_416) {name = "shift-left.1800"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1268 = "mhlo.or"(%1265, %1267) {name = "or.1801"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1269 = "mhlo.reshape"(%1268) {name = "reshape.1807"} : (tensor<ui64>) -> tensor<1xui64>
        %cst_417 = "std.constant"() {name = "constant.1763", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1270 = "mhlo.shift_right_logical"(%1255, %cst_417) {name = "shift-right-logical.1764"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1271 = "mhlo.convert"(%1270) {name = "convert.1765"} : (tensor<ui64>) -> tensor<ui32>
        %1272 = "mhlo.convert"(%1218) {name = "convert.1740"} : (tensor<ui64>) -> tensor<ui32>
        %1273 = "mhlo.xor"(%1271, %1272) {name = "xor.1766"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1274 = "mhlo.xor"(%1273, %1097) {name = "xor.1767"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1275 = "mhlo.convert"(%1274) {name = "convert.1774"} : (tensor<ui32>) -> tensor<ui64>
        %cst_418 = "std.constant"() {name = "constant.1775", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %1276 = "mhlo.multiply"(%1275, %cst_418) {name = "multiply.1776"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_419 = "std.constant"() {name = "constant.1778", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1277 = "mhlo.shift_right_logical"(%1276, %cst_419) {name = "shift-right-logical.1779"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1278 = "mhlo.convert"(%1277) {name = "convert.1780"} : (tensor<ui64>) -> tensor<ui32>
        %1279 = "mhlo.convert"(%1232) {name = "convert.1755"} : (tensor<ui64>) -> tensor<ui32>
        %1280 = "mhlo.xor"(%1278, %1279) {name = "xor.1790"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1281 = "mhlo.xor"(%1280, %1108) {name = "xor.1791"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1282 = "mhlo.convert"(%1281) {name = "convert.1802"} : (tensor<ui32>) -> tensor<ui64>
        %1283 = "mhlo.convert"(%1276) {name = "convert.1777"} : (tensor<ui64>) -> tensor<ui32>
        %1284 = "mhlo.convert"(%1283) {name = "convert.1803"} : (tensor<ui32>) -> tensor<ui64>
        %cst_420 = "std.constant"() {name = "constant.1804", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1285 = "mhlo.shift_left"(%1284, %cst_420) {name = "shift-left.1805"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1286 = "mhlo.or"(%1282, %1285) {name = "or.1806"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1287 = "mhlo.reshape"(%1286) {name = "reshape.1808"} : (tensor<ui64>) -> tensor<1xui64>
        %1288 = "mhlo.concatenate"(%1269, %1287) {dimension = 0 : i64} : (tensor<1xui64>, tensor<1xui64>) -> tensor<2xui64>
        %1289 = "mhlo.concatenate"(%1264, %1288) {dimension = 0 : i64} : (tensor<1xui64>, tensor<2xui64>) -> tensor<3xui64>
        %1290 = "mhlo.rng_bit_generator"(%1289) {rng_algorithm = 2 : i32} : (tensor<3xui64>) -> tuple<tensor<3xui64>, tensor<4xui32>>
        %1291 = "mhlo.get_tuple_element"(%1290) {index = 0 : i32, name = "get-tuple-element.1819"} : (tuple<tensor<3xui64>, tensor<4xui32>>) -> tensor<3xui64>
        %cst_421 = "std.constant"() {name = "constant.1871", value = dense<0> : tensor<ui64>} : () -> tensor<ui64>
        %cst_422 = "std.constant"() {name = "constant.1886", value = dense<1053357856> : tensor<ui32>} : () -> tensor<ui32>
        %cst_423 = "std.constant"() {name = "constant.1906", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %1292 = "mhlo.add"(%cst_422, %cst_423) {name = "add.1907"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_424 = "std.constant"() {name = "constant.1928", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %1293 = "mhlo.add"(%1292, %cst_424) {name = "add.1929"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_425 = "std.constant"() {name = "constant.1950", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %1294 = "mhlo.add"(%1293, %cst_425) {name = "add.1951"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_426 = "std.constant"() {name = "constant.1972", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %1295 = "mhlo.add"(%1294, %cst_426) {name = "add.1973"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_427 = "std.constant"() {name = "constant.1994", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %1296 = "mhlo.add"(%1295, %cst_427) {name = "add.1995"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_428 = "std.constant"() {name = "constant.2016", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %1297 = "mhlo.add"(%1296, %cst_428) {name = "add.2017"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_429 = "std.constant"() {name = "constant.2038", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %1298 = "mhlo.add"(%1297, %cst_429) {name = "add.2039"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_430 = "std.constant"() {name = "constant.2060", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %1299 = "mhlo.add"(%1298, %cst_430) {name = "add.2061"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_431 = "std.constant"() {name = "constant.2082", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %1300 = "mhlo.add"(%1299, %cst_431) {name = "add.2083"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_432 = "std.constant"() {name = "constant.2104", value = dense<2654435769> : tensor<ui32>} : () -> tensor<ui32>
        %1301 = "mhlo.add"(%1300, %cst_432) {name = "add.2105"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_433 = "std.constant"() {name = "constant.1887", value = dense<38149673> : tensor<ui32>} : () -> tensor<ui32>
        %cst_434 = "std.constant"() {name = "constant.1908", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %1302 = "mhlo.add"(%cst_433, %cst_434) {name = "add.1909"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_435 = "std.constant"() {name = "constant.1930", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %1303 = "mhlo.add"(%1302, %cst_435) {name = "add.1931"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_436 = "std.constant"() {name = "constant.1952", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %1304 = "mhlo.add"(%1303, %cst_436) {name = "add.1953"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_437 = "std.constant"() {name = "constant.1974", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %1305 = "mhlo.add"(%1304, %cst_437) {name = "add.1975"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_438 = "std.constant"() {name = "constant.1996", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %1306 = "mhlo.add"(%1305, %cst_438) {name = "add.1997"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_439 = "std.constant"() {name = "constant.2018", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %1307 = "mhlo.add"(%1306, %cst_439) {name = "add.2019"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_440 = "std.constant"() {name = "constant.2040", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %1308 = "mhlo.add"(%1307, %cst_440) {name = "add.2041"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_441 = "std.constant"() {name = "constant.2062", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %1309 = "mhlo.add"(%1308, %cst_441) {name = "add.2063"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_442 = "std.constant"() {name = "constant.2084", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %1310 = "mhlo.add"(%1309, %cst_442) {name = "add.2085"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %cst_443 = "std.constant"() {name = "constant.2106", value = dense<3144134277> : tensor<ui32>} : () -> tensor<ui32>
        %1311 = "mhlo.add"(%1310, %cst_443) {name = "add.2107"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1312 = "mhlo.slice"(%909) {limit_indices = dense<2> : tensor<2xi64>, start_indices = dense<[1, 0]> : tensor<2xi64>, strides = dense<1> : tensor<2xi64>} : (tensor<2x2xi32>) -> tensor<1x2xi32>
        %1313 = "mhlo.reshape"(%1312) {name = "reshape.1274"} : (tensor<1x2xi32>) -> tensor<2xi32>
        %1314 = "mhlo.slice"(%1313) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
        %1315 = "mhlo.reshape"(%1314) {name = "reshape.1863"} : (tensor<1xi32>) -> tensor<i32>
        %1316 = "mhlo.convert"(%1315) {name = "convert.1866"} : (tensor<i32>) -> tensor<ui64>
        %1317 = "mhlo.slice"(%1313) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xi32>) -> tensor<1xi32>
        %1318 = "mhlo.reshape"(%1317) {name = "reshape.1865"} : (tensor<1xi32>) -> tensor<i32>
        %1319 = "mhlo.convert"(%1318) {name = "convert.1867"} : (tensor<i32>) -> tensor<ui64>
        %cst_444 = "std.constant"() {name = "constant.1868", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1320 = "mhlo.shift_left"(%1319, %cst_444) {name = "shift-left.1869"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1321 = "mhlo.or"(%1316, %1320) {name = "or.1870"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1322 = "mhlo.convert"(%1321) {name = "convert.1873"} : (tensor<ui64>) -> tensor<ui32>
        %1323 = "mhlo.convert"(%1322) {name = "convert.1876"} : (tensor<ui32>) -> tensor<ui64>
        %1324 = "mhlo.convert"(%1323) {name = "convert.1878"} : (tensor<ui64>) -> tensor<ui32>
        %1325 = "mhlo.convert"(%1324) {name = "convert.1888"} : (tensor<ui32>) -> tensor<ui64>
        %cst_445 = "std.constant"() {name = "constant.1889", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %1326 = "mhlo.multiply"(%1325, %cst_445) {name = "multiply.1890"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_446 = "std.constant"() {name = "constant.1892", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1327 = "mhlo.shift_right_logical"(%1326, %cst_446) {name = "shift-right-logical.1893"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1328 = "mhlo.convert"(%1327) {name = "convert.1894"} : (tensor<ui64>) -> tensor<ui32>
        %cst_447 = "std.constant"() {name = "constant.1872", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1329 = "mhlo.shift_right_logical"(%1321, %cst_447) {name = "shift-right-logical.1874"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1330 = "mhlo.convert"(%1329) {name = "convert.1875"} : (tensor<ui64>) -> tensor<ui32>
        %1331 = "mhlo.convert"(%1330) {name = "convert.1877"} : (tensor<ui32>) -> tensor<ui64>
        %cst_448 = "std.constant"() {name = "constant.1883", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1332 = "mhlo.shift_right_logical"(%1331, %cst_448) {name = "shift-right-logical.1884"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1333 = "mhlo.convert"(%1332) {name = "convert.1885"} : (tensor<ui64>) -> tensor<ui32>
        %1334 = "mhlo.xor"(%1328, %1333) {name = "xor.1904"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1335 = "mhlo.xor"(%1334, %cst_433) {name = "xor.1905"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1336 = "mhlo.convert"(%1335) {name = "convert.1917"} : (tensor<ui32>) -> tensor<ui64>
        %cst_449 = "std.constant"() {name = "constant.1918", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %1337 = "mhlo.multiply"(%1336, %cst_449) {name = "multiply.1919"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_450 = "std.constant"() {name = "constant.1921", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1338 = "mhlo.shift_right_logical"(%1337, %cst_450) {name = "shift-right-logical.1922"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1339 = "mhlo.convert"(%1338) {name = "convert.1923"} : (tensor<ui64>) -> tensor<ui32>
        %1340 = "mhlo.convert"(%1331) {name = "convert.1882"} : (tensor<ui64>) -> tensor<ui32>
        %1341 = "mhlo.convert"(%1340) {name = "convert.1895"} : (tensor<ui32>) -> tensor<ui64>
        %cst_451 = "std.constant"() {name = "constant.1896", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %1342 = "mhlo.multiply"(%1341, %cst_451) {name = "multiply.1897"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1343 = "mhlo.convert"(%1342) {name = "convert.1898"} : (tensor<ui64>) -> tensor<ui32>
        %1344 = "mhlo.xor"(%1339, %1343) {name = "xor.1924"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1345 = "mhlo.xor"(%1344, %1292) {name = "xor.1925"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1346 = "mhlo.convert"(%1345) {name = "convert.1932"} : (tensor<ui32>) -> tensor<ui64>
        %cst_452 = "std.constant"() {name = "constant.1933", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %1347 = "mhlo.multiply"(%1346, %cst_452) {name = "multiply.1934"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_453 = "std.constant"() {name = "constant.1936", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1348 = "mhlo.shift_right_logical"(%1347, %cst_453) {name = "shift-right-logical.1937"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1349 = "mhlo.convert"(%1348) {name = "convert.1938"} : (tensor<ui64>) -> tensor<ui32>
        %cst_454 = "std.constant"() {name = "constant.1899", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1350 = "mhlo.shift_right_logical"(%1342, %cst_454) {name = "shift-right-logical.1900"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1351 = "mhlo.convert"(%1350) {name = "convert.1901"} : (tensor<ui64>) -> tensor<ui32>
        %cst_455 = "std.constant"() {name = "constant.1879", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1352 = "mhlo.shift_right_logical"(%1323, %cst_455) {name = "shift-right-logical.1880"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1353 = "mhlo.convert"(%1352) {name = "convert.1881"} : (tensor<ui64>) -> tensor<ui32>
        %1354 = "mhlo.xor"(%1351, %1353) {name = "xor.1902"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1355 = "mhlo.xor"(%1354, %cst_422) {name = "xor.1903"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1356 = "mhlo.convert"(%1355) {name = "convert.1910"} : (tensor<ui32>) -> tensor<ui64>
        %cst_456 = "std.constant"() {name = "constant.1911", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %1357 = "mhlo.multiply"(%1356, %cst_456) {name = "multiply.1912"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1358 = "mhlo.convert"(%1357) {name = "convert.1913"} : (tensor<ui64>) -> tensor<ui32>
        %1359 = "mhlo.xor"(%1349, %1358) {name = "xor.1948"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1360 = "mhlo.xor"(%1359, %1303) {name = "xor.1949"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1361 = "mhlo.convert"(%1360) {name = "convert.1961"} : (tensor<ui32>) -> tensor<ui64>
        %cst_457 = "std.constant"() {name = "constant.1962", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %1362 = "mhlo.multiply"(%1361, %cst_457) {name = "multiply.1963"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_458 = "std.constant"() {name = "constant.1965", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1363 = "mhlo.shift_right_logical"(%1362, %cst_458) {name = "shift-right-logical.1966"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1364 = "mhlo.convert"(%1363) {name = "convert.1967"} : (tensor<ui64>) -> tensor<ui32>
        %cst_459 = "std.constant"() {name = "constant.1914", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1365 = "mhlo.shift_right_logical"(%1357, %cst_459) {name = "shift-right-logical.1915"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1366 = "mhlo.convert"(%1365) {name = "convert.1916"} : (tensor<ui64>) -> tensor<ui32>
        %1367 = "mhlo.convert"(%1326) {name = "convert.1891"} : (tensor<ui64>) -> tensor<ui32>
        %1368 = "mhlo.xor"(%1366, %1367) {name = "xor.1926"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1369 = "mhlo.xor"(%1368, %1302) {name = "xor.1927"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1370 = "mhlo.convert"(%1369) {name = "convert.1939"} : (tensor<ui32>) -> tensor<ui64>
        %cst_460 = "std.constant"() {name = "constant.1940", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %1371 = "mhlo.multiply"(%1370, %cst_460) {name = "multiply.1941"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1372 = "mhlo.convert"(%1371) {name = "convert.1942"} : (tensor<ui64>) -> tensor<ui32>
        %1373 = "mhlo.xor"(%1364, %1372) {name = "xor.1968"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1374 = "mhlo.xor"(%1373, %1294) {name = "xor.1969"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1375 = "mhlo.convert"(%1374) {name = "convert.1976"} : (tensor<ui32>) -> tensor<ui64>
        %cst_461 = "std.constant"() {name = "constant.1977", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %1376 = "mhlo.multiply"(%1375, %cst_461) {name = "multiply.1978"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_462 = "std.constant"() {name = "constant.1980", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1377 = "mhlo.shift_right_logical"(%1376, %cst_462) {name = "shift-right-logical.1981"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1378 = "mhlo.convert"(%1377) {name = "convert.1982"} : (tensor<ui64>) -> tensor<ui32>
        %cst_463 = "std.constant"() {name = "constant.1943", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1379 = "mhlo.shift_right_logical"(%1371, %cst_463) {name = "shift-right-logical.1944"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1380 = "mhlo.convert"(%1379) {name = "convert.1945"} : (tensor<ui64>) -> tensor<ui32>
        %1381 = "mhlo.convert"(%1337) {name = "convert.1920"} : (tensor<ui64>) -> tensor<ui32>
        %1382 = "mhlo.xor"(%1380, %1381) {name = "xor.1946"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1383 = "mhlo.xor"(%1382, %1293) {name = "xor.1947"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1384 = "mhlo.convert"(%1383) {name = "convert.1954"} : (tensor<ui32>) -> tensor<ui64>
        %cst_464 = "std.constant"() {name = "constant.1955", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %1385 = "mhlo.multiply"(%1384, %cst_464) {name = "multiply.1956"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1386 = "mhlo.convert"(%1385) {name = "convert.1957"} : (tensor<ui64>) -> tensor<ui32>
        %1387 = "mhlo.xor"(%1378, %1386) {name = "xor.1992"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1388 = "mhlo.xor"(%1387, %1305) {name = "xor.1993"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1389 = "mhlo.convert"(%1388) {name = "convert.2005"} : (tensor<ui32>) -> tensor<ui64>
        %cst_465 = "std.constant"() {name = "constant.2006", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %1390 = "mhlo.multiply"(%1389, %cst_465) {name = "multiply.2007"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_466 = "std.constant"() {name = "constant.2009", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1391 = "mhlo.shift_right_logical"(%1390, %cst_466) {name = "shift-right-logical.2010"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1392 = "mhlo.convert"(%1391) {name = "convert.2011"} : (tensor<ui64>) -> tensor<ui32>
        %cst_467 = "std.constant"() {name = "constant.1958", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1393 = "mhlo.shift_right_logical"(%1385, %cst_467) {name = "shift-right-logical.1959"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1394 = "mhlo.convert"(%1393) {name = "convert.1960"} : (tensor<ui64>) -> tensor<ui32>
        %1395 = "mhlo.convert"(%1347) {name = "convert.1935"} : (tensor<ui64>) -> tensor<ui32>
        %1396 = "mhlo.xor"(%1394, %1395) {name = "xor.1970"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1397 = "mhlo.xor"(%1396, %1304) {name = "xor.1971"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1398 = "mhlo.convert"(%1397) {name = "convert.1983"} : (tensor<ui32>) -> tensor<ui64>
        %cst_468 = "std.constant"() {name = "constant.1984", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %1399 = "mhlo.multiply"(%1398, %cst_468) {name = "multiply.1985"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1400 = "mhlo.convert"(%1399) {name = "convert.1986"} : (tensor<ui64>) -> tensor<ui32>
        %1401 = "mhlo.xor"(%1392, %1400) {name = "xor.2012"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1402 = "mhlo.xor"(%1401, %1296) {name = "xor.2013"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1403 = "mhlo.convert"(%1402) {name = "convert.2020"} : (tensor<ui32>) -> tensor<ui64>
        %cst_469 = "std.constant"() {name = "constant.2021", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %1404 = "mhlo.multiply"(%1403, %cst_469) {name = "multiply.2022"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_470 = "std.constant"() {name = "constant.2024", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1405 = "mhlo.shift_right_logical"(%1404, %cst_470) {name = "shift-right-logical.2025"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1406 = "mhlo.convert"(%1405) {name = "convert.2026"} : (tensor<ui64>) -> tensor<ui32>
        %cst_471 = "std.constant"() {name = "constant.1987", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1407 = "mhlo.shift_right_logical"(%1399, %cst_471) {name = "shift-right-logical.1988"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1408 = "mhlo.convert"(%1407) {name = "convert.1989"} : (tensor<ui64>) -> tensor<ui32>
        %1409 = "mhlo.convert"(%1362) {name = "convert.1964"} : (tensor<ui64>) -> tensor<ui32>
        %1410 = "mhlo.xor"(%1408, %1409) {name = "xor.1990"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1411 = "mhlo.xor"(%1410, %1295) {name = "xor.1991"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1412 = "mhlo.convert"(%1411) {name = "convert.1998"} : (tensor<ui32>) -> tensor<ui64>
        %cst_472 = "std.constant"() {name = "constant.1999", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %1413 = "mhlo.multiply"(%1412, %cst_472) {name = "multiply.2000"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1414 = "mhlo.convert"(%1413) {name = "convert.2001"} : (tensor<ui64>) -> tensor<ui32>
        %1415 = "mhlo.xor"(%1406, %1414) {name = "xor.2036"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1416 = "mhlo.xor"(%1415, %1307) {name = "xor.2037"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1417 = "mhlo.convert"(%1416) {name = "convert.2049"} : (tensor<ui32>) -> tensor<ui64>
        %cst_473 = "std.constant"() {name = "constant.2050", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %1418 = "mhlo.multiply"(%1417, %cst_473) {name = "multiply.2051"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_474 = "std.constant"() {name = "constant.2053", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1419 = "mhlo.shift_right_logical"(%1418, %cst_474) {name = "shift-right-logical.2054"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1420 = "mhlo.convert"(%1419) {name = "convert.2055"} : (tensor<ui64>) -> tensor<ui32>
        %cst_475 = "std.constant"() {name = "constant.2002", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1421 = "mhlo.shift_right_logical"(%1413, %cst_475) {name = "shift-right-logical.2003"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1422 = "mhlo.convert"(%1421) {name = "convert.2004"} : (tensor<ui64>) -> tensor<ui32>
        %1423 = "mhlo.convert"(%1376) {name = "convert.1979"} : (tensor<ui64>) -> tensor<ui32>
        %1424 = "mhlo.xor"(%1422, %1423) {name = "xor.2014"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1425 = "mhlo.xor"(%1424, %1306) {name = "xor.2015"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1426 = "mhlo.convert"(%1425) {name = "convert.2027"} : (tensor<ui32>) -> tensor<ui64>
        %cst_476 = "std.constant"() {name = "constant.2028", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %1427 = "mhlo.multiply"(%1426, %cst_476) {name = "multiply.2029"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1428 = "mhlo.convert"(%1427) {name = "convert.2030"} : (tensor<ui64>) -> tensor<ui32>
        %1429 = "mhlo.xor"(%1420, %1428) {name = "xor.2056"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1430 = "mhlo.xor"(%1429, %1298) {name = "xor.2057"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1431 = "mhlo.convert"(%1430) {name = "convert.2064"} : (tensor<ui32>) -> tensor<ui64>
        %cst_477 = "std.constant"() {name = "constant.2065", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %1432 = "mhlo.multiply"(%1431, %cst_477) {name = "multiply.2066"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_478 = "std.constant"() {name = "constant.2068", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1433 = "mhlo.shift_right_logical"(%1432, %cst_478) {name = "shift-right-logical.2069"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1434 = "mhlo.convert"(%1433) {name = "convert.2070"} : (tensor<ui64>) -> tensor<ui32>
        %cst_479 = "std.constant"() {name = "constant.2031", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1435 = "mhlo.shift_right_logical"(%1427, %cst_479) {name = "shift-right-logical.2032"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1436 = "mhlo.convert"(%1435) {name = "convert.2033"} : (tensor<ui64>) -> tensor<ui32>
        %1437 = "mhlo.convert"(%1390) {name = "convert.2008"} : (tensor<ui64>) -> tensor<ui32>
        %1438 = "mhlo.xor"(%1436, %1437) {name = "xor.2034"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1439 = "mhlo.xor"(%1438, %1297) {name = "xor.2035"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1440 = "mhlo.convert"(%1439) {name = "convert.2042"} : (tensor<ui32>) -> tensor<ui64>
        %cst_480 = "std.constant"() {name = "constant.2043", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %1441 = "mhlo.multiply"(%1440, %cst_480) {name = "multiply.2044"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1442 = "mhlo.convert"(%1441) {name = "convert.2045"} : (tensor<ui64>) -> tensor<ui32>
        %1443 = "mhlo.xor"(%1434, %1442) {name = "xor.2080"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1444 = "mhlo.xor"(%1443, %1309) {name = "xor.2081"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1445 = "mhlo.convert"(%1444) {name = "convert.2093"} : (tensor<ui32>) -> tensor<ui64>
        %cst_481 = "std.constant"() {name = "constant.2094", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %1446 = "mhlo.multiply"(%1445, %cst_481) {name = "multiply.2095"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_482 = "std.constant"() {name = "constant.2097", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1447 = "mhlo.shift_right_logical"(%1446, %cst_482) {name = "shift-right-logical.2098"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1448 = "mhlo.convert"(%1447) {name = "convert.2099"} : (tensor<ui64>) -> tensor<ui32>
        %cst_483 = "std.constant"() {name = "constant.2046", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1449 = "mhlo.shift_right_logical"(%1441, %cst_483) {name = "shift-right-logical.2047"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1450 = "mhlo.convert"(%1449) {name = "convert.2048"} : (tensor<ui64>) -> tensor<ui32>
        %1451 = "mhlo.convert"(%1404) {name = "convert.2023"} : (tensor<ui64>) -> tensor<ui32>
        %1452 = "mhlo.xor"(%1450, %1451) {name = "xor.2058"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1453 = "mhlo.xor"(%1452, %1308) {name = "xor.2059"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1454 = "mhlo.convert"(%1453) {name = "convert.2071"} : (tensor<ui32>) -> tensor<ui64>
        %cst_484 = "std.constant"() {name = "constant.2072", value = dense<3449720151> : tensor<ui64>} : () -> tensor<ui64>
        %1455 = "mhlo.multiply"(%1454, %cst_484) {name = "multiply.2073"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1456 = "mhlo.convert"(%1455) {name = "convert.2074"} : (tensor<ui64>) -> tensor<ui32>
        %1457 = "mhlo.xor"(%1448, %1456) {name = "xor.2100"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1458 = "mhlo.xor"(%1457, %1300) {name = "xor.2101"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1459 = "mhlo.convert"(%1458) {name = "convert.2122"} : (tensor<ui32>) -> tensor<ui64>
        %1460 = "mhlo.convert"(%1446) {name = "convert.2096"} : (tensor<ui64>) -> tensor<ui32>
        %1461 = "mhlo.convert"(%1460) {name = "convert.2123"} : (tensor<ui32>) -> tensor<ui64>
        %cst_485 = "std.constant"() {name = "constant.2124", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1462 = "mhlo.shift_left"(%1461, %cst_485) {name = "shift-left.2125"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1463 = "mhlo.or"(%1459, %1462) {name = "or.2126"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1464 = "mhlo.reshape"(%1463) {name = "reshape.2127"} : (tensor<ui64>) -> tensor<1xui64>
        %cst_486 = "std.constant"() {name = "constant.2108", value = dense<0> : tensor<ui32>} : () -> tensor<ui32>
        %1465 = "mhlo.convert"(%cst_486) {name = "convert.2109"} : (tensor<ui32>) -> tensor<ui64>
        %1466 = "mhlo.convert"(%cst_486) {name = "convert.2110"} : (tensor<ui32>) -> tensor<ui64>
        %cst_487 = "std.constant"() {name = "constant.2111", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1467 = "mhlo.shift_left"(%1466, %cst_487) {name = "shift-left.2112"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1468 = "mhlo.or"(%1465, %1467) {name = "or.2113"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1469 = "mhlo.reshape"(%1468) {name = "reshape.2119"} : (tensor<ui64>) -> tensor<1xui64>
        %cst_488 = "std.constant"() {name = "constant.2075", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1470 = "mhlo.shift_right_logical"(%1455, %cst_488) {name = "shift-right-logical.2076"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1471 = "mhlo.convert"(%1470) {name = "convert.2077"} : (tensor<ui64>) -> tensor<ui32>
        %1472 = "mhlo.convert"(%1418) {name = "convert.2052"} : (tensor<ui64>) -> tensor<ui32>
        %1473 = "mhlo.xor"(%1471, %1472) {name = "xor.2078"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1474 = "mhlo.xor"(%1473, %1299) {name = "xor.2079"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1475 = "mhlo.convert"(%1474) {name = "convert.2086"} : (tensor<ui32>) -> tensor<ui64>
        %cst_489 = "std.constant"() {name = "constant.2087", value = dense<3528531795> : tensor<ui64>} : () -> tensor<ui64>
        %1476 = "mhlo.multiply"(%1475, %cst_489) {name = "multiply.2088"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %cst_490 = "std.constant"() {name = "constant.2090", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1477 = "mhlo.shift_right_logical"(%1476, %cst_490) {name = "shift-right-logical.2091"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1478 = "mhlo.convert"(%1477) {name = "convert.2092"} : (tensor<ui64>) -> tensor<ui32>
        %1479 = "mhlo.convert"(%1432) {name = "convert.2067"} : (tensor<ui64>) -> tensor<ui32>
        %1480 = "mhlo.xor"(%1478, %1479) {name = "xor.2102"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1481 = "mhlo.xor"(%1480, %1310) {name = "xor.2103"} : (tensor<ui32>, tensor<ui32>) -> tensor<ui32>
        %1482 = "mhlo.convert"(%1481) {name = "convert.2114"} : (tensor<ui32>) -> tensor<ui64>
        %1483 = "mhlo.convert"(%1476) {name = "convert.2089"} : (tensor<ui64>) -> tensor<ui32>
        %1484 = "mhlo.convert"(%1483) {name = "convert.2115"} : (tensor<ui32>) -> tensor<ui64>
        %cst_491 = "std.constant"() {name = "constant.2116", value = dense<32> : tensor<ui64>} : () -> tensor<ui64>
        %1485 = "mhlo.shift_left"(%1484, %cst_491) {name = "shift-left.2117"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1486 = "mhlo.or"(%1482, %1485) {name = "or.2118"} : (tensor<ui64>, tensor<ui64>) -> tensor<ui64>
        %1487 = "mhlo.reshape"(%1486) {name = "reshape.2120"} : (tensor<ui64>) -> tensor<1xui64>
        %1488 = "mhlo.concatenate"(%1469, %1487) {dimension = 0 : i64} : (tensor<1xui64>, tensor<1xui64>) -> tensor<2xui64>
        %1489 = "mhlo.concatenate"(%1464, %1488) {dimension = 0 : i64} : (tensor<1xui64>, tensor<2xui64>) -> tensor<3xui64>
        %1490 = "mhlo.rng_bit_generator"(%1489) {rng_algorithm = 2 : i32} : (tensor<3xui64>) -> tuple<tensor<3xui64>, tensor<4xui32>>
        %1491 = "mhlo.get_tuple_element"(%1490) {index = 0 : i32, name = "get-tuple-element.2131"} : (tuple<tensor<3xui64>, tensor<4xui32>>) -> tensor<3xui64>
        %cst_492 = "std.constant"() {name = "constant.2179", value = dense<0> : tensor<i32>} : () -> tensor<i32>
        %cst_493 = "std.constant"() {name = "constant.2180", value = dense<-1> : tensor<i32>} : () -> tensor<i32>
        %cst_494 = "std.constant"() {name = "constant.2181", value = dense<0> : tensor<i32>} : () -> tensor<i32>
        %cst_495 = "std.constant"() {name = "constant.2182", value = dense<0> : tensor<i32>} : () -> tensor<i32>
        %cst_496 = "std.constant"() {name = "constant.2183", value = dense<-1> : tensor<i32>} : () -> tensor<i32>
        %cst_497 = "std.constant"() {name = "constant.2184", value = dense<0> : tensor<i32>} : () -> tensor<i32>
        %cst_498 = "std.constant"() {name = "constant.1837", value = dense<6.28318548> : tensor<f32>} : () -> tensor<f32>
        %1492 = "mhlo.broadcast_in_dim"(%cst_498) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1838"} : (tensor<f32>) -> tensor<2xf32>
        %1493 = "mhlo.get_tuple_element"(%1290) {index = 1 : i32, name = "get-tuple-element.1818"} : (tuple<tensor<3xui64>, tensor<4xui32>>) -> tensor<4xui32>
        %cst_499 = "std.constant"() {name = "constant.1820", value = dense<9> : tensor<ui32>} : () -> tensor<ui32>
        %1494 = "mhlo.broadcast_in_dim"(%cst_499) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1821"} : (tensor<ui32>) -> tensor<4xui32>
        %1495 = "mhlo.shift_right_logical"(%1493, %1494) {name = "shift-right-logical.1822"} : (tensor<4xui32>, tensor<4xui32>) -> tensor<4xui32>
        %1496 = "mhlo.convert"(%1495) {name = "convert.1823"} : (tensor<4xui32>) -> tensor<4xf32>
        %cst_500 = "std.constant"() {name = "constant.1824", value = dense<1.1920929E-7> : tensor<f32>} : () -> tensor<f32>
        %1497 = "mhlo.broadcast_in_dim"(%cst_500) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1825"} : (tensor<f32>) -> tensor<4xf32>
        %1498 = "mhlo.multiply"(%1496, %1497) {name = "multiply.1826"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %cst_501 = "std.constant"() {name = "constant.1559", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %cst_502 = "std.constant"() {name = "constant.1558", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1499 = "mhlo.subtract"(%cst_501, %cst_502) {name = "subtract.1827"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1500 = "mhlo.broadcast_in_dim"(%1499) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1828"} : (tensor<f32>) -> tensor<4xf32>
        %1501 = "mhlo.multiply"(%1498, %1500) {name = "multiply.1829"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1502 = "mhlo.broadcast_in_dim"(%cst_502) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1830"} : (tensor<f32>) -> tensor<4xf32>
        %1503 = "mhlo.add"(%1501, %1502) {name = "add.1831"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1504 = "mhlo.slice"(%1503) {limit_indices = dense<4> : tensor<1xi64>, start_indices = dense<2> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xf32>) -> tensor<2xf32>
        %1505 = "mhlo.multiply"(%1492, %1504) {name = "multiply.1839"} : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1506 = "mhlo.sine"(%1505) {name = "sine.1845"} : (tensor<2xf32>) -> tensor<2xf32>
        %cst_503 = "std.constant"() {name = "constant.1840", value = dense<-2.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1507 = "mhlo.broadcast_in_dim"(%cst_503) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1842"} : (tensor<f32>) -> tensor<2xf32>
        %1508 = "mhlo.slice"(%1503) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xf32>) -> tensor<2xf32>
        %cst_504 = "std.constant"() {name = "constant.1834", value = dense<1.000000e-07> : tensor<f32>} : () -> tensor<f32>
        %1509 = "mhlo.broadcast_in_dim"(%cst_504) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1835"} : (tensor<f32>) -> tensor<2xf32>
        %1510 = "mhlo.maximum"(%1508, %1509) {name = "maximum.1836"} : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1511 = "mhlo.log"(%1510) {name = "log.1841"} : (tensor<2xf32>) -> tensor<2xf32>
        %1512 = "mhlo.multiply"(%1507, %1511) {name = "multiply.1843"} : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1513 = "mhlo.sqrt"(%1512) {name = "sqrt.1844"} : (tensor<2xf32>) -> tensor<2xf32>
        %1514 = "mhlo.multiply"(%1506, %1513) {name = "multiply.1846"} : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1515 = "mhlo.cosine"(%1505) {name = "cosine.1847"} : (tensor<2xf32>) -> tensor<2xf32>
        %1516 = "mhlo.multiply"(%1515, %1513) {name = "multiply.1848"} : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1517 = "mhlo.concatenate"(%1514, %1516) {dimension = 0 : i64} : (tensor<2xf32>, tensor<2xf32>) -> tensor<4xf32>
        %1518 = "mhlo.reshape"(%1517) {name = "reshape.1850"} : (tensor<4xf32>) -> tensor<4xf32>
        %cst_505 = "std.constant"() {name = "constant.1851", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1519 = "mhlo.broadcast_in_dim"(%cst_505) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1852"} : (tensor<f32>) -> tensor<4xf32>
        %1520 = "mhlo.multiply"(%1518, %1519) {name = "multiply.1853"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %cst_506 = "std.constant"() {name = "constant.1854", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1521 = "mhlo.broadcast_in_dim"(%cst_506) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1855"} : (tensor<f32>) -> tensor<4xf32>
        %1522 = "mhlo.add"(%1520, %1521) {name = "add.1856"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %cst_507 = "std.constant"() {name = "constant.2170", value = dense<5.000000e-01> : tensor<f32>} : () -> tensor<f32>
        %1523 = "mhlo.broadcast_in_dim"(%cst_507) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2171"} : (tensor<f32>) -> tensor<4xf32>
        %1524 = "mhlo.get_tuple_element"(%arg10) {index = 33 : i32, name = "get-tuple-element.650"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
        %1525 = "mhlo.multiply"(%1523, %1524) {name = "multiply.2172"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1526 = "mhlo.get_tuple_element"(%arg10) {index = 8 : i32, name = "get-tuple-element.625"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
        %1527 = "mhlo.multiply"(%1525, %1526) {name = "multiply.2177"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1528 = "mhlo.add"(%1522, %1527) {name = "add.2178"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1529 = "mhlo.get_tuple_element"(%arg10) {index = 5 : i32, name = "get-tuple-element.622"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
        %1530 = "mhlo.get_tuple_element"(%arg10) {index = 7 : i32, name = "get-tuple-element.624"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
        %1531 = "mhlo.get_tuple_element"(%arg10) {index = 12 : i32, name = "get-tuple-element.629"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
        %1532 = "mhlo.get_tuple_element"(%arg10) {index = 35 : i32, name = "get-tuple-element.652"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
        %1533 = "mhlo.get_tuple_element"(%arg10) {index = 36 : i32, name = "get-tuple-element.653"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
        %1534 = "mhlo.tuple"(%cst_495, %cst_496, %cst_497, %1528, %1529, %1530, %1526, %1531, %1524, %1532, %1533) {name = "tuple.2185"} : (tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>
        %1535 = "mhlo.while"(%1534) ( {
        ^bb0(%arg11: tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>):  // no predecessors
          %1690 = "std.call"(%arg11) {callee = @mcmc_sample_chain_trace_scan_while_smart_for_loop_while_dual_averaging_step_size_adaptation___init____one_step_transformed_kernel_one_step_mh_one_step_hmc_kernel_one_step_leapfrog_integrate_while_cond_514__.596} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tuple<tensor<i1>>
          %1691 = "mhlo.get_tuple_element"(%1690) {index = 0 : i32, name = "get-tuple-element.614"} : (tuple<tensor<i1>>) -> tensor<i1>
          "mhlo.return"(%1691) : (tensor<i1>) -> ()
        },  {
        ^bb0(%arg11: tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>):  // no predecessors
          %1690 = "mhlo.get_tuple_element"(%arg11) {index = 5 : i32, name = "get-tuple-element.389"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
          %1691 = "mhlo.get_tuple_element"(%arg11) {index = 6 : i32, name = "get-tuple-element.390"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
          %cst_531 = "std.constant"() {name = "constant.398", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1692 = "mhlo.broadcast_in_dim"(%cst_531) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.399"} : (tensor<f32>) -> tensor<4xf32>
          %1693 = "mhlo.convert"(%1692) {name = "convert.400"} : (tensor<4xf32>) -> tensor<4xf32>
          %cst_532 = "std.constant"() {name = "constant.401", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1694 = "mhlo.convert"(%cst_532) {name = "convert.402"} : (tensor<f32>) -> tensor<f32>
          %1695 = "mhlo.reduce"(%1693, %1694) ( {
          ^bb0(%arg12: tensor<f32>, %arg13: tensor<f32>):  // no predecessors
            %1860 = "mhlo.add"(%arg12, %arg13) {name = "add.353"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
            "mhlo.return"(%1860) : (tensor<f32>) -> ()
          }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
          %1696 = "mhlo.convert"(%1695) {name = "convert.404"} : (tensor<f32>) -> tensor<f32>
          %1697 = "mhlo.reshape"(%1696) {name = "reshape.405"} : (tensor<f32>) -> tensor<f32>
          %cst_533 = "std.constant"() {name = "constant.395", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1698 = "mhlo.broadcast_in_dim"(%cst_533) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.396"} : (tensor<f32>) -> tensor<4xf32>
          %1699 = "mhlo.negate"(%1698) {name = "negate.397"} : (tensor<4xf32>) -> tensor<4xf32>
          %1700 = "mhlo.convert"(%1699) {name = "convert.406"} : (tensor<4xf32>) -> tensor<4xf32>
          %cst_534 = "std.constant"() {name = "constant.407", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1701 = "mhlo.convert"(%cst_534) {name = "convert.408"} : (tensor<f32>) -> tensor<f32>
          %1702 = "mhlo.reduce"(%1700, %1701) ( {
          ^bb0(%arg12: tensor<f32>, %arg13: tensor<f32>):  // no predecessors
            %1860 = "mhlo.add"(%arg12, %arg13) {name = "add.357"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
            "mhlo.return"(%1860) : (tensor<f32>) -> ()
          }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
          %1703 = "mhlo.convert"(%1702) {name = "convert.410"} : (tensor<f32>) -> tensor<f32>
          %1704 = "mhlo.reshape"(%1703) {name = "reshape.411"} : (tensor<f32>) -> tensor<f32>
          %cst_535 = "std.constant"() {name = "constant.416", value = dense<4> : tensor<1xi32>} : () -> tensor<1xi32>
          %cst_536 = "std.constant"() {name = "constant.417", value = dense<0> : tensor<i32>} : () -> tensor<i32>
          %1705 = "mhlo.broadcast_in_dim"(%cst_536) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.419"} : (tensor<i32>) -> tensor<1xi32>
          %1706 = "mhlo.compare"(%cst_535, %1705) {comparison_direction = "LT", name = "compare.420"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi1>
          %cst_537 = "std.constant"() {name = "constant.412", value = dense<4> : tensor<1xi32>} : () -> tensor<1xi32>
          %cst_538 = "std.constant"() {name = "constant.413", value = dense<1> : tensor<i32>} : () -> tensor<i32>
          %1707 = "mhlo.broadcast_in_dim"(%cst_538) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.414"} : (tensor<i32>) -> tensor<1xi32>
          %1708 = "mhlo.maximum"(%cst_537, %1707) {name = "maximum.415"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
          %1709 = "mhlo.broadcast_in_dim"(%cst_536) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.421"} : (tensor<i32>) -> tensor<1xi32>
          %1710 = "mhlo.compare"(%1708, %1709) {comparison_direction = "LT", name = "compare.422"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi1>
          %1711 = "mhlo.compare"(%1706, %1710) {comparison_direction = "NE", name = "compare.423"} : (tensor<1xi1>, tensor<1xi1>) -> tensor<1xi1>
          %1712 = "mhlo.abs"(%cst_535) {name = "abs.424"} : (tensor<1xi32>) -> tensor<1xi32>
          %1713 = "mhlo.abs"(%1708) {name = "abs.425"} : (tensor<1xi32>) -> tensor<1xi32>
          %1714 = "mhlo.add"(%1712, %1713) {name = "add.426"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
          %cst_539 = "std.constant"() {name = "constant.418", value = dense<1> : tensor<i32>} : () -> tensor<i32>
          %1715 = "mhlo.broadcast_in_dim"(%cst_539) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.427"} : (tensor<i32>) -> tensor<1xi32>
          %1716 = "mhlo.subtract"(%1714, %1715) {name = "subtract.428"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
          %1717 = "mhlo.negate"(%1716) {name = "negate.429"} : (tensor<1xi32>) -> tensor<1xi32>
          %1718 = "mhlo.divide"(%1717, %1713) {name = "divide.430"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
          %1719 = "mhlo.divide"(%cst_535, %1708) {name = "divide.431"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
          %1720 = "mhlo.select"(%1711, %1718, %1719) {name = "select.432"} : (tensor<1xi1>, tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
          %cst_540 = "std.constant"() {name = "constant.433", value = dense<-5.000000e-01> : tensor<f32>} : () -> tensor<f32>
          %1721 = "mhlo.broadcast_in_dim"(%cst_540) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.436"} : (tensor<f32>) -> tensor<4xf32>
          %cst_541 = "std.constant"() {name = "constant.434", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1722 = "mhlo.broadcast_in_dim"(%cst_541) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.435"} : (tensor<f32>) -> tensor<4xf32>
          %1723 = "mhlo.multiply"(%1721, %1722) {name = "multiply.437"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %cst_542 = "std.constant"() {name = "constant.438", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1724 = "mhlo.broadcast_in_dim"(%cst_542) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.441"} : (tensor<f32>) -> tensor<4xf32>
          %cst_543 = "std.constant"() {name = "constant.439", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1725 = "mhlo.broadcast_in_dim"(%cst_543) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.440"} : (tensor<f32>) -> tensor<4xf32>
          %1726 = "mhlo.multiply"(%1724, %1725) {name = "multiply.442"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %cst_544 = "std.constant"() {name = "constant.503", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1727 = "mhlo.broadcast_in_dim"(%cst_544) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.504"} : (tensor<f32>) -> tensor<4xf32>
          %1728 = "mhlo.get_tuple_element"(%arg11) {index = 4 : i32, name = "get-tuple-element.388"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
          %1729 = "mhlo.get_tuple_element"(%arg11) {index = 8 : i32, name = "get-tuple-element.392"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
          %1730 = "mhlo.get_tuple_element"(%arg11) {index = 3 : i32, name = "get-tuple-element.387"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
          %1731 = "mhlo.multiply"(%1729, %1730) {name = "multiply.455"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1732 = "mhlo.add"(%1728, %1731) {name = "add.456"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1733 = "mhlo.exponential"(%1732) {name = "exponential.486"} : (tensor<4xf32>) -> tensor<4xf32>
          %1734 = "mhlo.log"(%1733) {name = "log.493"} : (tensor<4xf32>) -> tensor<4xf32>
          %1735 = "mhlo.get_tuple_element"(%arg11) {index = 9 : i32, name = "get-tuple-element.393"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<f32>
          %1736 = "mhlo.broadcast_in_dim"(%1735) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.499"} : (tensor<f32>) -> tensor<4xf32>
          %1737 = "mhlo.divide"(%1734, %1736) {name = "divide.500"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1738 = "mhlo.get_tuple_element"(%arg11) {index = 10 : i32, name = "get-tuple-element.394"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<f32>
          %1739 = "mhlo.divide"(%1738, %1735) {name = "divide.450"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
          %1740 = "mhlo.broadcast_in_dim"(%1739) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.501"} : (tensor<f32>) -> tensor<4xf32>
          %1741 = "mhlo.subtract"(%1737, %1740) {name = "subtract.502"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1742 = "mhlo.multiply"(%1727, %1741) {name = "multiply.505"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1743 = "mhlo.convert"(%1742) {name = "convert.506"} : (tensor<4xf32>) -> tensor<4xf32>
          %cst_545 = "std.constant"() {name = "constant.507", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1744 = "mhlo.convert"(%cst_545) {name = "convert.508"} : (tensor<f32>) -> tensor<f32>
          %1745 = "mhlo.reduce"(%1743, %1744) ( {
          ^bb0(%arg12: tensor<f32>, %arg13: tensor<f32>):  // no predecessors
            %1860 = "mhlo.add"(%arg12, %arg13) {name = "add.361"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
            "mhlo.return"(%1860) : (tensor<f32>) -> ()
          }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
          %1746 = "mhlo.convert"(%1745) {name = "convert.510"} : (tensor<f32>) -> tensor<f32>
          %1747 = "mhlo.reshape"(%1746) {name = "reshape.511"} : (tensor<f32>) -> tensor<f32>
          %1748 = "mhlo.negate"(%1747) {name = "negate.512"} : (tensor<f32>) -> tensor<f32>
          %1749 = "mhlo.negate"(%1734) {name = "negate.494"} : (tensor<4xf32>) -> tensor<4xf32>
          %1750 = "mhlo.broadcast_in_dim"(%1735) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.495"} : (tensor<f32>) -> tensor<4xf32>
          %1751 = "mhlo.divide"(%1749, %1750) {name = "divide.496"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1752 = "mhlo.broadcast_in_dim"(%1735) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.497"} : (tensor<f32>) -> tensor<4xf32>
          %1753 = "mhlo.divide"(%1751, %1752) {name = "divide.498"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1754 = "mhlo.multiply"(%1742, %1753) {name = "multiply.527"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1755 = "mhlo.convert"(%1754) {name = "convert.528"} : (tensor<4xf32>) -> tensor<4xf32>
          %cst_546 = "std.constant"() {name = "constant.529", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1756 = "mhlo.convert"(%cst_546) {name = "convert.530"} : (tensor<f32>) -> tensor<f32>
          %1757 = "mhlo.reduce"(%1755, %1756) ( {
          ^bb0(%arg12: tensor<f32>, %arg13: tensor<f32>):  // no predecessors
            %1860 = "mhlo.add"(%arg12, %arg13) {name = "add.365"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
            "mhlo.return"(%1860) : (tensor<f32>) -> ()
          }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
          %1758 = "mhlo.convert"(%1757) {name = "convert.532"} : (tensor<f32>) -> tensor<f32>
          %1759 = "mhlo.reshape"(%1758) {name = "reshape.533"} : (tensor<f32>) -> tensor<f32>
          %cst_547 = "std.constant"() {name = "constant.537", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1760 = "mhlo.broadcast_in_dim"(%cst_547) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.538"} : (tensor<f32>) -> tensor<4xf32>
          %1761 = "mhlo.broadcast_in_dim"(%1739) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.534"} : (tensor<f32>) -> tensor<4xf32>
          %1762 = "mhlo.subtract"(%1737, %1761) {name = "subtract.535"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1763 = "mhlo.multiply"(%1762, %1762) {name = "multiply.536"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1764 = "mhlo.multiply"(%1760, %1763) {name = "multiply.539"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1765 = "mhlo.convert"(%1764) {name = "convert.540"} : (tensor<4xf32>) -> tensor<4xf32>
          %cst_548 = "std.constant"() {name = "constant.541", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1766 = "mhlo.convert"(%cst_548) {name = "convert.542"} : (tensor<f32>) -> tensor<f32>
          %1767 = "mhlo.reduce"(%1765, %1766) ( {
          ^bb0(%arg12: tensor<f32>, %arg13: tensor<f32>):  // no predecessors
            %1860 = "mhlo.add"(%arg12, %arg13) {name = "add.369"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
            "mhlo.return"(%1860) : (tensor<f32>) -> ()
          }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
          %1768 = "mhlo.convert"(%1767) {name = "convert.544"} : (tensor<f32>) -> tensor<f32>
          %1769 = "mhlo.reshape"(%1768) {name = "reshape.545"} : (tensor<f32>) -> tensor<f32>
          %cst_549 = "std.constant"() {name = "constant.552", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1770 = "mhlo.broadcast_in_dim"(%cst_549) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.553"} : (tensor<f32>) -> tensor<4xf32>
          %1771 = "mhlo.log"(%1733) {name = "log.551"} : (tensor<4xf32>) -> tensor<4xf32>
          %1772 = "mhlo.multiply"(%1770, %1771) {name = "multiply.554"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1773 = "mhlo.convert"(%1772) {name = "convert.555"} : (tensor<4xf32>) -> tensor<4xf32>
          %cst_550 = "std.constant"() {name = "constant.556", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1774 = "mhlo.convert"(%cst_550) {name = "convert.557"} : (tensor<f32>) -> tensor<f32>
          %1775 = "mhlo.reduce"(%1773, %1774) ( {
          ^bb0(%arg12: tensor<f32>, %arg13: tensor<f32>):  // no predecessors
            %1860 = "mhlo.add"(%arg12, %arg13) {name = "add.373"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
            "mhlo.return"(%1860) : (tensor<f32>) -> ()
          }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
          %1776 = "mhlo.convert"(%1775) {name = "convert.559"} : (tensor<f32>) -> tensor<f32>
          %1777 = "mhlo.reshape"(%1776) {name = "reshape.560"} : (tensor<f32>) -> tensor<f32>
          %cst_551 = "std.constant"() {name = "constant.564", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1778 = "mhlo.broadcast_in_dim"(%cst_551) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.565"} : (tensor<f32>) -> tensor<4xf32>
          %cst_552 = "std.constant"() {name = "constant.561", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1779 = "mhlo.broadcast_in_dim"(%cst_552) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.562"} : (tensor<f32>) -> tensor<4xf32>
          %1780 = "mhlo.multiply"(%1779, %1771) {name = "multiply.563"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1781 = "mhlo.multiply"(%1778, %1780) {name = "multiply.566"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1782 = "mhlo.convert"(%1781) {name = "convert.567"} : (tensor<4xf32>) -> tensor<4xf32>
          %cst_553 = "std.constant"() {name = "constant.568", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1783 = "mhlo.convert"(%cst_553) {name = "convert.569"} : (tensor<f32>) -> tensor<f32>
          %1784 = "mhlo.reduce"(%1782, %1783) ( {
          ^bb0(%arg12: tensor<f32>, %arg13: tensor<f32>):  // no predecessors
            %1860 = "mhlo.add"(%arg12, %arg13) {name = "add.377"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
            "mhlo.return"(%1860) : (tensor<f32>) -> ()
          }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
          %1785 = "mhlo.convert"(%1784) {name = "convert.571"} : (tensor<f32>) -> tensor<f32>
          %1786 = "mhlo.reshape"(%1785) {name = "reshape.572"} : (tensor<f32>) -> tensor<f32>
          %cst_554 = "std.constant"() {name = "constant.546", value = dense<-5.000000e-01> : tensor<f32>} : () -> tensor<f32>
          %1787 = "mhlo.broadcast_in_dim"(%cst_554) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.547"} : (tensor<f32>) -> tensor<4xf32>
          %1788 = "mhlo.multiply"(%1787, %1763) {name = "multiply.548"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %cst_555 = "std.constant"() {name = "constant.447", value = dense<0.918938517> : tensor<f32>} : () -> tensor<f32>
          %1789 = "mhlo.log"(%1735) {name = "log.446"} : (tensor<f32>) -> tensor<f32>
          %1790 = "mhlo.add"(%cst_555, %1789) {name = "add.448"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
          %1791 = "mhlo.broadcast_in_dim"(%1790) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.549"} : (tensor<f32>) -> tensor<4xf32>
          %1792 = "mhlo.subtract"(%1788, %1791) {name = "subtract.550"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %cst_556 = "std.constant"() {name = "constant.573", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1793 = "mhlo.broadcast_in_dim"(%cst_556) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.574"} : (tensor<f32>) -> tensor<4xf32>
          %1794 = "mhlo.multiply"(%1793, %1780) {name = "multiply.575"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1795 = "mhlo.add"(%1792, %1794) {name = "add.576"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %cst_557 = "std.constant"() {name = "constant.582", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1796 = "mhlo.broadcast_in_dim"(%cst_557) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.583"} : (tensor<f32>) -> tensor<4xf32>
          %cst_558 = "std.constant"() {name = "constant.578", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1797 = "mhlo.broadcast_in_dim"(%cst_558) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.579"} : (tensor<f32>) -> tensor<4xf32>
          %1798 = "mhlo.negate"(%1732) {name = "negate.577"} : (tensor<4xf32>) -> tensor<4xf32>
          %1799 = "mhlo.multiply"(%1797, %1798) {name = "multiply.580"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1800 = "mhlo.negate"(%1799) {name = "negate.581"} : (tensor<4xf32>) -> tensor<4xf32>
          %1801 = "mhlo.add"(%1796, %1800) {name = "add.584"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1802 = "mhlo.add"(%1795, %1801) {name = "add.585"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %cst_559 = "std.constant"() {name = "constant.586", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1803 = "mhlo.broadcast_in_dim"(%cst_559) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.587"} : (tensor<f32>) -> tensor<4xf32>
          %1804 = "mhlo.multiply"(%1803, %1798) {name = "multiply.588"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1805 = "mhlo.convert"(%1804) {name = "convert.589"} : (tensor<4xf32>) -> tensor<4xf32>
          %cst_560 = "std.constant"() {name = "constant.590", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1806 = "mhlo.convert"(%cst_560) {name = "convert.591"} : (tensor<f32>) -> tensor<f32>
          %1807 = "mhlo.reduce"(%1805, %1806) ( {
          ^bb0(%arg12: tensor<f32>, %arg13: tensor<f32>):  // no predecessors
            %1860 = "mhlo.add"(%arg12, %arg13) {name = "add.381"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
            "mhlo.return"(%1860) : (tensor<f32>) -> ()
          }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<4xf32>, tensor<f32>) -> tensor<f32>
          %1808 = "mhlo.convert"(%1807) {name = "convert.593"} : (tensor<f32>) -> tensor<f32>
          %1809 = "mhlo.reshape"(%1808) {name = "reshape.594"} : (tensor<f32>) -> tensor<f32>
          %1810 = "mhlo.get_tuple_element"(%arg11) {index = 0 : i32, name = "get-tuple-element.384"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
          %cst_561 = "std.constant"() {name = "constant.451", value = dense<1> : tensor<i32>} : () -> tensor<i32>
          %1811 = "mhlo.add"(%1810, %cst_561) {name = "add.452"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
          %1812 = "mhlo.get_tuple_element"(%arg11) {index = 1 : i32, name = "get-tuple-element.385"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
          %1813 = "mhlo.get_tuple_element"(%arg11) {index = 2 : i32, name = "get-tuple-element.386"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
          %cst_562 = "std.constant"() {name = "constant.453", value = dense<1> : tensor<i32>} : () -> tensor<i32>
          %1814 = "mhlo.add"(%1813, %cst_562) {name = "add.454"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
          %cst_563 = "std.constant"() {name = "constant.522", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1815 = "mhlo.broadcast_in_dim"(%cst_563) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.523"} : (tensor<f32>) -> tensor<4xf32>
          %cst_564 = "std.constant"() {name = "constant.490", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1816 = "mhlo.broadcast_in_dim"(%cst_564) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.491"} : (tensor<f32>) -> tensor<4xf32>
          %cst_565 = "std.constant"() {name = "constant.487", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1817 = "mhlo.broadcast_in_dim"(%cst_565) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.488"} : (tensor<f32>) -> tensor<4xf32>
          %1818 = "mhlo.divide"(%1817, %1733) {name = "divide.489"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1819 = "mhlo.multiply"(%1816, %1818) {name = "multiply.492"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1820 = "mhlo.broadcast_in_dim"(%1735) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.513"} : (tensor<f32>) -> tensor<4xf32>
          %1821 = "mhlo.divide"(%1742, %1820) {name = "divide.514"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1822 = "mhlo.reshape"(%1821) {name = "reshape.515"} : (tensor<4xf32>) -> tensor<4xf32>
          %cst_566 = "std.constant"() {name = "constant.516", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1823 = "mhlo.broadcast_in_dim"(%cst_566) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.517"} : (tensor<f32>) -> tensor<4xf32>
          %1824 = "mhlo.divide"(%1823, %1733) {name = "divide.518"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1825 = "mhlo.multiply"(%1822, %1824) {name = "multiply.519"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1826 = "mhlo.add"(%1819, %1825) {name = "add.520"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1827 = "mhlo.multiply"(%1826, %1733) {name = "multiply.521"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1828 = "mhlo.add"(%1815, %1827) {name = "add.524"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1829 = "mhlo.multiply"(%1729, %1828) {name = "multiply.525"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1830 = "mhlo.add"(%1730, %1829) {name = "add.526"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %cst_567 = "std.constant"() {name = "constant.464", value = dense<-5.000000e-01> : tensor<f32>} : () -> tensor<f32>
          %1831 = "mhlo.broadcast_in_dim"(%cst_567) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.465"} : (tensor<f32>) -> tensor<4xf32>
          %1832 = "mhlo.exponential"(%1732) {name = "exponential.457"} : (tensor<4xf32>) -> tensor<4xf32>
          %1833 = "mhlo.log"(%1832) {name = "log.458"} : (tensor<4xf32>) -> tensor<4xf32>
          %1834 = "mhlo.broadcast_in_dim"(%1735) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.459"} : (tensor<f32>) -> tensor<4xf32>
          %1835 = "mhlo.divide"(%1833, %1834) {name = "divide.460"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1836 = "mhlo.divide"(%1738, %1735) {name = "divide.449"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
          %1837 = "mhlo.broadcast_in_dim"(%1836) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.461"} : (tensor<f32>) -> tensor<4xf32>
          %1838 = "mhlo.subtract"(%1835, %1837) {name = "subtract.462"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1839 = "mhlo.multiply"(%1838, %1838) {name = "multiply.463"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1840 = "mhlo.multiply"(%1831, %1839) {name = "multiply.466"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %cst_568 = "std.constant"() {name = "constant.444", value = dense<0.918938517> : tensor<f32>} : () -> tensor<f32>
          %1841 = "mhlo.log"(%1735) {name = "log.443"} : (tensor<f32>) -> tensor<f32>
          %1842 = "mhlo.add"(%cst_568, %1841) {name = "add.445"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
          %1843 = "mhlo.broadcast_in_dim"(%1842) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.467"} : (tensor<f32>) -> tensor<4xf32>
          %1844 = "mhlo.subtract"(%1840, %1843) {name = "subtract.468"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %cst_569 = "std.constant"() {name = "constant.473", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1845 = "mhlo.broadcast_in_dim"(%cst_569) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.474"} : (tensor<f32>) -> tensor<4xf32>
          %cst_570 = "std.constant"() {name = "constant.470", value = dense<-1.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1846 = "mhlo.broadcast_in_dim"(%cst_570) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.471"} : (tensor<f32>) -> tensor<4xf32>
          %1847 = "mhlo.log"(%1832) {name = "log.469"} : (tensor<4xf32>) -> tensor<4xf32>
          %1848 = "mhlo.multiply"(%1846, %1847) {name = "multiply.472"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1849 = "mhlo.multiply"(%1845, %1848) {name = "multiply.475"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1850 = "mhlo.add"(%1844, %1849) {name = "add.476"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %cst_571 = "std.constant"() {name = "constant.482", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1851 = "mhlo.broadcast_in_dim"(%cst_571) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.483"} : (tensor<f32>) -> tensor<4xf32>
          %cst_572 = "std.constant"() {name = "constant.478", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
          %1852 = "mhlo.broadcast_in_dim"(%cst_572) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.479"} : (tensor<f32>) -> tensor<4xf32>
          %1853 = "mhlo.negate"(%1732) {name = "negate.477"} : (tensor<4xf32>) -> tensor<4xf32>
          %1854 = "mhlo.multiply"(%1852, %1853) {name = "multiply.480"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1855 = "mhlo.negate"(%1854) {name = "negate.481"} : (tensor<4xf32>) -> tensor<4xf32>
          %1856 = "mhlo.add"(%1851, %1855) {name = "add.484"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1857 = "mhlo.add"(%1850, %1856) {name = "add.485"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
          %1858 = "mhlo.get_tuple_element"(%arg11) {index = 7 : i32, name = "get-tuple-element.391"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
          %1859 = "mhlo.tuple"(%1811, %1812, %1814, %1830, %1732, %1857, %1828, %1858, %1729, %1735, %1738) {name = "tuple.595"} : (tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>
          "mhlo.return"(%1859) : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> ()
        }) : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>
        %1536 = "mhlo.get_tuple_element"(%1535) {index = 0 : i32, name = "get-tuple-element.2187"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
        %1537 = "mhlo.get_tuple_element"(%1535) {index = 1 : i32, name = "get-tuple-element.2188"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
        %1538 = "mhlo.get_tuple_element"(%1535) {index = 2 : i32, name = "get-tuple-element.2189"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
        %1539 = "mhlo.get_tuple_element"(%1535) {index = 3 : i32, name = "get-tuple-element.2190"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
        %1540 = "mhlo.get_tuple_element"(%1535) {index = 4 : i32, name = "get-tuple-element.2191"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
        %1541 = "mhlo.get_tuple_element"(%1535) {index = 5 : i32, name = "get-tuple-element.2192"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
        %1542 = "mhlo.get_tuple_element"(%1535) {index = 6 : i32, name = "get-tuple-element.2193"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
        %1543 = "mhlo.get_tuple_element"(%1535) {index = 7 : i32, name = "get-tuple-element.2194"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
        %1544 = "mhlo.get_tuple_element"(%1535) {index = 8 : i32, name = "get-tuple-element.2195"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
        %1545 = "mhlo.get_tuple_element"(%1535) {index = 9 : i32, name = "get-tuple-element.2196"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<f32>
        %1546 = "mhlo.get_tuple_element"(%1535) {index = 10 : i32, name = "get-tuple-element.2197"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<f32>
        %1547 = "mhlo.tuple"(%1536, %1537, %1538, %1539, %1540, %1541, %1542, %1543, %1544, %1545, %1546) {name = "tuple.2198"} : (tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>
        %1548 = "mhlo.get_tuple_element"(%1547) {index = 0 : i32, name = "get-tuple-element.2199"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
        %1549 = "mhlo.get_tuple_element"(%1547) {index = 1 : i32, name = "get-tuple-element.2200"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
        %1550 = "mhlo.get_tuple_element"(%1547) {index = 2 : i32, name = "get-tuple-element.2201"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
        %1551 = "mhlo.get_tuple_element"(%1547) {index = 7 : i32, name = "get-tuple-element.2206"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<i32>
        %1552 = "mhlo.get_tuple_element"(%1547) {index = 8 : i32, name = "get-tuple-element.2207"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
        %1553 = "mhlo.get_tuple_element"(%1547) {index = 9 : i32, name = "get-tuple-element.2208"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<f32>
        %1554 = "mhlo.get_tuple_element"(%1547) {index = 10 : i32, name = "get-tuple-element.2209"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<f32>
        %1555 = "mhlo.get_tuple_element"(%arg10) {index = 0 : i32, name = "get-tuple-element.617"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
        %cst_508 = "std.constant"() {name = "constant.721", value = dense<1> : tensor<i32>} : () -> tensor<i32>
        %1556 = "mhlo.add"(%1555, %cst_508) {name = "add.722"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
        %1557 = "mhlo.get_tuple_element"(%arg10) {index = 1 : i32, name = "get-tuple-element.618"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
        %1558 = "mhlo.get_tuple_element"(%arg10) {index = 2 : i32, name = "get-tuple-element.619"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
        %cst_509 = "std.constant"() {name = "constant.723", value = dense<1> : tensor<i32>} : () -> tensor<i32>
        %1559 = "mhlo.add"(%1558, %cst_509) {name = "add.724"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
        %1560 = "mhlo.slice"(%707) {limit_indices = dense<2> : tensor<2xi64>, start_indices = dense<[1, 0]> : tensor<2xi64>, strides = dense<1> : tensor<2xi64>} : (tensor<2x2xi32>) -> tensor<1x2xi32>
        %1561 = "mhlo.reshape"(%1560) {name = "reshape.999"} : (tensor<1x2xi32>) -> tensor<2xi32>
        %1562 = "mhlo.get_tuple_element"(%1490) {index = 1 : i32, name = "get-tuple-element.2130"} : (tuple<tensor<3xui64>, tensor<4xui32>>) -> tensor<4xui32>
        %cst_510 = "std.constant"() {name = "constant.2132", value = dense<9> : tensor<ui32>} : () -> tensor<ui32>
        %1563 = "mhlo.broadcast_in_dim"(%cst_510) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2133"} : (tensor<ui32>) -> tensor<4xui32>
        %1564 = "mhlo.shift_right_logical"(%1562, %1563) {name = "shift-right-logical.2134"} : (tensor<4xui32>, tensor<4xui32>) -> tensor<4xui32>
        %1565 = "mhlo.convert"(%1564) {name = "convert.2135"} : (tensor<4xui32>) -> tensor<4xf32>
        %cst_511 = "std.constant"() {name = "constant.2136", value = dense<1.1920929E-7> : tensor<f32>} : () -> tensor<f32>
        %1566 = "mhlo.broadcast_in_dim"(%cst_511) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2137"} : (tensor<f32>) -> tensor<4xf32>
        %1567 = "mhlo.multiply"(%1565, %1566) {name = "multiply.2138"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %cst_512 = "std.constant"() {name = "constant.1861", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %cst_513 = "std.constant"() {name = "constant.1860", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1568 = "mhlo.subtract"(%cst_512, %cst_513) {name = "subtract.2139"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1569 = "mhlo.broadcast_in_dim"(%1568) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2140"} : (tensor<f32>) -> tensor<4xf32>
        %1570 = "mhlo.multiply"(%1567, %1569) {name = "multiply.2141"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1571 = "mhlo.broadcast_in_dim"(%cst_513) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2142"} : (tensor<f32>) -> tensor<4xf32>
        %1572 = "mhlo.add"(%1570, %1571) {name = "add.2143"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %cst_514 = "std.constant"() {name = "constant.2144", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1573 = "mhlo.broadcast_in_dim"(%cst_514) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2145"} : (tensor<f32>) -> tensor<4xf32>
        %1574 = "mhlo.multiply"(%1572, %1573) {name = "multiply.2146"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %cst_515 = "std.constant"() {name = "constant.2147", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1575 = "mhlo.broadcast_in_dim"(%cst_515) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2148"} : (tensor<f32>) -> tensor<4xf32>
        %1576 = "mhlo.add"(%1574, %1575) {name = "add.2149"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1577 = "mhlo.log"(%1576) {name = "log.2150"} : (tensor<4xf32>) -> tensor<4xf32>
        %1578 = "mhlo.get_tuple_element"(%1547) {index = 5 : i32, name = "get-tuple-element.2204"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
        %1579 = "mhlo.negate"(%1530) {name = "negate.2176"} : (tensor<4xf32>) -> tensor<4xf32>
        %1580 = "mhlo.add"(%1578, %1579) {name = "add.2224"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %cst_516 = "std.constant"() {name = "constant.2221", value = dense<5.000000e-01> : tensor<f32>} : () -> tensor<f32>
        %1581 = "mhlo.broadcast_in_dim"(%cst_516) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2222"} : (tensor<f32>) -> tensor<4xf32>
        %cst_517 = "std.constant"() {name = "constant.1857", value = dense<2.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1582 = "mhlo.broadcast_in_dim"(%cst_517) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.1858"} : (tensor<f32>) -> tensor<4xf32>
        %1583 = "mhlo.power"(%1522, %1582) {name = "power.1859"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1584 = "mhlo.get_tuple_element"(%1547) {index = 3 : i32, name = "get-tuple-element.2202"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
        %cst_518 = "std.constant"() {name = "constant.2173", value = dense<5.000000e-01> : tensor<f32>} : () -> tensor<f32>
        %1585 = "mhlo.broadcast_in_dim"(%cst_518) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2174"} : (tensor<f32>) -> tensor<4xf32>
        %1586 = "mhlo.multiply"(%1585, %1524) {name = "multiply.2175"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1587 = "mhlo.get_tuple_element"(%1547) {index = 6 : i32, name = "get-tuple-element.2205"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
        %1588 = "mhlo.multiply"(%1586, %1587) {name = "multiply.2210"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1589 = "mhlo.subtract"(%1584, %1588) {name = "subtract.2211"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %cst_519 = "std.constant"() {name = "constant.2212", value = dense<2.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1590 = "mhlo.broadcast_in_dim"(%cst_519) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2213"} : (tensor<f32>) -> tensor<4xf32>
        %1591 = "mhlo.power"(%1589, %1590) {name = "power.2214"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1592 = "mhlo.negate"(%1591) {name = "negate.2215"} : (tensor<4xf32>) -> tensor<4xf32>
        %1593 = "mhlo.add"(%1583, %1592) {name = "add.2216"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1594 = "mhlo.is_finite"(%1593) {name = "is-finite.2217"} : (tensor<4xf32>) -> tensor<4xi1>
        %cst_520 = "std.constant"() {name = "constant.2218", value = dense<0xFF800000> : tensor<f32>} : () -> tensor<f32>
        %1595 = "mhlo.broadcast_in_dim"(%cst_520) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2219"} : (tensor<f32>) -> tensor<4xf32>
        %1596 = "mhlo.select"(%1594, %1593, %1595) {name = "select.2220"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1597 = "mhlo.multiply"(%1581, %1596) {name = "multiply.2223"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1598 = "mhlo.add"(%1580, %1597) {name = "add.2225"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1599 = "mhlo.is_finite"(%1598) {name = "is-finite.2226"} : (tensor<4xf32>) -> tensor<4xi1>
        %cst_521 = "std.constant"() {name = "constant.2227", value = dense<0xFF800000> : tensor<f32>} : () -> tensor<f32>
        %1600 = "mhlo.broadcast_in_dim"(%cst_521) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2228"} : (tensor<f32>) -> tensor<4xf32>
        %1601 = "mhlo.select"(%1599, %1598, %1600) {name = "select.2229"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1602 = "mhlo.compare"(%1577, %1601) {comparison_direction = "LT", name = "compare.2279"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xi1>
        %1603 = "mhlo.reshape"(%1602) {name = "reshape.2288"} : (tensor<4xi1>) -> tensor<4xi1>
        %1604 = "mhlo.get_tuple_element"(%1547) {index = 4 : i32, name = "get-tuple-element.2203"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<f32>, tensor<f32>>) -> tensor<4xf32>
        %1605 = "mhlo.select"(%1603, %1604, %1529) {name = "select.2289"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1606 = "mhlo.exponential"(%1605) {name = "exponential.2290"} : (tensor<4xf32>) -> tensor<4xf32>
        %1607 = "mhlo.reshape"(%1602) {name = "reshape.2280"} : (tensor<4xi1>) -> tensor<4xi1>
        %1608 = "mhlo.get_tuple_element"(%arg10) {index = 6 : i32, name = "get-tuple-element.623"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
        %1609 = "mhlo.select"(%1607, %1597, %1608) {name = "select.2281"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1610 = "mhlo.reshape"(%1602) {name = "reshape.2282"} : (tensor<4xi1>) -> tensor<4xi1>
        %1611 = "mhlo.select"(%1610, %1578, %1530) {name = "select.2283"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1612 = "mhlo.reshape"(%1602) {name = "reshape.2284"} : (tensor<4xi1>) -> tensor<4xi1>
        %1613 = "mhlo.select"(%1612, %1587, %1526) {name = "select.2285"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1614 = "mhlo.reshape"(%1602) {name = "reshape.2286"} : (tensor<4xi1>) -> tensor<4xi1>
        %1615 = "mhlo.get_tuple_element"(%arg10) {index = 9 : i32, name = "get-tuple-element.626"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
        %1616 = "mhlo.select"(%1614, %1522, %1615) {name = "select.2291"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1617 = "mhlo.reshape"(%1602) {name = "reshape.2287"} : (tensor<4xi1>) -> tensor<4xi1>
        %1618 = "mhlo.get_tuple_element"(%arg10) {index = 10 : i32, name = "get-tuple-element.627"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
        %1619 = "mhlo.select"(%1617, %1589, %1618) {name = "select.2292"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1620 = "mhlo.get_tuple_element"(%arg10) {index = 25 : i32, name = "get-tuple-element.642"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
        %1621 = "mhlo.get_tuple_element"(%arg10) {index = 26 : i32, name = "get-tuple-element.643"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
        %1622 = "mhlo.get_tuple_element"(%arg10) {index = 27 : i32, name = "get-tuple-element.644"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
        %1623 = "mhlo.get_tuple_element"(%arg10) {index = 28 : i32, name = "get-tuple-element.645"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
        %1624 = "mhlo.get_tuple_element"(%arg10) {index = 29 : i32, name = "get-tuple-element.646"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
        %1625 = "mhlo.get_tuple_element"(%arg10) {index = 30 : i32, name = "get-tuple-element.647"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
        %1626 = "mhlo.broadcast_in_dim"(%1620) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2152"} : (tensor<f32>) -> tensor<4xf32>
        %1627 = "mhlo.add"(%1625, %1626) {name = "add.2153"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1628 = "mhlo.is_finite"(%1601) {name = "is-finite.2230"} : (tensor<4xf32>) -> tensor<4xi1>
        %cst_522 = "std.constant"() {name = "constant.2231", value = dense<0xFF800000> : tensor<f32>} : () -> tensor<f32>
        %1629 = "mhlo.broadcast_in_dim"(%cst_522) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2232"} : (tensor<f32>) -> tensor<4xf32>
        %1630 = "mhlo.select"(%1628, %1601, %1629) {name = "select.2233"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %cst_523 = "std.constant"() {name = "constant.2234", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1631 = "mhlo.broadcast_in_dim"(%cst_523) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2235"} : (tensor<f32>) -> tensor<4xf32>
        %1632 = "mhlo.minimum"(%1630, %1631) {name = "minimum.2236"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1633 = "mhlo.is_finite"(%1632) {name = "is-finite.2237"} : (tensor<4xf32>) -> tensor<4xi1>
        %cst_524 = "std.constant"() {name = "constant.2238", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1634 = "mhlo.broadcast_in_dim"(%cst_524) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2239"} : (tensor<f32>) -> tensor<4xf32>
        %1635 = "mhlo.select"(%1633, %1632, %1634) {name = "select.2240"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1636 = "mhlo.subtract"(%1632, %1635) {name = "subtract.2241"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1637 = "mhlo.exponential"(%1636) {name = "exponential.2242"} : (tensor<4xf32>) -> tensor<4xf32>
        %1638 = "mhlo.log"(%1637) {name = "log.2243"} : (tensor<4xf32>) -> tensor<4xf32>
        %1639 = "mhlo.reshape"(%1635) {name = "reshape.2244"} : (tensor<4xf32>) -> tensor<4xf32>
        %1640 = "mhlo.add"(%1638, %1639) {name = "add.2245"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %cst_525 = "std.constant"() {name = "constant.2246", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1641 = "mhlo.broadcast_in_dim"(%cst_525) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2247"} : (tensor<f32>) -> tensor<4xf32>
        %1642 = "mhlo.subtract"(%1640, %1641) {name = "subtract.2248"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1643 = "mhlo.is_finite"(%1642) {name = "is-finite.2249"} : (tensor<4xf32>) -> tensor<4xi1>
        %cst_526 = "std.constant"() {name = "constant.2250", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1644 = "mhlo.broadcast_in_dim"(%cst_526) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2251"} : (tensor<f32>) -> tensor<4xf32>
        %1645 = "mhlo.select"(%1643, %1642, %1644) {name = "select.2252"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1646 = "mhlo.subtract"(%1642, %1645) {name = "subtract.2253"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1647 = "mhlo.exponential"(%1646) {name = "exponential.2254"} : (tensor<4xf32>) -> tensor<4xf32>
        %1648 = "mhlo.log"(%1647) {name = "log.2255"} : (tensor<4xf32>) -> tensor<4xf32>
        %1649 = "mhlo.add"(%1648, %1645) {name = "add.2256"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %cst_527 = "std.constant"() {name = "constant.2257", value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1650 = "mhlo.broadcast_in_dim"(%cst_527) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2258"} : (tensor<f32>) -> tensor<4xf32>
        %1651 = "mhlo.subtract"(%1649, %1650) {name = "subtract.2259"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1652 = "mhlo.exponential"(%1651) {name = "exponential.2260"} : (tensor<4xf32>) -> tensor<4xf32>
        %1653 = "mhlo.subtract"(%1627, %1652) {name = "subtract.2261"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1654 = "mhlo.get_tuple_element"(%arg10) {index = 37 : i32, name = "get-tuple-element.654"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
        %1655 = "mhlo.get_tuple_element"(%arg10) {index = 32 : i32, name = "get-tuple-element.649"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
        %1656 = "mhlo.compare"(%1654, %1655) {comparison_direction = "LT", name = "compare.2167"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
        %1657 = "mhlo.broadcast_in_dim"(%1656) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2277"} : (tensor<i1>) -> tensor<4xi1>
        %1658 = "mhlo.get_tuple_element"(%arg10) {index = 31 : i32, name = "get-tuple-element.648"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
        %1659 = "mhlo.convert"(%1655) {name = "convert.2154"} : (tensor<i32>) -> tensor<f32>
        %cst_528 = "std.constant"() {name = "constant.2155", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1660 = "mhlo.add"(%1659, %cst_528) {name = "add.2156"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1661 = "mhlo.negate"(%1624) {name = "negate.2151"} : (tensor<f32>) -> tensor<f32>
        %1662 = "mhlo.power"(%1660, %1661) {name = "power.2160"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1663 = "mhlo.broadcast_in_dim"(%1662) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2269"} : (tensor<f32>) -> tensor<4xf32>
        %1664 = "mhlo.reshape"(%1653) {name = "reshape.2262"} : (tensor<4xf32>) -> tensor<4xf32>
        %1665 = "mhlo.sqrt"(%1660) {name = "sqrt.2157"} : (tensor<f32>) -> tensor<f32>
        %1666 = "mhlo.broadcast_in_dim"(%1665) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2263"} : (tensor<f32>) -> tensor<4xf32>
        %1667 = "mhlo.multiply"(%1664, %1666) {name = "multiply.2264"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1668 = "mhlo.add"(%1623, %1660) {name = "add.2158"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1669 = "mhlo.multiply"(%1668, %1622) {name = "multiply.2159"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1670 = "mhlo.broadcast_in_dim"(%1669) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2265"} : (tensor<f32>) -> tensor<4xf32>
        %1671 = "mhlo.divide"(%1667, %1670) {name = "divide.2266"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1672 = "mhlo.subtract"(%1621, %1671) {name = "subtract.2267"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1673 = "mhlo.multiply"(%1663, %1672) {name = "multiply.2270"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %cst_529 = "std.constant"() {name = "constant.2161", value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
        %1674 = "mhlo.subtract"(%cst_529, %1662) {name = "subtract.2162"} : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1675 = "mhlo.broadcast_in_dim"(%1674) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2163"} : (tensor<f32>) -> tensor<4xf32>
        %1676 = "mhlo.multiply"(%1675, %1658) {name = "multiply.2164"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1677 = "mhlo.add"(%1673, %1676) {name = "add.2271"} : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1678 = "mhlo.select"(%1657, %1658, %1677) {name = "select.2278"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %cst_530 = "std.constant"() {name = "constant.2168", value = dense<1> : tensor<i32>} : () -> tensor<i32>
        %1679 = "mhlo.add"(%1655, %cst_530) {name = "add.2169"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
        %1680 = "mhlo.compare"(%1654, %1655) {comparison_direction = "GT", name = "compare.2165"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
        %1681 = "mhlo.broadcast_in_dim"(%1680) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2275"} : (tensor<i1>) -> tensor<4xi1>
        %1682 = "mhlo.exponential"(%1672) {name = "exponential.2268"} : (tensor<4xf32>) -> tensor<4xf32>
        %1683 = "mhlo.compare"(%1654, %1655) {comparison_direction = "LT", name = "compare.2166"} : (tensor<i32>, tensor<i32>) -> tensor<i1>
        %1684 = "mhlo.broadcast_in_dim"(%1683) {broadcast_dimensions = dense<> : tensor<0xi64>, name = "broadcast.2273"} : (tensor<i1>) -> tensor<4xi1>
        %1685 = "mhlo.exponential"(%1677) {name = "exponential.2272"} : (tensor<4xf32>) -> tensor<4xf32>
        %1686 = "mhlo.select"(%1684, %1524, %1685) {name = "select.2274"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1687 = "mhlo.select"(%1681, %1682, %1686) {name = "select.2276"} : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>
        %1688 = "mhlo.get_tuple_element"(%arg10) {index = 34 : i32, name = "get-tuple-element.651"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
        %1689 = "mhlo.tuple"(%1556, %1557, %1559, %1561, %1606, %1605, %1609, %1611, %1613, %1616, %1619, %1524, %1531, %1602, %1601, %1604, %1597, %1578, %1587, %1522, %1589, %1524, %1531, %911, %709, %1620, %1621, %1622, %1623, %1624, %1653, %1678, %1679, %1687, %1688, %1532, %1533, %1654) {name = "tuple.2293"} : (tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>
        "mhlo.return"(%1689) : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> ()
      }) : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>
      %341 = "mhlo.get_tuple_element"(%340) {index = 0 : i32, name = "get-tuple-element.2401"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %342 = "mhlo.get_tuple_element"(%340) {index = 1 : i32, name = "get-tuple-element.2402"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %343 = "mhlo.get_tuple_element"(%340) {index = 2 : i32, name = "get-tuple-element.2403"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %344 = "mhlo.get_tuple_element"(%340) {index = 3 : i32, name = "get-tuple-element.2404"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
      %345 = "mhlo.get_tuple_element"(%340) {index = 4 : i32, name = "get-tuple-element.2405"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %346 = "mhlo.get_tuple_element"(%340) {index = 5 : i32, name = "get-tuple-element.2406"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %347 = "mhlo.get_tuple_element"(%340) {index = 6 : i32, name = "get-tuple-element.2407"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %348 = "mhlo.get_tuple_element"(%340) {index = 7 : i32, name = "get-tuple-element.2408"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %349 = "mhlo.get_tuple_element"(%340) {index = 8 : i32, name = "get-tuple-element.2409"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %350 = "mhlo.get_tuple_element"(%340) {index = 9 : i32, name = "get-tuple-element.2410"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %351 = "mhlo.get_tuple_element"(%340) {index = 10 : i32, name = "get-tuple-element.2411"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %352 = "mhlo.get_tuple_element"(%340) {index = 11 : i32, name = "get-tuple-element.2412"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %353 = "mhlo.get_tuple_element"(%340) {index = 12 : i32, name = "get-tuple-element.2413"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %354 = "mhlo.get_tuple_element"(%340) {index = 13 : i32, name = "get-tuple-element.2414"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xi1>
      %355 = "mhlo.get_tuple_element"(%340) {index = 14 : i32, name = "get-tuple-element.2415"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %356 = "mhlo.get_tuple_element"(%340) {index = 15 : i32, name = "get-tuple-element.2416"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %357 = "mhlo.get_tuple_element"(%340) {index = 16 : i32, name = "get-tuple-element.2417"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %358 = "mhlo.get_tuple_element"(%340) {index = 17 : i32, name = "get-tuple-element.2418"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %359 = "mhlo.get_tuple_element"(%340) {index = 18 : i32, name = "get-tuple-element.2419"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %360 = "mhlo.get_tuple_element"(%340) {index = 19 : i32, name = "get-tuple-element.2420"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %361 = "mhlo.get_tuple_element"(%340) {index = 20 : i32, name = "get-tuple-element.2421"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %362 = "mhlo.get_tuple_element"(%340) {index = 21 : i32, name = "get-tuple-element.2422"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %363 = "mhlo.get_tuple_element"(%340) {index = 22 : i32, name = "get-tuple-element.2423"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %364 = "mhlo.get_tuple_element"(%340) {index = 23 : i32, name = "get-tuple-element.2424"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
      %365 = "mhlo.get_tuple_element"(%340) {index = 24 : i32, name = "get-tuple-element.2425"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
      %366 = "mhlo.get_tuple_element"(%340) {index = 25 : i32, name = "get-tuple-element.2426"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
      %367 = "mhlo.get_tuple_element"(%340) {index = 26 : i32, name = "get-tuple-element.2427"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %368 = "mhlo.get_tuple_element"(%340) {index = 27 : i32, name = "get-tuple-element.2428"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
      %369 = "mhlo.get_tuple_element"(%340) {index = 28 : i32, name = "get-tuple-element.2429"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
      %370 = "mhlo.get_tuple_element"(%340) {index = 29 : i32, name = "get-tuple-element.2430"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
      %371 = "mhlo.get_tuple_element"(%340) {index = 30 : i32, name = "get-tuple-element.2431"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %372 = "mhlo.get_tuple_element"(%340) {index = 31 : i32, name = "get-tuple-element.2432"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %373 = "mhlo.get_tuple_element"(%340) {index = 32 : i32, name = "get-tuple-element.2433"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %374 = "mhlo.get_tuple_element"(%340) {index = 33 : i32, name = "get-tuple-element.2434"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %375 = "mhlo.get_tuple_element"(%340) {index = 34 : i32, name = "get-tuple-element.2435"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %376 = "mhlo.get_tuple_element"(%340) {index = 35 : i32, name = "get-tuple-element.2436"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
      %377 = "mhlo.get_tuple_element"(%340) {index = 36 : i32, name = "get-tuple-element.2437"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
      %378 = "mhlo.get_tuple_element"(%340) {index = 37 : i32, name = "get-tuple-element.2438"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %379 = "mhlo.tuple"(%341, %342, %343, %344, %345, %346, %347, %348, %349, %350, %351, %352, %353, %354, %355, %356, %357, %358, %359, %360, %361, %362, %363, %364, %365, %366, %367, %368, %369, %370, %371, %372, %373, %374, %375, %376, %377, %378) {name = "tuple.2439"} : (tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>
      %380 = "mhlo.get_tuple_element"(%379) {index = 0 : i32, name = "get-tuple-element.2440"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %381 = "mhlo.get_tuple_element"(%379) {index = 1 : i32, name = "get-tuple-element.2441"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %382 = "mhlo.get_tuple_element"(%379) {index = 2 : i32, name = "get-tuple-element.2442"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %383 = "mhlo.get_tuple_element"(%379) {index = 34 : i32, name = "get-tuple-element.2474"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %384 = "mhlo.get_tuple_element"(%379) {index = 35 : i32, name = "get-tuple-element.2475"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
      %385 = "mhlo.get_tuple_element"(%379) {index = 36 : i32, name = "get-tuple-element.2476"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
      %386 = "mhlo.get_tuple_element"(%379) {index = 37 : i32, name = "get-tuple-element.2477"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %387 = "mhlo.get_tuple_element"(%arg9) {index = 0 : i32, name = "get-tuple-element.2342"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %cst_102 = "std.constant"() {name = "constant.2383", value = dense<1> : tensor<i32>} : () -> tensor<i32>
      %388 = "mhlo.add"(%387, %cst_102) {name = "add.2384"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
      %389 = "mhlo.get_tuple_element"(%arg9) {index = 1 : i32, name = "get-tuple-element.2343"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %cst_103 = "std.constant"() {name = "constant.2385", value = dense<1> : tensor<i32>} : () -> tensor<i32>
      %390 = "mhlo.add"(%333, %cst_103) {name = "add.2386"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
      %391 = "mhlo.get_tuple_element"(%379) {index = 3 : i32, name = "get-tuple-element.2443"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
      %392 = "mhlo.get_tuple_element"(%379) {index = 4 : i32, name = "get-tuple-element.2444"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %393 = "mhlo.get_tuple_element"(%379) {index = 5 : i32, name = "get-tuple-element.2445"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %394 = "mhlo.get_tuple_element"(%379) {index = 6 : i32, name = "get-tuple-element.2446"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %395 = "mhlo.get_tuple_element"(%379) {index = 7 : i32, name = "get-tuple-element.2447"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %396 = "mhlo.get_tuple_element"(%379) {index = 8 : i32, name = "get-tuple-element.2448"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %397 = "mhlo.get_tuple_element"(%379) {index = 9 : i32, name = "get-tuple-element.2449"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %398 = "mhlo.get_tuple_element"(%379) {index = 10 : i32, name = "get-tuple-element.2450"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %399 = "mhlo.get_tuple_element"(%379) {index = 11 : i32, name = "get-tuple-element.2451"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %400 = "mhlo.get_tuple_element"(%379) {index = 12 : i32, name = "get-tuple-element.2452"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %401 = "mhlo.get_tuple_element"(%379) {index = 13 : i32, name = "get-tuple-element.2453"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xi1>
      %402 = "mhlo.get_tuple_element"(%379) {index = 14 : i32, name = "get-tuple-element.2454"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %403 = "mhlo.get_tuple_element"(%379) {index = 15 : i32, name = "get-tuple-element.2455"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %404 = "mhlo.get_tuple_element"(%379) {index = 16 : i32, name = "get-tuple-element.2456"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %405 = "mhlo.get_tuple_element"(%379) {index = 17 : i32, name = "get-tuple-element.2457"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %406 = "mhlo.get_tuple_element"(%379) {index = 18 : i32, name = "get-tuple-element.2458"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %407 = "mhlo.get_tuple_element"(%379) {index = 19 : i32, name = "get-tuple-element.2459"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %408 = "mhlo.get_tuple_element"(%379) {index = 20 : i32, name = "get-tuple-element.2460"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %409 = "mhlo.get_tuple_element"(%379) {index = 21 : i32, name = "get-tuple-element.2461"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %410 = "mhlo.get_tuple_element"(%379) {index = 22 : i32, name = "get-tuple-element.2462"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %411 = "mhlo.get_tuple_element"(%379) {index = 23 : i32, name = "get-tuple-element.2463"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
      %412 = "mhlo.get_tuple_element"(%379) {index = 24 : i32, name = "get-tuple-element.2464"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
      %413 = "mhlo.get_tuple_element"(%379) {index = 25 : i32, name = "get-tuple-element.2465"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
      %414 = "mhlo.get_tuple_element"(%379) {index = 26 : i32, name = "get-tuple-element.2466"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %415 = "mhlo.get_tuple_element"(%379) {index = 27 : i32, name = "get-tuple-element.2467"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
      %416 = "mhlo.get_tuple_element"(%379) {index = 28 : i32, name = "get-tuple-element.2468"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
      %417 = "mhlo.get_tuple_element"(%379) {index = 29 : i32, name = "get-tuple-element.2469"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
      %418 = "mhlo.get_tuple_element"(%379) {index = 30 : i32, name = "get-tuple-element.2470"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %419 = "mhlo.get_tuple_element"(%379) {index = 31 : i32, name = "get-tuple-element.2471"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %420 = "mhlo.get_tuple_element"(%379) {index = 32 : i32, name = "get-tuple-element.2472"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %421 = "mhlo.get_tuple_element"(%379) {index = 33 : i32, name = "get-tuple-element.2473"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
      %422 = "mhlo.get_tuple_element"(%arg9) {index = 34 : i32, name = "get-tuple-element.2376"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
      %cst_104 = "std.constant"() {name = "constant.2387", value = dense<1> : tensor<i32>} : () -> tensor<i32>
      %423 = "mhlo.add"(%422, %cst_104) {name = "add.2388"} : (tensor<i32>, tensor<i32>) -> tensor<i32>
      %424 = "mhlo.get_tuple_element"(%arg9) {index = 35 : i32, name = "get-tuple-element.2377"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tuple<tensor<1000x4xf32>, tensor<i32>>
      %425 = "mhlo.get_tuple_element"(%424) {index = 0 : i32, name = "get-tuple-element.2480"} : (tuple<tensor<1000x4xf32>, tensor<i32>>) -> tensor<1000x4xf32>
      %426 = "mhlo.reshape"(%392) {name = "reshape.2478"} : (tensor<4xf32>) -> tensor<1x4xf32>
      %cst_105 = "std.constant"() {name = "constant.2479", value = dense<0> : tensor<i32>} : () -> tensor<i32>
      %427 = "mhlo.dynamic-update-slice"(%425, %426, %422, %cst_105) : (tensor<1000x4xf32>, tensor<1x4xf32>, tensor<i32>, tensor<i32>) -> tensor<1000x4xf32>
      %428 = "mhlo.get_tuple_element"(%424) {index = 1 : i32, name = "get-tuple-element.2482"} : (tuple<tensor<1000x4xf32>, tensor<i32>>) -> tensor<i32>
      %429 = "mhlo.tuple"(%427, %428) {name = "tuple.2483"} : (tensor<1000x4xf32>, tensor<i32>) -> tuple<tensor<1000x4xf32>, tensor<i32>>
      %430 = "mhlo.get_tuple_element"(%arg9) {index = 36 : i32, name = "get-tuple-element.2378"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tuple<tensor<1000x4xi1>, tensor<i32>>
      %431 = "mhlo.get_tuple_element"(%430) {index = 0 : i32, name = "get-tuple-element.2486"} : (tuple<tensor<1000x4xi1>, tensor<i32>>) -> tensor<1000x4xi1>
      %432 = "mhlo.reshape"(%401) {name = "reshape.2484"} : (tensor<4xi1>) -> tensor<1x4xi1>
      %cst_106 = "std.constant"() {name = "constant.2485", value = dense<0> : tensor<i32>} : () -> tensor<i32>
      %433 = "mhlo.dynamic-update-slice"(%431, %432, %422, %cst_106) : (tensor<1000x4xi1>, tensor<1x4xi1>, tensor<i32>, tensor<i32>) -> tensor<1000x4xi1>
      %434 = "mhlo.get_tuple_element"(%430) {index = 1 : i32, name = "get-tuple-element.2488"} : (tuple<tensor<1000x4xi1>, tensor<i32>>) -> tensor<i32>
      %435 = "mhlo.tuple"(%433, %434) {name = "tuple.2489"} : (tensor<1000x4xi1>, tensor<i32>) -> tuple<tensor<1000x4xi1>, tensor<i32>>
      %436 = "mhlo.tuple"(%388, %389, %390, %391, %392, %393, %394, %395, %396, %397, %398, %399, %400, %401, %402, %403, %404, %405, %406, %407, %408, %409, %410, %411, %412, %413, %414, %415, %416, %417, %418, %419, %420, %421, %423, %429, %435, %331, %336, %337, %338) {name = "tuple.2490"} : (tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>
      "mhlo.return"(%436) : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> ()
    }) : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>
    %212 = "mhlo.get_tuple_element"(%211) {index = 0 : i32, name = "get-tuple-element.2542"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %213 = "mhlo.get_tuple_element"(%211) {index = 1 : i32, name = "get-tuple-element.2543"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %214 = "mhlo.get_tuple_element"(%211) {index = 2 : i32, name = "get-tuple-element.2544"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %215 = "mhlo.get_tuple_element"(%211) {index = 3 : i32, name = "get-tuple-element.2545"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
    %216 = "mhlo.get_tuple_element"(%211) {index = 4 : i32, name = "get-tuple-element.2546"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %217 = "mhlo.get_tuple_element"(%211) {index = 5 : i32, name = "get-tuple-element.2547"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %218 = "mhlo.get_tuple_element"(%211) {index = 6 : i32, name = "get-tuple-element.2548"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %219 = "mhlo.get_tuple_element"(%211) {index = 7 : i32, name = "get-tuple-element.2549"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %220 = "mhlo.get_tuple_element"(%211) {index = 8 : i32, name = "get-tuple-element.2550"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %221 = "mhlo.get_tuple_element"(%211) {index = 9 : i32, name = "get-tuple-element.2551"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %222 = "mhlo.get_tuple_element"(%211) {index = 10 : i32, name = "get-tuple-element.2552"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %223 = "mhlo.get_tuple_element"(%211) {index = 11 : i32, name = "get-tuple-element.2553"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %224 = "mhlo.get_tuple_element"(%211) {index = 12 : i32, name = "get-tuple-element.2554"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %225 = "mhlo.get_tuple_element"(%211) {index = 13 : i32, name = "get-tuple-element.2555"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xi1>
    %226 = "mhlo.get_tuple_element"(%211) {index = 14 : i32, name = "get-tuple-element.2556"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %227 = "mhlo.get_tuple_element"(%211) {index = 15 : i32, name = "get-tuple-element.2557"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %228 = "mhlo.get_tuple_element"(%211) {index = 16 : i32, name = "get-tuple-element.2558"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %229 = "mhlo.get_tuple_element"(%211) {index = 17 : i32, name = "get-tuple-element.2559"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %230 = "mhlo.get_tuple_element"(%211) {index = 18 : i32, name = "get-tuple-element.2560"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %231 = "mhlo.get_tuple_element"(%211) {index = 19 : i32, name = "get-tuple-element.2561"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %232 = "mhlo.get_tuple_element"(%211) {index = 20 : i32, name = "get-tuple-element.2562"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %233 = "mhlo.get_tuple_element"(%211) {index = 21 : i32, name = "get-tuple-element.2563"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %234 = "mhlo.get_tuple_element"(%211) {index = 22 : i32, name = "get-tuple-element.2564"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %235 = "mhlo.get_tuple_element"(%211) {index = 23 : i32, name = "get-tuple-element.2565"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
    %236 = "mhlo.get_tuple_element"(%211) {index = 24 : i32, name = "get-tuple-element.2566"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
    %237 = "mhlo.get_tuple_element"(%211) {index = 25 : i32, name = "get-tuple-element.2567"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %238 = "mhlo.get_tuple_element"(%211) {index = 26 : i32, name = "get-tuple-element.2568"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %239 = "mhlo.get_tuple_element"(%211) {index = 27 : i32, name = "get-tuple-element.2569"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %240 = "mhlo.get_tuple_element"(%211) {index = 28 : i32, name = "get-tuple-element.2570"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %241 = "mhlo.get_tuple_element"(%211) {index = 29 : i32, name = "get-tuple-element.2571"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %242 = "mhlo.get_tuple_element"(%211) {index = 30 : i32, name = "get-tuple-element.2572"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %243 = "mhlo.get_tuple_element"(%211) {index = 31 : i32, name = "get-tuple-element.2573"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %244 = "mhlo.get_tuple_element"(%211) {index = 32 : i32, name = "get-tuple-element.2574"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %245 = "mhlo.get_tuple_element"(%211) {index = 33 : i32, name = "get-tuple-element.2575"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %246 = "mhlo.get_tuple_element"(%211) {index = 34 : i32, name = "get-tuple-element.2576"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %247 = "mhlo.get_tuple_element"(%211) {index = 35 : i32, name = "get-tuple-element.2577"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tuple<tensor<1000x4xf32>, tensor<i32>>
    %248 = "mhlo.get_tuple_element"(%211) {index = 36 : i32, name = "get-tuple-element.2578"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tuple<tensor<1000x4xi1>, tensor<i32>>
    %249 = "mhlo.get_tuple_element"(%211) {index = 37 : i32, name = "get-tuple-element.2579"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tuple<tensor<1000xi32>, tensor<i32>>
    %250 = "mhlo.get_tuple_element"(%211) {index = 38 : i32, name = "get-tuple-element.2580"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %251 = "mhlo.get_tuple_element"(%211) {index = 39 : i32, name = "get-tuple-element.2581"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %252 = "mhlo.get_tuple_element"(%211) {index = 40 : i32, name = "get-tuple-element.2582"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %253 = "mhlo.tuple"(%212, %213, %214, %215, %216, %217, %218, %219, %220, %221, %222, %223, %224, %225, %226, %227, %228, %229, %230, %231, %232, %233, %234, %235, %236, %237, %238, %239, %240, %241, %242, %243, %244, %245, %246, %247, %248, %249, %250, %251, %252) {name = "tuple.2583"} : (tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>) -> tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>
    %254 = "mhlo.get_tuple_element"(%253) {index = 0 : i32, name = "get-tuple-element.2584"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %255 = "mhlo.get_tuple_element"(%253) {index = 1 : i32, name = "get-tuple-element.2585"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %256 = "mhlo.get_tuple_element"(%253) {index = 2 : i32, name = "get-tuple-element.2586"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %257 = "mhlo.get_tuple_element"(%253) {index = 3 : i32, name = "get-tuple-element.2587"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
    %258 = "mhlo.get_tuple_element"(%253) {index = 4 : i32, name = "get-tuple-element.2588"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %259 = "mhlo.get_tuple_element"(%253) {index = 5 : i32, name = "get-tuple-element.2589"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %260 = "mhlo.get_tuple_element"(%253) {index = 6 : i32, name = "get-tuple-element.2590"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %261 = "mhlo.get_tuple_element"(%253) {index = 7 : i32, name = "get-tuple-element.2591"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %262 = "mhlo.get_tuple_element"(%253) {index = 8 : i32, name = "get-tuple-element.2592"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %263 = "mhlo.get_tuple_element"(%253) {index = 9 : i32, name = "get-tuple-element.2593"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %264 = "mhlo.get_tuple_element"(%253) {index = 10 : i32, name = "get-tuple-element.2594"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %265 = "mhlo.get_tuple_element"(%253) {index = 11 : i32, name = "get-tuple-element.2595"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %266 = "mhlo.get_tuple_element"(%253) {index = 12 : i32, name = "get-tuple-element.2596"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %267 = "mhlo.get_tuple_element"(%253) {index = 13 : i32, name = "get-tuple-element.2597"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xi1>
    %268 = "mhlo.get_tuple_element"(%253) {index = 14 : i32, name = "get-tuple-element.2598"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %269 = "mhlo.get_tuple_element"(%253) {index = 15 : i32, name = "get-tuple-element.2599"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %270 = "mhlo.get_tuple_element"(%253) {index = 16 : i32, name = "get-tuple-element.2600"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %271 = "mhlo.get_tuple_element"(%253) {index = 17 : i32, name = "get-tuple-element.2601"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %272 = "mhlo.get_tuple_element"(%253) {index = 18 : i32, name = "get-tuple-element.2602"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %273 = "mhlo.get_tuple_element"(%253) {index = 19 : i32, name = "get-tuple-element.2603"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %274 = "mhlo.get_tuple_element"(%253) {index = 20 : i32, name = "get-tuple-element.2604"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %275 = "mhlo.get_tuple_element"(%253) {index = 21 : i32, name = "get-tuple-element.2605"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %276 = "mhlo.get_tuple_element"(%253) {index = 22 : i32, name = "get-tuple-element.2606"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %277 = "mhlo.get_tuple_element"(%253) {index = 23 : i32, name = "get-tuple-element.2607"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
    %278 = "mhlo.get_tuple_element"(%253) {index = 24 : i32, name = "get-tuple-element.2608"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<2xi32>
    %279 = "mhlo.get_tuple_element"(%253) {index = 25 : i32, name = "get-tuple-element.2609"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %280 = "mhlo.get_tuple_element"(%253) {index = 26 : i32, name = "get-tuple-element.2610"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %281 = "mhlo.get_tuple_element"(%253) {index = 27 : i32, name = "get-tuple-element.2611"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %282 = "mhlo.get_tuple_element"(%253) {index = 28 : i32, name = "get-tuple-element.2612"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %283 = "mhlo.get_tuple_element"(%253) {index = 29 : i32, name = "get-tuple-element.2613"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %284 = "mhlo.get_tuple_element"(%253) {index = 30 : i32, name = "get-tuple-element.2614"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %285 = "mhlo.get_tuple_element"(%253) {index = 31 : i32, name = "get-tuple-element.2615"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %286 = "mhlo.get_tuple_element"(%253) {index = 32 : i32, name = "get-tuple-element.2616"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %287 = "mhlo.get_tuple_element"(%253) {index = 33 : i32, name = "get-tuple-element.2617"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<4xf32>
    %288 = "mhlo.get_tuple_element"(%253) {index = 34 : i32, name = "get-tuple-element.2618"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %289 = "mhlo.get_tuple_element"(%253) {index = 37 : i32, name = "get-tuple-element.2621"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tuple<tensor<1000xi32>, tensor<i32>>
    %290 = "mhlo.get_tuple_element"(%253) {index = 38 : i32, name = "get-tuple-element.2622"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %291 = "mhlo.get_tuple_element"(%253) {index = 39 : i32, name = "get-tuple-element.2623"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<f32>
    %292 = "mhlo.get_tuple_element"(%253) {index = 40 : i32, name = "get-tuple-element.2624"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tensor<i32>
    %293 = "mhlo.get_tuple_element"(%253) {index = 35 : i32, name = "get-tuple-element.2619"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tuple<tensor<1000x4xf32>, tensor<i32>>
    %294 = "mhlo.get_tuple_element"(%293) {index = 0 : i32, name = "get-tuple-element.2625"} : (tuple<tensor<1000x4xf32>, tensor<i32>>) -> tensor<1000x4xf32>
    %295 = "mhlo.reshape"(%294) {name = "reshape.2627"} : (tensor<1000x4xf32>) -> tensor<1000x4xf32>
    %296 = "mhlo.get_tuple_element"(%253) {index = 36 : i32, name = "get-tuple-element.2620"} : (tuple<tensor<i32>, tensor<i32>, tensor<i32>, tensor<2xi32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xi1>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<2xi32>, tensor<2xi32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<4xf32>, tensor<i32>, tensor<4xf32>, tensor<i32>, tuple<tensor<1000x4xf32>, tensor<i32>>, tuple<tensor<1000x4xi1>, tensor<i32>>, tuple<tensor<1000xi32>, tensor<i32>>, tensor<f32>, tensor<f32>, tensor<i32>>) -> tuple<tensor<1000x4xi1>, tensor<i32>>
    %297 = "mhlo.get_tuple_element"(%296) {index = 0 : i32, name = "get-tuple-element.2626"} : (tuple<tensor<1000x4xi1>, tensor<i32>>) -> tensor<1000x4xi1>
    %298 = "mhlo.reshape"(%297) {name = "reshape.2628"} : (tensor<1000x4xi1>) -> tensor<1000x4xi1>
    %299 = "mhlo.tuple"(%295, %298) {name = "tuple.2629"} : (tensor<1000x4xf32>, tensor<1000x4xi1>) -> tuple<tensor<1000x4xf32>, tensor<1000x4xi1>>
    "std.return"(%299) : (tuple<tensor<1000x4xf32>, tensor<1000x4xi1>>) -> ()
  }) {sym_name = "main", type = (tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<4xf32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<i32>) -> tuple<tensor<1000x4xf32>, tensor<1000x4xi1>>} : () -> ()
}) : () -> ()
